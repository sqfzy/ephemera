/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const BPF_LD: u32 = 0;
pub const BPF_LDX: u32 = 1;
pub const BPF_ST: u32 = 2;
pub const BPF_STX: u32 = 3;
pub const BPF_ALU: u32 = 4;
pub const BPF_JMP: u32 = 5;
pub const BPF_RET: u32 = 6;
pub const BPF_MISC: u32 = 7;
pub const BPF_W: u32 = 0;
pub const BPF_H: u32 = 8;
pub const BPF_B: u32 = 16;
pub const BPF_IMM: u32 = 0;
pub const BPF_ABS: u32 = 32;
pub const BPF_IND: u32 = 64;
pub const BPF_MEM: u32 = 96;
pub const BPF_LEN: u32 = 128;
pub const BPF_MSH: u32 = 160;
pub const BPF_ADD: u32 = 0;
pub const BPF_SUB: u32 = 16;
pub const BPF_MUL: u32 = 32;
pub const BPF_DIV: u32 = 48;
pub const BPF_OR: u32 = 64;
pub const BPF_AND: u32 = 80;
pub const BPF_LSH: u32 = 96;
pub const BPF_RSH: u32 = 112;
pub const BPF_NEG: u32 = 128;
pub const BPF_MOD: u32 = 144;
pub const BPF_XOR: u32 = 160;
pub const BPF_JA: u32 = 0;
pub const BPF_JEQ: u32 = 16;
pub const BPF_JGT: u32 = 32;
pub const BPF_JGE: u32 = 48;
pub const BPF_JSET: u32 = 64;
pub const BPF_K: u32 = 0;
pub const BPF_X: u32 = 8;
pub const BPF_MAXINSNS: u32 = 4096;
pub const BPF_JMP32: u32 = 6;
pub const BPF_ALU64: u32 = 7;
pub const BPF_DW: u32 = 24;
pub const BPF_MEMSX: u32 = 128;
pub const BPF_ATOMIC: u32 = 192;
pub const BPF_XADD: u32 = 192;
pub const BPF_MOV: u32 = 176;
pub const BPF_ARSH: u32 = 192;
pub const BPF_END: u32 = 208;
pub const BPF_TO_LE: u32 = 0;
pub const BPF_TO_BE: u32 = 8;
pub const BPF_FROM_LE: u32 = 0;
pub const BPF_FROM_BE: u32 = 8;
pub const BPF_JNE: u32 = 80;
pub const BPF_JLT: u32 = 160;
pub const BPF_JLE: u32 = 176;
pub const BPF_JSGT: u32 = 96;
pub const BPF_JSGE: u32 = 112;
pub const BPF_JSLT: u32 = 192;
pub const BPF_JSLE: u32 = 208;
pub const BPF_JCOND: u32 = 224;
pub const BPF_CALL: u32 = 128;
pub const BPF_EXIT: u32 = 144;
pub const BPF_FETCH: u32 = 1;
pub const BPF_XCHG: u32 = 225;
pub const BPF_CMPXCHG: u32 = 241;
pub const BPF_LOAD_ACQ: u32 = 256;
pub const BPF_STORE_REL: u32 = 272;
pub const BPF_F_ALLOW_OVERRIDE: u32 = 1;
pub const BPF_F_ALLOW_MULTI: u32 = 2;
pub const BPF_F_REPLACE: u32 = 4;
pub const BPF_F_BEFORE: u32 = 8;
pub const BPF_F_AFTER: u32 = 16;
pub const BPF_F_ID: u32 = 32;
pub const BPF_F_PREORDER: u32 = 64;
pub const BPF_F_STRICT_ALIGNMENT: u32 = 1;
pub const BPF_F_ANY_ALIGNMENT: u32 = 2;
pub const BPF_F_TEST_RND_HI32: u32 = 4;
pub const BPF_F_TEST_STATE_FREQ: u32 = 8;
pub const BPF_F_SLEEPABLE: u32 = 16;
pub const BPF_F_XDP_HAS_FRAGS: u32 = 32;
pub const BPF_F_XDP_DEV_BOUND_ONLY: u32 = 64;
pub const BPF_F_TEST_REG_INVARIANTS: u32 = 128;
pub const BPF_F_NETFILTER_IP_DEFRAG: u32 = 1;
pub const BPF_PSEUDO_MAP_FD: u32 = 1;
pub const BPF_PSEUDO_MAP_IDX: u32 = 5;
pub const BPF_PSEUDO_MAP_VALUE: u32 = 2;
pub const BPF_PSEUDO_MAP_IDX_VALUE: u32 = 6;
pub const BPF_PSEUDO_BTF_ID: u32 = 3;
pub const BPF_PSEUDO_FUNC: u32 = 4;
pub const BPF_PSEUDO_CALL: u32 = 1;
pub const BPF_PSEUDO_KFUNC_CALL: u32 = 2;
pub const BPF_F_QUERY_EFFECTIVE: u32 = 1;
pub const BPF_F_TEST_RUN_ON_CPU: u32 = 1;
pub const BPF_F_TEST_XDP_LIVE_FRAMES: u32 = 2;
pub const BPF_F_TEST_SKB_CHECKSUM_COMPLETE: u32 = 4;
pub const BPF_BUILD_ID_SIZE: u32 = 20;
pub const BPF_OBJ_NAME_LEN: u32 = 16;
pub const XDP_PACKET_HEADROOM: u32 = 256;
pub const BPF_TAG_SIZE: u32 = 8;
pub const LIBBPF_MAJOR_VERSION: u32 = 1;
pub const LIBBPF_MINOR_VERSION: u32 = 4;
pub const BPF_LOG_BUF_SIZE: u32 = 16777215;
pub const XDP_DEFAULT_RUN_PRIO: u32 = 50;
pub const XDP_BPFFS_ENVVAR: &[u8; 13] = b"LIBXDP_BPFFS\0";
pub const XDP_BPFFS_MOUNT_ENVVAR: &[u8; 23] = b"LIBXDP_BPFFS_AUTOMOUNT\0";
pub const XDP_OBJECT_ENVVAR: &[u8; 19] = b"LIBXDP_OBJECT_PATH\0";
pub const XDP_METADATA_SECTION: &[u8; 13] = b"xdp_metadata\0";
pub const XDP_DISPATCHER_VERSION: u32 = 2;
pub const XDP_DISPATCHER_MAGIC: u32 = 236;
pub const XDP_DISPATCHER_RETVAL: u32 = 31;
pub const MAX_DISPATCHER_ACTIONS: u32 = 10;
pub const XDP_SHARED_UMEM: u32 = 1;
pub const XDP_COPY: u32 = 2;
pub const XDP_ZEROCOPY: u32 = 4;
pub const XDP_USE_NEED_WAKEUP: u32 = 8;
pub const XDP_USE_SG: u32 = 16;
pub const XDP_UMEM_UNALIGNED_CHUNK_FLAG: u32 = 1;
pub const XDP_UMEM_TX_SW_CSUM: u32 = 2;
pub const XDP_UMEM_TX_METADATA_LEN: u32 = 4;
pub const XDP_RING_NEED_WAKEUP: u32 = 1;
pub const XDP_MMAP_OFFSETS: u32 = 1;
pub const XDP_RX_RING: u32 = 2;
pub const XDP_TX_RING: u32 = 3;
pub const XDP_UMEM_REG: u32 = 4;
pub const XDP_UMEM_FILL_RING: u32 = 5;
pub const XDP_UMEM_COMPLETION_RING: u32 = 6;
pub const XDP_STATISTICS: u32 = 7;
pub const XDP_OPTIONS: u32 = 8;
pub const XDP_OPTIONS_ZEROCOPY: u32 = 1;
pub const XDP_PGOFF_RX_RING: u32 = 0;
pub const XDP_PGOFF_TX_RING: u32 = 2147483648;
pub const XDP_UMEM_PGOFF_FILL_RING: u64 = 4294967296;
pub const XDP_UMEM_PGOFF_COMPLETION_RING: u64 = 6442450944;
pub const XSK_UNALIGNED_BUF_OFFSET_SHIFT: u32 = 48;
pub const XSK_UNALIGNED_BUF_ADDR_MASK: u64 = 281474976710655;
pub const XDP_TXMD_FLAGS_TIMESTAMP: u32 = 1;
pub const XDP_TXMD_FLAGS_CHECKSUM: u32 = 2;
pub const XDP_TXMD_FLAGS_LAUNCH_TIME: u32 = 4;
pub const XDP_PKT_CONTD: u32 = 1;
pub const XDP_TX_METADATA: u32 = 2;
pub const XSK_RING_CONS__DEFAULT_NUM_DESCS: u32 = 2048;
pub const XSK_RING_PROD__DEFAULT_NUM_DESCS: u32 = 2048;
pub const XSK_UMEM__DEFAULT_FRAME_SHIFT: u32 = 12;
pub const XSK_UMEM__DEFAULT_FRAME_SIZE: u32 = 4096;
pub const XSK_UMEM__DEFAULT_FRAME_HEADROOM: u32 = 0;
pub const XSK_UMEM__DEFAULT_FLAGS: u32 = 0;
pub const XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD: u32 = 1;
pub const XSK_LIBXDP_FLAGS__INHIBIT_PROG_LOAD: u32 = 1;
pub type __gnuc_va_list = __builtin_va_list;
pub type __pid_t = ::std::os::raw::c_int;
pub type va_list = __gnuc_va_list;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type __be16 = __u16;
pub type __be32 = __u32;
pub const bpf_cond_pseudo_jmp_BPF_MAY_GOTO: bpf_cond_pseudo_jmp = 0;
pub type bpf_cond_pseudo_jmp = ::std::os::raw::c_uint;
pub const BPF_REG_0: _bindgen_ty_1 = 0;
pub const BPF_REG_1: _bindgen_ty_1 = 1;
pub const BPF_REG_2: _bindgen_ty_1 = 2;
pub const BPF_REG_3: _bindgen_ty_1 = 3;
pub const BPF_REG_4: _bindgen_ty_1 = 4;
pub const BPF_REG_5: _bindgen_ty_1 = 5;
pub const BPF_REG_6: _bindgen_ty_1 = 6;
pub const BPF_REG_7: _bindgen_ty_1 = 7;
pub const BPF_REG_8: _bindgen_ty_1 = 8;
pub const BPF_REG_9: _bindgen_ty_1 = 9;
pub const BPF_REG_10: _bindgen_ty_1 = 10;
pub const __MAX_BPF_REG: _bindgen_ty_1 = 11;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_insn {
    pub code: __u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub off: __s16,
    pub imm: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_insn"][::std::mem::size_of::<bpf_insn>() - 8usize];
    ["Alignment of bpf_insn"][::std::mem::align_of::<bpf_insn>() - 4usize];
    ["Offset of field: bpf_insn::code"][::std::mem::offset_of!(bpf_insn, code) - 0usize];
    ["Offset of field: bpf_insn::off"][::std::mem::offset_of!(bpf_insn, off) - 2usize];
    ["Offset of field: bpf_insn::imm"][::std::mem::offset_of!(bpf_insn, imm) - 4usize];
};
impl bpf_insn {
    #[inline]
    pub fn dst_reg(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_dst_reg(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn src_reg(&self) -> __u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_src_reg(&mut self, val: __u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(dst_reg: __u8, src_reg: __u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let dst_reg: u8 = unsafe { ::std::mem::transmute(dst_reg) };
            dst_reg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let src_reg: u8 = unsafe { ::std::mem::transmute(src_reg) };
            src_reg as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct bpf_lpm_trie_key {
    pub prefixlen: __u32,
    pub data: __IncompleteArrayField<__u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_lpm_trie_key"][::std::mem::size_of::<bpf_lpm_trie_key>() - 4usize];
    ["Alignment of bpf_lpm_trie_key"][::std::mem::align_of::<bpf_lpm_trie_key>() - 4usize];
    ["Offset of field: bpf_lpm_trie_key::prefixlen"]
        [::std::mem::offset_of!(bpf_lpm_trie_key, prefixlen) - 0usize];
    ["Offset of field: bpf_lpm_trie_key::data"]
        [::std::mem::offset_of!(bpf_lpm_trie_key, data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_lpm_trie_key_hdr {
    pub prefixlen: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_lpm_trie_key_hdr"][::std::mem::size_of::<bpf_lpm_trie_key_hdr>() - 4usize];
    ["Alignment of bpf_lpm_trie_key_hdr"][::std::mem::align_of::<bpf_lpm_trie_key_hdr>() - 4usize];
    ["Offset of field: bpf_lpm_trie_key_hdr::prefixlen"]
        [::std::mem::offset_of!(bpf_lpm_trie_key_hdr, prefixlen) - 0usize];
};
#[repr(C)]
pub struct bpf_lpm_trie_key_u8 {
    pub __bindgen_anon_1: bpf_lpm_trie_key_u8__bindgen_ty_1,
    pub data: __IncompleteArrayField<__u8>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_lpm_trie_key_u8__bindgen_ty_1 {
    pub hdr: bpf_lpm_trie_key_hdr,
    pub prefixlen: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_lpm_trie_key_u8__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_lpm_trie_key_u8__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_lpm_trie_key_u8__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_lpm_trie_key_u8__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_lpm_trie_key_u8__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(bpf_lpm_trie_key_u8__bindgen_ty_1, hdr) - 0usize];
    ["Offset of field: bpf_lpm_trie_key_u8__bindgen_ty_1::prefixlen"]
        [::std::mem::offset_of!(bpf_lpm_trie_key_u8__bindgen_ty_1, prefixlen) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_lpm_trie_key_u8"][::std::mem::size_of::<bpf_lpm_trie_key_u8>() - 4usize];
    ["Alignment of bpf_lpm_trie_key_u8"][::std::mem::align_of::<bpf_lpm_trie_key_u8>() - 4usize];
    ["Offset of field: bpf_lpm_trie_key_u8::data"]
        [::std::mem::offset_of!(bpf_lpm_trie_key_u8, data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_cgroup_storage_key {
    pub cgroup_inode_id: __u64,
    pub attach_type: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_cgroup_storage_key"][::std::mem::size_of::<bpf_cgroup_storage_key>() - 16usize];
    ["Alignment of bpf_cgroup_storage_key"]
        [::std::mem::align_of::<bpf_cgroup_storage_key>() - 8usize];
    ["Offset of field: bpf_cgroup_storage_key::cgroup_inode_id"]
        [::std::mem::offset_of!(bpf_cgroup_storage_key, cgroup_inode_id) - 0usize];
    ["Offset of field: bpf_cgroup_storage_key::attach_type"]
        [::std::mem::offset_of!(bpf_cgroup_storage_key, attach_type) - 8usize];
};
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_ORDER_UNSPEC: bpf_cgroup_iter_order = 0;
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_SELF_ONLY: bpf_cgroup_iter_order = 1;
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_DESCENDANTS_PRE: bpf_cgroup_iter_order = 2;
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_DESCENDANTS_POST: bpf_cgroup_iter_order = 3;
pub const bpf_cgroup_iter_order_BPF_CGROUP_ITER_ANCESTORS_UP: bpf_cgroup_iter_order = 4;
pub type bpf_cgroup_iter_order = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_iter_link_info {
    pub map: bpf_iter_link_info__bindgen_ty_1,
    pub cgroup: bpf_iter_link_info__bindgen_ty_2,
    pub task: bpf_iter_link_info__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_iter_link_info__bindgen_ty_1 {
    pub map_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_iter_link_info__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_iter_link_info__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_iter_link_info__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_iter_link_info__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_iter_link_info__bindgen_ty_1::map_fd"]
        [::std::mem::offset_of!(bpf_iter_link_info__bindgen_ty_1, map_fd) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_iter_link_info__bindgen_ty_2 {
    pub order: bpf_cgroup_iter_order,
    pub cgroup_fd: __u32,
    pub cgroup_id: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_iter_link_info__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_iter_link_info__bindgen_ty_2>() - 16usize];
    ["Alignment of bpf_iter_link_info__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_iter_link_info__bindgen_ty_2>() - 8usize];
    ["Offset of field: bpf_iter_link_info__bindgen_ty_2::order"]
        [::std::mem::offset_of!(bpf_iter_link_info__bindgen_ty_2, order) - 0usize];
    ["Offset of field: bpf_iter_link_info__bindgen_ty_2::cgroup_fd"]
        [::std::mem::offset_of!(bpf_iter_link_info__bindgen_ty_2, cgroup_fd) - 4usize];
    ["Offset of field: bpf_iter_link_info__bindgen_ty_2::cgroup_id"]
        [::std::mem::offset_of!(bpf_iter_link_info__bindgen_ty_2, cgroup_id) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_iter_link_info__bindgen_ty_3 {
    pub tid: __u32,
    pub pid: __u32,
    pub pid_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_iter_link_info__bindgen_ty_3"]
        [::std::mem::size_of::<bpf_iter_link_info__bindgen_ty_3>() - 12usize];
    ["Alignment of bpf_iter_link_info__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_iter_link_info__bindgen_ty_3>() - 4usize];
    ["Offset of field: bpf_iter_link_info__bindgen_ty_3::tid"]
        [::std::mem::offset_of!(bpf_iter_link_info__bindgen_ty_3, tid) - 0usize];
    ["Offset of field: bpf_iter_link_info__bindgen_ty_3::pid"]
        [::std::mem::offset_of!(bpf_iter_link_info__bindgen_ty_3, pid) - 4usize];
    ["Offset of field: bpf_iter_link_info__bindgen_ty_3::pid_fd"]
        [::std::mem::offset_of!(bpf_iter_link_info__bindgen_ty_3, pid_fd) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_iter_link_info"][::std::mem::size_of::<bpf_iter_link_info>() - 16usize];
    ["Alignment of bpf_iter_link_info"][::std::mem::align_of::<bpf_iter_link_info>() - 8usize];
    ["Offset of field: bpf_iter_link_info::map"]
        [::std::mem::offset_of!(bpf_iter_link_info, map) - 0usize];
    ["Offset of field: bpf_iter_link_info::cgroup"]
        [::std::mem::offset_of!(bpf_iter_link_info, cgroup) - 0usize];
    ["Offset of field: bpf_iter_link_info::task"]
        [::std::mem::offset_of!(bpf_iter_link_info, task) - 0usize];
};
pub const bpf_cmd_BPF_MAP_CREATE: bpf_cmd = 0;
pub const bpf_cmd_BPF_MAP_LOOKUP_ELEM: bpf_cmd = 1;
pub const bpf_cmd_BPF_MAP_UPDATE_ELEM: bpf_cmd = 2;
pub const bpf_cmd_BPF_MAP_DELETE_ELEM: bpf_cmd = 3;
pub const bpf_cmd_BPF_MAP_GET_NEXT_KEY: bpf_cmd = 4;
pub const bpf_cmd_BPF_PROG_LOAD: bpf_cmd = 5;
pub const bpf_cmd_BPF_OBJ_PIN: bpf_cmd = 6;
pub const bpf_cmd_BPF_OBJ_GET: bpf_cmd = 7;
pub const bpf_cmd_BPF_PROG_ATTACH: bpf_cmd = 8;
pub const bpf_cmd_BPF_PROG_DETACH: bpf_cmd = 9;
pub const bpf_cmd_BPF_PROG_TEST_RUN: bpf_cmd = 10;
pub const bpf_cmd_BPF_PROG_RUN: bpf_cmd = 10;
pub const bpf_cmd_BPF_PROG_GET_NEXT_ID: bpf_cmd = 11;
pub const bpf_cmd_BPF_MAP_GET_NEXT_ID: bpf_cmd = 12;
pub const bpf_cmd_BPF_PROG_GET_FD_BY_ID: bpf_cmd = 13;
pub const bpf_cmd_BPF_MAP_GET_FD_BY_ID: bpf_cmd = 14;
pub const bpf_cmd_BPF_OBJ_GET_INFO_BY_FD: bpf_cmd = 15;
pub const bpf_cmd_BPF_PROG_QUERY: bpf_cmd = 16;
pub const bpf_cmd_BPF_RAW_TRACEPOINT_OPEN: bpf_cmd = 17;
pub const bpf_cmd_BPF_BTF_LOAD: bpf_cmd = 18;
pub const bpf_cmd_BPF_BTF_GET_FD_BY_ID: bpf_cmd = 19;
pub const bpf_cmd_BPF_TASK_FD_QUERY: bpf_cmd = 20;
pub const bpf_cmd_BPF_MAP_LOOKUP_AND_DELETE_ELEM: bpf_cmd = 21;
pub const bpf_cmd_BPF_MAP_FREEZE: bpf_cmd = 22;
pub const bpf_cmd_BPF_BTF_GET_NEXT_ID: bpf_cmd = 23;
pub const bpf_cmd_BPF_MAP_LOOKUP_BATCH: bpf_cmd = 24;
pub const bpf_cmd_BPF_MAP_LOOKUP_AND_DELETE_BATCH: bpf_cmd = 25;
pub const bpf_cmd_BPF_MAP_UPDATE_BATCH: bpf_cmd = 26;
pub const bpf_cmd_BPF_MAP_DELETE_BATCH: bpf_cmd = 27;
pub const bpf_cmd_BPF_LINK_CREATE: bpf_cmd = 28;
pub const bpf_cmd_BPF_LINK_UPDATE: bpf_cmd = 29;
pub const bpf_cmd_BPF_LINK_GET_FD_BY_ID: bpf_cmd = 30;
pub const bpf_cmd_BPF_LINK_GET_NEXT_ID: bpf_cmd = 31;
pub const bpf_cmd_BPF_ENABLE_STATS: bpf_cmd = 32;
pub const bpf_cmd_BPF_ITER_CREATE: bpf_cmd = 33;
pub const bpf_cmd_BPF_LINK_DETACH: bpf_cmd = 34;
pub const bpf_cmd_BPF_PROG_BIND_MAP: bpf_cmd = 35;
pub const bpf_cmd_BPF_TOKEN_CREATE: bpf_cmd = 36;
pub const bpf_cmd___MAX_BPF_CMD: bpf_cmd = 37;
pub type bpf_cmd = ::std::os::raw::c_uint;
pub const bpf_map_type_BPF_MAP_TYPE_UNSPEC: bpf_map_type = 0;
pub const bpf_map_type_BPF_MAP_TYPE_HASH: bpf_map_type = 1;
pub const bpf_map_type_BPF_MAP_TYPE_ARRAY: bpf_map_type = 2;
pub const bpf_map_type_BPF_MAP_TYPE_PROG_ARRAY: bpf_map_type = 3;
pub const bpf_map_type_BPF_MAP_TYPE_PERF_EVENT_ARRAY: bpf_map_type = 4;
pub const bpf_map_type_BPF_MAP_TYPE_PERCPU_HASH: bpf_map_type = 5;
pub const bpf_map_type_BPF_MAP_TYPE_PERCPU_ARRAY: bpf_map_type = 6;
pub const bpf_map_type_BPF_MAP_TYPE_STACK_TRACE: bpf_map_type = 7;
pub const bpf_map_type_BPF_MAP_TYPE_CGROUP_ARRAY: bpf_map_type = 8;
pub const bpf_map_type_BPF_MAP_TYPE_LRU_HASH: bpf_map_type = 9;
pub const bpf_map_type_BPF_MAP_TYPE_LRU_PERCPU_HASH: bpf_map_type = 10;
pub const bpf_map_type_BPF_MAP_TYPE_LPM_TRIE: bpf_map_type = 11;
pub const bpf_map_type_BPF_MAP_TYPE_ARRAY_OF_MAPS: bpf_map_type = 12;
pub const bpf_map_type_BPF_MAP_TYPE_HASH_OF_MAPS: bpf_map_type = 13;
pub const bpf_map_type_BPF_MAP_TYPE_DEVMAP: bpf_map_type = 14;
pub const bpf_map_type_BPF_MAP_TYPE_SOCKMAP: bpf_map_type = 15;
pub const bpf_map_type_BPF_MAP_TYPE_CPUMAP: bpf_map_type = 16;
pub const bpf_map_type_BPF_MAP_TYPE_XSKMAP: bpf_map_type = 17;
pub const bpf_map_type_BPF_MAP_TYPE_SOCKHASH: bpf_map_type = 18;
pub const bpf_map_type_BPF_MAP_TYPE_CGROUP_STORAGE_DEPRECATED: bpf_map_type = 19;
pub const bpf_map_type_BPF_MAP_TYPE_CGROUP_STORAGE: bpf_map_type = 19;
pub const bpf_map_type_BPF_MAP_TYPE_REUSEPORT_SOCKARRAY: bpf_map_type = 20;
pub const bpf_map_type_BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE_DEPRECATED: bpf_map_type = 21;
pub const bpf_map_type_BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE: bpf_map_type = 21;
pub const bpf_map_type_BPF_MAP_TYPE_QUEUE: bpf_map_type = 22;
pub const bpf_map_type_BPF_MAP_TYPE_STACK: bpf_map_type = 23;
pub const bpf_map_type_BPF_MAP_TYPE_SK_STORAGE: bpf_map_type = 24;
pub const bpf_map_type_BPF_MAP_TYPE_DEVMAP_HASH: bpf_map_type = 25;
pub const bpf_map_type_BPF_MAP_TYPE_STRUCT_OPS: bpf_map_type = 26;
pub const bpf_map_type_BPF_MAP_TYPE_RINGBUF: bpf_map_type = 27;
pub const bpf_map_type_BPF_MAP_TYPE_INODE_STORAGE: bpf_map_type = 28;
pub const bpf_map_type_BPF_MAP_TYPE_TASK_STORAGE: bpf_map_type = 29;
pub const bpf_map_type_BPF_MAP_TYPE_BLOOM_FILTER: bpf_map_type = 30;
pub const bpf_map_type_BPF_MAP_TYPE_USER_RINGBUF: bpf_map_type = 31;
pub const bpf_map_type_BPF_MAP_TYPE_CGRP_STORAGE: bpf_map_type = 32;
pub const bpf_map_type_BPF_MAP_TYPE_ARENA: bpf_map_type = 33;
pub const bpf_map_type___MAX_BPF_MAP_TYPE: bpf_map_type = 34;
pub type bpf_map_type = ::std::os::raw::c_uint;
pub const bpf_prog_type_BPF_PROG_TYPE_UNSPEC: bpf_prog_type = 0;
pub const bpf_prog_type_BPF_PROG_TYPE_SOCKET_FILTER: bpf_prog_type = 1;
pub const bpf_prog_type_BPF_PROG_TYPE_KPROBE: bpf_prog_type = 2;
pub const bpf_prog_type_BPF_PROG_TYPE_SCHED_CLS: bpf_prog_type = 3;
pub const bpf_prog_type_BPF_PROG_TYPE_SCHED_ACT: bpf_prog_type = 4;
pub const bpf_prog_type_BPF_PROG_TYPE_TRACEPOINT: bpf_prog_type = 5;
pub const bpf_prog_type_BPF_PROG_TYPE_XDP: bpf_prog_type = 6;
pub const bpf_prog_type_BPF_PROG_TYPE_PERF_EVENT: bpf_prog_type = 7;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SKB: bpf_prog_type = 8;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SOCK: bpf_prog_type = 9;
pub const bpf_prog_type_BPF_PROG_TYPE_LWT_IN: bpf_prog_type = 10;
pub const bpf_prog_type_BPF_PROG_TYPE_LWT_OUT: bpf_prog_type = 11;
pub const bpf_prog_type_BPF_PROG_TYPE_LWT_XMIT: bpf_prog_type = 12;
pub const bpf_prog_type_BPF_PROG_TYPE_SOCK_OPS: bpf_prog_type = 13;
pub const bpf_prog_type_BPF_PROG_TYPE_SK_SKB: bpf_prog_type = 14;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_DEVICE: bpf_prog_type = 15;
pub const bpf_prog_type_BPF_PROG_TYPE_SK_MSG: bpf_prog_type = 16;
pub const bpf_prog_type_BPF_PROG_TYPE_RAW_TRACEPOINT: bpf_prog_type = 17;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SOCK_ADDR: bpf_prog_type = 18;
pub const bpf_prog_type_BPF_PROG_TYPE_LWT_SEG6LOCAL: bpf_prog_type = 19;
pub const bpf_prog_type_BPF_PROG_TYPE_LIRC_MODE2: bpf_prog_type = 20;
pub const bpf_prog_type_BPF_PROG_TYPE_SK_REUSEPORT: bpf_prog_type = 21;
pub const bpf_prog_type_BPF_PROG_TYPE_FLOW_DISSECTOR: bpf_prog_type = 22;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SYSCTL: bpf_prog_type = 23;
pub const bpf_prog_type_BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE: bpf_prog_type = 24;
pub const bpf_prog_type_BPF_PROG_TYPE_CGROUP_SOCKOPT: bpf_prog_type = 25;
pub const bpf_prog_type_BPF_PROG_TYPE_TRACING: bpf_prog_type = 26;
pub const bpf_prog_type_BPF_PROG_TYPE_STRUCT_OPS: bpf_prog_type = 27;
pub const bpf_prog_type_BPF_PROG_TYPE_EXT: bpf_prog_type = 28;
pub const bpf_prog_type_BPF_PROG_TYPE_LSM: bpf_prog_type = 29;
pub const bpf_prog_type_BPF_PROG_TYPE_SK_LOOKUP: bpf_prog_type = 30;
pub const bpf_prog_type_BPF_PROG_TYPE_SYSCALL: bpf_prog_type = 31;
pub const bpf_prog_type_BPF_PROG_TYPE_NETFILTER: bpf_prog_type = 32;
pub const bpf_prog_type___MAX_BPF_PROG_TYPE: bpf_prog_type = 33;
pub type bpf_prog_type = ::std::os::raw::c_uint;
pub const bpf_attach_type_BPF_CGROUP_INET_INGRESS: bpf_attach_type = 0;
pub const bpf_attach_type_BPF_CGROUP_INET_EGRESS: bpf_attach_type = 1;
pub const bpf_attach_type_BPF_CGROUP_INET_SOCK_CREATE: bpf_attach_type = 2;
pub const bpf_attach_type_BPF_CGROUP_SOCK_OPS: bpf_attach_type = 3;
pub const bpf_attach_type_BPF_SK_SKB_STREAM_PARSER: bpf_attach_type = 4;
pub const bpf_attach_type_BPF_SK_SKB_STREAM_VERDICT: bpf_attach_type = 5;
pub const bpf_attach_type_BPF_CGROUP_DEVICE: bpf_attach_type = 6;
pub const bpf_attach_type_BPF_SK_MSG_VERDICT: bpf_attach_type = 7;
pub const bpf_attach_type_BPF_CGROUP_INET4_BIND: bpf_attach_type = 8;
pub const bpf_attach_type_BPF_CGROUP_INET6_BIND: bpf_attach_type = 9;
pub const bpf_attach_type_BPF_CGROUP_INET4_CONNECT: bpf_attach_type = 10;
pub const bpf_attach_type_BPF_CGROUP_INET6_CONNECT: bpf_attach_type = 11;
pub const bpf_attach_type_BPF_CGROUP_INET4_POST_BIND: bpf_attach_type = 12;
pub const bpf_attach_type_BPF_CGROUP_INET6_POST_BIND: bpf_attach_type = 13;
pub const bpf_attach_type_BPF_CGROUP_UDP4_SENDMSG: bpf_attach_type = 14;
pub const bpf_attach_type_BPF_CGROUP_UDP6_SENDMSG: bpf_attach_type = 15;
pub const bpf_attach_type_BPF_LIRC_MODE2: bpf_attach_type = 16;
pub const bpf_attach_type_BPF_FLOW_DISSECTOR: bpf_attach_type = 17;
pub const bpf_attach_type_BPF_CGROUP_SYSCTL: bpf_attach_type = 18;
pub const bpf_attach_type_BPF_CGROUP_UDP4_RECVMSG: bpf_attach_type = 19;
pub const bpf_attach_type_BPF_CGROUP_UDP6_RECVMSG: bpf_attach_type = 20;
pub const bpf_attach_type_BPF_CGROUP_GETSOCKOPT: bpf_attach_type = 21;
pub const bpf_attach_type_BPF_CGROUP_SETSOCKOPT: bpf_attach_type = 22;
pub const bpf_attach_type_BPF_TRACE_RAW_TP: bpf_attach_type = 23;
pub const bpf_attach_type_BPF_TRACE_FENTRY: bpf_attach_type = 24;
pub const bpf_attach_type_BPF_TRACE_FEXIT: bpf_attach_type = 25;
pub const bpf_attach_type_BPF_MODIFY_RETURN: bpf_attach_type = 26;
pub const bpf_attach_type_BPF_LSM_MAC: bpf_attach_type = 27;
pub const bpf_attach_type_BPF_TRACE_ITER: bpf_attach_type = 28;
pub const bpf_attach_type_BPF_CGROUP_INET4_GETPEERNAME: bpf_attach_type = 29;
pub const bpf_attach_type_BPF_CGROUP_INET6_GETPEERNAME: bpf_attach_type = 30;
pub const bpf_attach_type_BPF_CGROUP_INET4_GETSOCKNAME: bpf_attach_type = 31;
pub const bpf_attach_type_BPF_CGROUP_INET6_GETSOCKNAME: bpf_attach_type = 32;
pub const bpf_attach_type_BPF_XDP_DEVMAP: bpf_attach_type = 33;
pub const bpf_attach_type_BPF_CGROUP_INET_SOCK_RELEASE: bpf_attach_type = 34;
pub const bpf_attach_type_BPF_XDP_CPUMAP: bpf_attach_type = 35;
pub const bpf_attach_type_BPF_SK_LOOKUP: bpf_attach_type = 36;
pub const bpf_attach_type_BPF_XDP: bpf_attach_type = 37;
pub const bpf_attach_type_BPF_SK_SKB_VERDICT: bpf_attach_type = 38;
pub const bpf_attach_type_BPF_SK_REUSEPORT_SELECT: bpf_attach_type = 39;
pub const bpf_attach_type_BPF_SK_REUSEPORT_SELECT_OR_MIGRATE: bpf_attach_type = 40;
pub const bpf_attach_type_BPF_PERF_EVENT: bpf_attach_type = 41;
pub const bpf_attach_type_BPF_TRACE_KPROBE_MULTI: bpf_attach_type = 42;
pub const bpf_attach_type_BPF_LSM_CGROUP: bpf_attach_type = 43;
pub const bpf_attach_type_BPF_STRUCT_OPS: bpf_attach_type = 44;
pub const bpf_attach_type_BPF_NETFILTER: bpf_attach_type = 45;
pub const bpf_attach_type_BPF_TCX_INGRESS: bpf_attach_type = 46;
pub const bpf_attach_type_BPF_TCX_EGRESS: bpf_attach_type = 47;
pub const bpf_attach_type_BPF_TRACE_UPROBE_MULTI: bpf_attach_type = 48;
pub const bpf_attach_type_BPF_CGROUP_UNIX_CONNECT: bpf_attach_type = 49;
pub const bpf_attach_type_BPF_CGROUP_UNIX_SENDMSG: bpf_attach_type = 50;
pub const bpf_attach_type_BPF_CGROUP_UNIX_RECVMSG: bpf_attach_type = 51;
pub const bpf_attach_type_BPF_CGROUP_UNIX_GETPEERNAME: bpf_attach_type = 52;
pub const bpf_attach_type_BPF_CGROUP_UNIX_GETSOCKNAME: bpf_attach_type = 53;
pub const bpf_attach_type_BPF_NETKIT_PRIMARY: bpf_attach_type = 54;
pub const bpf_attach_type_BPF_NETKIT_PEER: bpf_attach_type = 55;
pub const bpf_attach_type_BPF_TRACE_KPROBE_SESSION: bpf_attach_type = 56;
pub const bpf_attach_type_BPF_TRACE_UPROBE_SESSION: bpf_attach_type = 57;
pub const bpf_attach_type___MAX_BPF_ATTACH_TYPE: bpf_attach_type = 58;
pub type bpf_attach_type = ::std::os::raw::c_uint;
pub const bpf_link_type_BPF_LINK_TYPE_UNSPEC: bpf_link_type = 0;
pub const bpf_link_type_BPF_LINK_TYPE_RAW_TRACEPOINT: bpf_link_type = 1;
pub const bpf_link_type_BPF_LINK_TYPE_TRACING: bpf_link_type = 2;
pub const bpf_link_type_BPF_LINK_TYPE_CGROUP: bpf_link_type = 3;
pub const bpf_link_type_BPF_LINK_TYPE_ITER: bpf_link_type = 4;
pub const bpf_link_type_BPF_LINK_TYPE_NETNS: bpf_link_type = 5;
pub const bpf_link_type_BPF_LINK_TYPE_XDP: bpf_link_type = 6;
pub const bpf_link_type_BPF_LINK_TYPE_PERF_EVENT: bpf_link_type = 7;
pub const bpf_link_type_BPF_LINK_TYPE_KPROBE_MULTI: bpf_link_type = 8;
pub const bpf_link_type_BPF_LINK_TYPE_STRUCT_OPS: bpf_link_type = 9;
pub const bpf_link_type_BPF_LINK_TYPE_NETFILTER: bpf_link_type = 10;
pub const bpf_link_type_BPF_LINK_TYPE_TCX: bpf_link_type = 11;
pub const bpf_link_type_BPF_LINK_TYPE_UPROBE_MULTI: bpf_link_type = 12;
pub const bpf_link_type_BPF_LINK_TYPE_NETKIT: bpf_link_type = 13;
pub const bpf_link_type_BPF_LINK_TYPE_SOCKMAP: bpf_link_type = 14;
pub const bpf_link_type___MAX_BPF_LINK_TYPE: bpf_link_type = 15;
pub type bpf_link_type = ::std::os::raw::c_uint;
pub const bpf_perf_event_type_BPF_PERF_EVENT_UNSPEC: bpf_perf_event_type = 0;
pub const bpf_perf_event_type_BPF_PERF_EVENT_UPROBE: bpf_perf_event_type = 1;
pub const bpf_perf_event_type_BPF_PERF_EVENT_URETPROBE: bpf_perf_event_type = 2;
pub const bpf_perf_event_type_BPF_PERF_EVENT_KPROBE: bpf_perf_event_type = 3;
pub const bpf_perf_event_type_BPF_PERF_EVENT_KRETPROBE: bpf_perf_event_type = 4;
pub const bpf_perf_event_type_BPF_PERF_EVENT_TRACEPOINT: bpf_perf_event_type = 5;
pub const bpf_perf_event_type_BPF_PERF_EVENT_EVENT: bpf_perf_event_type = 6;
pub type bpf_perf_event_type = ::std::os::raw::c_uint;
pub const BPF_F_KPROBE_MULTI_RETURN: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const BPF_F_UPROBE_MULTI_RETURN: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const bpf_addr_space_cast_BPF_ADDR_SPACE_CAST: bpf_addr_space_cast = 1;
pub type bpf_addr_space_cast = ::std::os::raw::c_uint;
pub const BPF_ANY: _bindgen_ty_4 = 0;
pub const BPF_NOEXIST: _bindgen_ty_4 = 1;
pub const BPF_EXIST: _bindgen_ty_4 = 2;
pub const BPF_F_LOCK: _bindgen_ty_4 = 4;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const BPF_F_NO_PREALLOC: _bindgen_ty_5 = 1;
pub const BPF_F_NO_COMMON_LRU: _bindgen_ty_5 = 2;
pub const BPF_F_NUMA_NODE: _bindgen_ty_5 = 4;
pub const BPF_F_RDONLY: _bindgen_ty_5 = 8;
pub const BPF_F_WRONLY: _bindgen_ty_5 = 16;
pub const BPF_F_STACK_BUILD_ID: _bindgen_ty_5 = 32;
pub const BPF_F_ZERO_SEED: _bindgen_ty_5 = 64;
pub const BPF_F_RDONLY_PROG: _bindgen_ty_5 = 128;
pub const BPF_F_WRONLY_PROG: _bindgen_ty_5 = 256;
pub const BPF_F_CLONE: _bindgen_ty_5 = 512;
pub const BPF_F_MMAPABLE: _bindgen_ty_5 = 1024;
pub const BPF_F_PRESERVE_ELEMS: _bindgen_ty_5 = 2048;
pub const BPF_F_INNER_MAP: _bindgen_ty_5 = 4096;
pub const BPF_F_LINK: _bindgen_ty_5 = 8192;
pub const BPF_F_PATH_FD: _bindgen_ty_5 = 16384;
pub const BPF_F_VTYPE_BTF_OBJ_FD: _bindgen_ty_5 = 32768;
pub const BPF_F_TOKEN_FD: _bindgen_ty_5 = 65536;
pub const BPF_F_SEGV_ON_FAULT: _bindgen_ty_5 = 131072;
pub const BPF_F_NO_USER_CONV: _bindgen_ty_5 = 262144;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const bpf_stats_type_BPF_STATS_RUN_TIME: bpf_stats_type = 0;
pub type bpf_stats_type = ::std::os::raw::c_uint;
pub const bpf_stack_build_id_status_BPF_STACK_BUILD_ID_EMPTY: bpf_stack_build_id_status = 0;
pub const bpf_stack_build_id_status_BPF_STACK_BUILD_ID_VALID: bpf_stack_build_id_status = 1;
pub const bpf_stack_build_id_status_BPF_STACK_BUILD_ID_IP: bpf_stack_build_id_status = 2;
pub type bpf_stack_build_id_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_stack_build_id {
    pub status: __s32,
    pub build_id: [::std::os::raw::c_uchar; 20usize],
    pub __bindgen_anon_1: bpf_stack_build_id__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_stack_build_id__bindgen_ty_1 {
    pub offset: __u64,
    pub ip: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_stack_build_id__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_stack_build_id__bindgen_ty_1>() - 8usize];
    ["Alignment of bpf_stack_build_id__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_stack_build_id__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_stack_build_id__bindgen_ty_1::offset"]
        [::std::mem::offset_of!(bpf_stack_build_id__bindgen_ty_1, offset) - 0usize];
    ["Offset of field: bpf_stack_build_id__bindgen_ty_1::ip"]
        [::std::mem::offset_of!(bpf_stack_build_id__bindgen_ty_1, ip) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_stack_build_id"][::std::mem::size_of::<bpf_stack_build_id>() - 32usize];
    ["Alignment of bpf_stack_build_id"][::std::mem::align_of::<bpf_stack_build_id>() - 8usize];
    ["Offset of field: bpf_stack_build_id::status"]
        [::std::mem::offset_of!(bpf_stack_build_id, status) - 0usize];
    ["Offset of field: bpf_stack_build_id::build_id"]
        [::std::mem::offset_of!(bpf_stack_build_id, build_id) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_2,
    pub batch: bpf_attr__bindgen_ty_3,
    pub __bindgen_anon_3: bpf_attr__bindgen_ty_4,
    pub __bindgen_anon_4: bpf_attr__bindgen_ty_5,
    pub __bindgen_anon_5: bpf_attr__bindgen_ty_6,
    pub test: bpf_attr__bindgen_ty_7,
    pub __bindgen_anon_6: bpf_attr__bindgen_ty_8,
    pub info: bpf_attr__bindgen_ty_9,
    pub query: bpf_attr__bindgen_ty_10,
    pub raw_tracepoint: bpf_attr__bindgen_ty_11,
    pub __bindgen_anon_7: bpf_attr__bindgen_ty_12,
    pub task_fd_query: bpf_attr__bindgen_ty_13,
    pub link_create: bpf_attr__bindgen_ty_14,
    pub link_update: bpf_attr__bindgen_ty_15,
    pub link_detach: bpf_attr__bindgen_ty_16,
    pub enable_stats: bpf_attr__bindgen_ty_17,
    pub iter_create: bpf_attr__bindgen_ty_18,
    pub prog_bind_map: bpf_attr__bindgen_ty_19,
    pub token_create: bpf_attr__bindgen_ty_20,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_1 {
    pub map_type: __u32,
    pub key_size: __u32,
    pub value_size: __u32,
    pub max_entries: __u32,
    pub map_flags: __u32,
    pub inner_map_fd: __u32,
    pub numa_node: __u32,
    pub map_name: [::std::os::raw::c_char; 16usize],
    pub map_ifindex: __u32,
    pub btf_fd: __u32,
    pub btf_key_type_id: __u32,
    pub btf_value_type_id: __u32,
    pub btf_vmlinux_value_type_id: __u32,
    pub map_extra: __u64,
    pub value_type_btf_obj_fd: __s32,
    pub map_token_fd: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_1"][::std::mem::size_of::<bpf_attr__bindgen_ty_1>() - 80usize];
    ["Alignment of bpf_attr__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::map_type"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, map_type) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::key_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, key_size) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::value_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, value_size) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::max_entries"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, max_entries) - 12usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::map_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, map_flags) - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::inner_map_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, inner_map_fd) - 20usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::numa_node"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, numa_node) - 24usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::map_name"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, map_name) - 28usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::map_ifindex"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, map_ifindex) - 44usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::btf_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, btf_fd) - 48usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::btf_key_type_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, btf_key_type_id) - 52usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::btf_value_type_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, btf_value_type_id) - 56usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::btf_vmlinux_value_type_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, btf_vmlinux_value_type_id) - 60usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::map_extra"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, map_extra) - 64usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::value_type_btf_obj_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, value_type_btf_obj_fd) - 72usize];
    ["Offset of field: bpf_attr__bindgen_ty_1::map_token_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_1, map_token_fd) - 76usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_2 {
    pub map_fd: __u32,
    pub key: __u64,
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_2__bindgen_ty_1,
    pub flags: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_2__bindgen_ty_1 {
    pub value: __u64,
    pub next_key: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of bpf_attr__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_2__bindgen_ty_1::value"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_2__bindgen_ty_1, value) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_2__bindgen_ty_1::next_key"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_2__bindgen_ty_1, next_key) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_2"][::std::mem::size_of::<bpf_attr__bindgen_ty_2>() - 32usize];
    ["Alignment of bpf_attr__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_2>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_2::map_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_2, map_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_2::key"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_2, key) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_2::flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_2, flags) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_3 {
    pub in_batch: __u64,
    pub out_batch: __u64,
    pub keys: __u64,
    pub values: __u64,
    pub count: __u32,
    pub map_fd: __u32,
    pub elem_flags: __u64,
    pub flags: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_3"][::std::mem::size_of::<bpf_attr__bindgen_ty_3>() - 56usize];
    ["Alignment of bpf_attr__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_3>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_3::in_batch"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_3, in_batch) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_3::out_batch"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_3, out_batch) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_3::keys"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_3, keys) - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_3::values"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_3, values) - 24usize];
    ["Offset of field: bpf_attr__bindgen_ty_3::count"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_3, count) - 32usize];
    ["Offset of field: bpf_attr__bindgen_ty_3::map_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_3, map_fd) - 36usize];
    ["Offset of field: bpf_attr__bindgen_ty_3::elem_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_3, elem_flags) - 40usize];
    ["Offset of field: bpf_attr__bindgen_ty_3::flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_3, flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_4 {
    pub prog_type: __u32,
    pub insn_cnt: __u32,
    pub insns: __u64,
    pub license: __u64,
    pub log_level: __u32,
    pub log_size: __u32,
    pub log_buf: __u64,
    pub kern_version: __u32,
    pub prog_flags: __u32,
    pub prog_name: [::std::os::raw::c_char; 16usize],
    pub prog_ifindex: __u32,
    pub expected_attach_type: __u32,
    pub prog_btf_fd: __u32,
    pub func_info_rec_size: __u32,
    pub func_info: __u64,
    pub func_info_cnt: __u32,
    pub line_info_rec_size: __u32,
    pub line_info: __u64,
    pub line_info_cnt: __u32,
    pub attach_btf_id: __u32,
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_4__bindgen_ty_1,
    pub core_relo_cnt: __u32,
    pub fd_array: __u64,
    pub core_relos: __u64,
    pub core_relo_rec_size: __u32,
    pub log_true_size: __u32,
    pub prog_token_fd: __s32,
    pub fd_array_cnt: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_4__bindgen_ty_1 {
    pub attach_prog_fd: __u32,
    pub attach_btf_obj_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_4__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_4__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_4__bindgen_ty_1::attach_prog_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4__bindgen_ty_1, attach_prog_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_4__bindgen_ty_1::attach_btf_obj_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4__bindgen_ty_1, attach_btf_obj_fd) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_4"][::std::mem::size_of::<bpf_attr__bindgen_ty_4>() - 152usize];
    ["Alignment of bpf_attr__bindgen_ty_4"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_4>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::prog_type"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, prog_type) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::insn_cnt"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, insn_cnt) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::insns"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, insns) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::license"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, license) - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::log_level"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, log_level) - 24usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::log_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, log_size) - 28usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::log_buf"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, log_buf) - 32usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::kern_version"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, kern_version) - 40usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::prog_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, prog_flags) - 44usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::prog_name"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, prog_name) - 48usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::prog_ifindex"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, prog_ifindex) - 64usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::expected_attach_type"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, expected_attach_type) - 68usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::prog_btf_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, prog_btf_fd) - 72usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::func_info_rec_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, func_info_rec_size) - 76usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::func_info"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, func_info) - 80usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::func_info_cnt"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, func_info_cnt) - 88usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::line_info_rec_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, line_info_rec_size) - 92usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::line_info"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, line_info) - 96usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::line_info_cnt"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, line_info_cnt) - 104usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::attach_btf_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, attach_btf_id) - 108usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::core_relo_cnt"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, core_relo_cnt) - 116usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::fd_array"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, fd_array) - 120usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::core_relos"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, core_relos) - 128usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::core_relo_rec_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, core_relo_rec_size) - 136usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::log_true_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, log_true_size) - 140usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::prog_token_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, prog_token_fd) - 144usize];
    ["Offset of field: bpf_attr__bindgen_ty_4::fd_array_cnt"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_4, fd_array_cnt) - 148usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_5 {
    pub pathname: __u64,
    pub bpf_fd: __u32,
    pub file_flags: __u32,
    pub path_fd: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_5"][::std::mem::size_of::<bpf_attr__bindgen_ty_5>() - 24usize];
    ["Alignment of bpf_attr__bindgen_ty_5"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_5>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_5::pathname"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_5, pathname) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_5::bpf_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_5, bpf_fd) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_5::file_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_5, file_flags) - 12usize];
    ["Offset of field: bpf_attr__bindgen_ty_5::path_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_5, path_fd) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_6 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_6__bindgen_ty_1,
    pub attach_bpf_fd: __u32,
    pub attach_type: __u32,
    pub attach_flags: __u32,
    pub replace_bpf_fd: __u32,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_6__bindgen_ty_2,
    pub expected_revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_6__bindgen_ty_1 {
    pub target_fd: __u32,
    pub target_ifindex: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_6__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_6__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_6__bindgen_ty_1::target_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_6__bindgen_ty_1, target_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_6__bindgen_ty_1::target_ifindex"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_6__bindgen_ty_1, target_ifindex) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_6__bindgen_ty_2 {
    pub relative_fd: __u32,
    pub relative_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_6__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_6__bindgen_ty_2>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_6__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_6__bindgen_ty_2>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_6__bindgen_ty_2::relative_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_6__bindgen_ty_2, relative_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_6__bindgen_ty_2::relative_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_6__bindgen_ty_2, relative_id) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_6"][::std::mem::size_of::<bpf_attr__bindgen_ty_6>() - 32usize];
    ["Alignment of bpf_attr__bindgen_ty_6"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_6>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_6::attach_bpf_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_6, attach_bpf_fd) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_6::attach_type"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_6, attach_type) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_6::attach_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_6, attach_flags) - 12usize];
    ["Offset of field: bpf_attr__bindgen_ty_6::replace_bpf_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_6, replace_bpf_fd) - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_6::expected_revision"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_6, expected_revision) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_7 {
    pub prog_fd: __u32,
    pub retval: __u32,
    pub data_size_in: __u32,
    pub data_size_out: __u32,
    pub data_in: __u64,
    pub data_out: __u64,
    pub repeat: __u32,
    pub duration: __u32,
    pub ctx_size_in: __u32,
    pub ctx_size_out: __u32,
    pub ctx_in: __u64,
    pub ctx_out: __u64,
    pub flags: __u32,
    pub cpu: __u32,
    pub batch_size: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_7"][::std::mem::size_of::<bpf_attr__bindgen_ty_7>() - 80usize];
    ["Alignment of bpf_attr__bindgen_ty_7"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_7>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::prog_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, prog_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::retval"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, retval) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::data_size_in"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, data_size_in) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::data_size_out"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, data_size_out) - 12usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::data_in"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, data_in) - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::data_out"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, data_out) - 24usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::repeat"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, repeat) - 32usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::duration"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, duration) - 36usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::ctx_size_in"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, ctx_size_in) - 40usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::ctx_size_out"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, ctx_size_out) - 44usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::ctx_in"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, ctx_in) - 48usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::ctx_out"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, ctx_out) - 56usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, flags) - 64usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::cpu"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, cpu) - 68usize];
    ["Offset of field: bpf_attr__bindgen_ty_7::batch_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_7, batch_size) - 72usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_8 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_8__bindgen_ty_1,
    pub next_id: __u32,
    pub open_flags: __u32,
    pub fd_by_id_token_fd: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_8__bindgen_ty_1 {
    pub start_id: __u32,
    pub prog_id: __u32,
    pub map_id: __u32,
    pub btf_id: __u32,
    pub link_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_8__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_8__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_8__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_8__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_8__bindgen_ty_1::start_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_8__bindgen_ty_1, start_id) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_8__bindgen_ty_1::prog_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_8__bindgen_ty_1, prog_id) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_8__bindgen_ty_1::map_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_8__bindgen_ty_1, map_id) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_8__bindgen_ty_1::btf_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_8__bindgen_ty_1, btf_id) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_8__bindgen_ty_1::link_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_8__bindgen_ty_1, link_id) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_8"][::std::mem::size_of::<bpf_attr__bindgen_ty_8>() - 16usize];
    ["Alignment of bpf_attr__bindgen_ty_8"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_8>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_8::next_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_8, next_id) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_8::open_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_8, open_flags) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_8::fd_by_id_token_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_8, fd_by_id_token_fd) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_9 {
    pub bpf_fd: __u32,
    pub info_len: __u32,
    pub info: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_9"][::std::mem::size_of::<bpf_attr__bindgen_ty_9>() - 16usize];
    ["Alignment of bpf_attr__bindgen_ty_9"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_9>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_9::bpf_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_9, bpf_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_9::info_len"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_9, info_len) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_9::info"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_9, info) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_10 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_10__bindgen_ty_1,
    pub attach_type: __u32,
    pub query_flags: __u32,
    pub attach_flags: __u32,
    pub prog_ids: __u64,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_10__bindgen_ty_2,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub prog_attach_flags: __u64,
    pub link_ids: __u64,
    pub link_attach_flags: __u64,
    pub revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_10__bindgen_ty_1 {
    pub target_fd: __u32,
    pub target_ifindex: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_10__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_10__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_10__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_10__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_10__bindgen_ty_1::target_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10__bindgen_ty_1, target_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_10__bindgen_ty_1::target_ifindex"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10__bindgen_ty_1, target_ifindex) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_10__bindgen_ty_2 {
    pub prog_cnt: __u32,
    pub count: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_10__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_10__bindgen_ty_2>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_10__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_10__bindgen_ty_2>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_10__bindgen_ty_2::prog_cnt"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10__bindgen_ty_2, prog_cnt) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_10__bindgen_ty_2::count"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10__bindgen_ty_2, count) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_10"][::std::mem::size_of::<bpf_attr__bindgen_ty_10>() - 64usize];
    ["Alignment of bpf_attr__bindgen_ty_10"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_10>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_10::attach_type"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10, attach_type) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_10::query_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10, query_flags) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_10::attach_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10, attach_flags) - 12usize];
    ["Offset of field: bpf_attr__bindgen_ty_10::prog_ids"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10, prog_ids) - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_10::prog_attach_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10, prog_attach_flags) - 32usize];
    ["Offset of field: bpf_attr__bindgen_ty_10::link_ids"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10, link_ids) - 40usize];
    ["Offset of field: bpf_attr__bindgen_ty_10::link_attach_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10, link_attach_flags) - 48usize];
    ["Offset of field: bpf_attr__bindgen_ty_10::revision"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_10, revision) - 56usize];
};
impl bpf_attr__bindgen_ty_10 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_11 {
    pub name: __u64,
    pub prog_fd: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_11"][::std::mem::size_of::<bpf_attr__bindgen_ty_11>() - 24usize];
    ["Alignment of bpf_attr__bindgen_ty_11"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_11>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_11::name"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_11, name) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_11::prog_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_11, prog_fd) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_11::cookie"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_11, cookie) - 16usize];
};
impl bpf_attr__bindgen_ty_11 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_12 {
    pub btf: __u64,
    pub btf_log_buf: __u64,
    pub btf_size: __u32,
    pub btf_log_size: __u32,
    pub btf_log_level: __u32,
    pub btf_log_true_size: __u32,
    pub btf_flags: __u32,
    pub btf_token_fd: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_12"][::std::mem::size_of::<bpf_attr__bindgen_ty_12>() - 40usize];
    ["Alignment of bpf_attr__bindgen_ty_12"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_12>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_12::btf"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_12, btf) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_12::btf_log_buf"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_12, btf_log_buf) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_12::btf_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_12, btf_size) - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_12::btf_log_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_12, btf_log_size) - 20usize];
    ["Offset of field: bpf_attr__bindgen_ty_12::btf_log_level"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_12, btf_log_level) - 24usize];
    ["Offset of field: bpf_attr__bindgen_ty_12::btf_log_true_size"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_12, btf_log_true_size) - 28usize];
    ["Offset of field: bpf_attr__bindgen_ty_12::btf_flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_12, btf_flags) - 32usize];
    ["Offset of field: bpf_attr__bindgen_ty_12::btf_token_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_12, btf_token_fd) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_13 {
    pub pid: __u32,
    pub fd: __u32,
    pub flags: __u32,
    pub buf_len: __u32,
    pub buf: __u64,
    pub prog_id: __u32,
    pub fd_type: __u32,
    pub probe_offset: __u64,
    pub probe_addr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_13"][::std::mem::size_of::<bpf_attr__bindgen_ty_13>() - 48usize];
    ["Alignment of bpf_attr__bindgen_ty_13"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_13>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_13::pid"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_13, pid) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_13::fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_13, fd) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_13::flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_13, flags) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_13::buf_len"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_13, buf_len) - 12usize];
    ["Offset of field: bpf_attr__bindgen_ty_13::buf"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_13, buf) - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_13::prog_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_13, prog_id) - 24usize];
    ["Offset of field: bpf_attr__bindgen_ty_13::fd_type"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_13, fd_type) - 28usize];
    ["Offset of field: bpf_attr__bindgen_ty_13::probe_offset"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_13, probe_offset) - 32usize];
    ["Offset of field: bpf_attr__bindgen_ty_13::probe_addr"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_13, probe_addr) - 40usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_14__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_14__bindgen_ty_2,
    pub attach_type: __u32,
    pub flags: __u32,
    pub __bindgen_anon_3: bpf_attr__bindgen_ty_14__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_1 {
    pub prog_fd: __u32,
    pub map_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_1::prog_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_1, prog_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_1::map_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_1, map_fd) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_2 {
    pub target_fd: __u32,
    pub target_ifindex: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_2>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_2>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_2::target_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_2, target_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_2::target_ifindex"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_2, target_ifindex) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_3 {
    pub target_btf_id: __u32,
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1,
    pub perf_event: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2,
    pub kprobe_multi: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3,
    pub tracing: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4,
    pub netfilter: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5,
    pub tcx: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6,
    pub uprobe_multi: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7,
    pub netkit: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1 {
    pub iter_info: __u64,
    pub iter_info_len: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1>() - 16usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1::iter_info"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1,
        iter_info
    ) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1::iter_info_len"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_1,
        iter_info_len
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2 {
    pub bpf_cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2>() - 8usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2::bpf_cookie"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_2,
        bpf_cookie
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3 {
    pub flags: __u32,
    pub cnt: __u32,
    pub syms: __u64,
    pub addrs: __u64,
    pub cookies: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3>() - 32usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3::flags"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3,
        flags
    ) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3::cnt"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3, cnt) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3::syms"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3,
        syms
    ) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3::addrs"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3,
        addrs
    ) - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3::cookies"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_3,
        cookies
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4 {
    pub target_btf_id: __u32,
    pub cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4>() - 16usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4::target_btf_id"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4,
        target_btf_id
    )
        - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4::cookie"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_4,
        cookie
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5 {
    pub pf: __u32,
    pub hooknum: __u32,
    pub priority: __s32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5>() - 16usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5::pf"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5, pf) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5::hooknum"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5,
        hooknum
    ) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5::priority"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5,
        priority
    ) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5::flags"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_5,
        flags
    ) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1,
    pub expected_revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1 {
    pub relative_fd: __u32,
    pub relative_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1>(
        ) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1::relative_fd"] [:: std :: mem :: offset_of ! (bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1 , relative_fd) - 0usize] ;
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1::relative_id"] [:: std :: mem :: offset_of ! (bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6__bindgen_ty_1 , relative_id) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6>() - 16usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6::expected_revision"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_6,
        expected_revision
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7 {
    pub path: __u64,
    pub offsets: __u64,
    pub ref_ctr_offsets: __u64,
    pub cookies: __u64,
    pub cnt: __u32,
    pub flags: __u32,
    pub pid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7>() - 48usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7::path"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7,
        path
    ) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7::offsets"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7,
        offsets
    ) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7::ref_ctr_offsets"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7,
        ref_ctr_offsets
    )
        - 16usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7::cookies"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7,
        cookies
    ) - 24usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7::cnt"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7,
        cnt
    ) - 32usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7::flags"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7,
        flags
    ) - 36usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7::pid"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_7,
        pid
    ) - 40usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8 {
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1,
    pub expected_revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1 {
    pub relative_fd: __u32,
    pub relative_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1>(
        ) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1::relative_fd"] [:: std :: mem :: offset_of ! (bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1 , relative_fd) - 0usize] ;
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1::relative_id"] [:: std :: mem :: offset_of ! (bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8__bindgen_ty_1 , relative_id) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8>() - 16usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8::expected_revision"][::std::mem::offset_of!(
        bpf_attr__bindgen_ty_14__bindgen_ty_3__bindgen_ty_8,
        expected_revision
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14__bindgen_ty_3"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3>() - 48usize];
    ["Alignment of bpf_attr__bindgen_ty_14__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14__bindgen_ty_3>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3::target_btf_id"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3, target_btf_id) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3::perf_event"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3, perf_event) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3::kprobe_multi"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3, kprobe_multi) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3::tracing"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3, tracing) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3::netfilter"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3, netfilter) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3::tcx"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3, tcx) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3::uprobe_multi"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3, uprobe_multi) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_14__bindgen_ty_3::netkit"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14__bindgen_ty_3, netkit) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_14"][::std::mem::size_of::<bpf_attr__bindgen_ty_14>() - 64usize];
    ["Alignment of bpf_attr__bindgen_ty_14"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_14>() - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14::attach_type"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14, attach_type) - 8usize];
    ["Offset of field: bpf_attr__bindgen_ty_14::flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_14, flags) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_attr__bindgen_ty_15 {
    pub link_fd: __u32,
    pub __bindgen_anon_1: bpf_attr__bindgen_ty_15__bindgen_ty_1,
    pub flags: __u32,
    pub __bindgen_anon_2: bpf_attr__bindgen_ty_15__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_15__bindgen_ty_1 {
    pub new_prog_fd: __u32,
    pub new_map_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_15__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_15__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_15__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_15__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_15__bindgen_ty_1::new_prog_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_15__bindgen_ty_1, new_prog_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_15__bindgen_ty_1::new_map_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_15__bindgen_ty_1, new_map_fd) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_attr__bindgen_ty_15__bindgen_ty_2 {
    pub old_prog_fd: __u32,
    pub old_map_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_15__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_attr__bindgen_ty_15__bindgen_ty_2>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_15__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_15__bindgen_ty_2>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_15__bindgen_ty_2::old_prog_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_15__bindgen_ty_2, old_prog_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_15__bindgen_ty_2::old_map_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_15__bindgen_ty_2, old_map_fd) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_15"][::std::mem::size_of::<bpf_attr__bindgen_ty_15>() - 16usize];
    ["Alignment of bpf_attr__bindgen_ty_15"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_15>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_15::link_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_15, link_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_15::flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_15, flags) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_16 {
    pub link_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_16"][::std::mem::size_of::<bpf_attr__bindgen_ty_16>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_16"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_16>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_16::link_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_16, link_fd) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_17 {
    pub type_: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_17"][::std::mem::size_of::<bpf_attr__bindgen_ty_17>() - 4usize];
    ["Alignment of bpf_attr__bindgen_ty_17"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_17>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_17::type_"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_17, type_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_18 {
    pub link_fd: __u32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_18"][::std::mem::size_of::<bpf_attr__bindgen_ty_18>() - 8usize];
    ["Alignment of bpf_attr__bindgen_ty_18"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_18>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_18::link_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_18, link_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_18::flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_18, flags) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_19 {
    pub prog_fd: __u32,
    pub map_fd: __u32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_19"][::std::mem::size_of::<bpf_attr__bindgen_ty_19>() - 12usize];
    ["Alignment of bpf_attr__bindgen_ty_19"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_19>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_19::prog_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_19, prog_fd) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_19::map_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_19, map_fd) - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_19::flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_19, flags) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_attr__bindgen_ty_20 {
    pub flags: __u32,
    pub bpffs_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr__bindgen_ty_20"][::std::mem::size_of::<bpf_attr__bindgen_ty_20>() - 8usize];
    ["Alignment of bpf_attr__bindgen_ty_20"]
        [::std::mem::align_of::<bpf_attr__bindgen_ty_20>() - 4usize];
    ["Offset of field: bpf_attr__bindgen_ty_20::flags"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_20, flags) - 0usize];
    ["Offset of field: bpf_attr__bindgen_ty_20::bpffs_fd"]
        [::std::mem::offset_of!(bpf_attr__bindgen_ty_20, bpffs_fd) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_attr"][::std::mem::size_of::<bpf_attr>() - 152usize];
    ["Alignment of bpf_attr"][::std::mem::align_of::<bpf_attr>() - 8usize];
    ["Offset of field: bpf_attr::batch"][::std::mem::offset_of!(bpf_attr, batch) - 0usize];
    ["Offset of field: bpf_attr::test"][::std::mem::offset_of!(bpf_attr, test) - 0usize];
    ["Offset of field: bpf_attr::info"][::std::mem::offset_of!(bpf_attr, info) - 0usize];
    ["Offset of field: bpf_attr::query"][::std::mem::offset_of!(bpf_attr, query) - 0usize];
    ["Offset of field: bpf_attr::raw_tracepoint"]
        [::std::mem::offset_of!(bpf_attr, raw_tracepoint) - 0usize];
    ["Offset of field: bpf_attr::task_fd_query"]
        [::std::mem::offset_of!(bpf_attr, task_fd_query) - 0usize];
    ["Offset of field: bpf_attr::link_create"]
        [::std::mem::offset_of!(bpf_attr, link_create) - 0usize];
    ["Offset of field: bpf_attr::link_update"]
        [::std::mem::offset_of!(bpf_attr, link_update) - 0usize];
    ["Offset of field: bpf_attr::link_detach"]
        [::std::mem::offset_of!(bpf_attr, link_detach) - 0usize];
    ["Offset of field: bpf_attr::enable_stats"]
        [::std::mem::offset_of!(bpf_attr, enable_stats) - 0usize];
    ["Offset of field: bpf_attr::iter_create"]
        [::std::mem::offset_of!(bpf_attr, iter_create) - 0usize];
    ["Offset of field: bpf_attr::prog_bind_map"]
        [::std::mem::offset_of!(bpf_attr, prog_bind_map) - 0usize];
    ["Offset of field: bpf_attr::token_create"]
        [::std::mem::offset_of!(bpf_attr, token_create) - 0usize];
};
pub const bpf_func_id_BPF_FUNC_unspec: bpf_func_id = 0;
pub const bpf_func_id_BPF_FUNC_map_lookup_elem: bpf_func_id = 1;
pub const bpf_func_id_BPF_FUNC_map_update_elem: bpf_func_id = 2;
pub const bpf_func_id_BPF_FUNC_map_delete_elem: bpf_func_id = 3;
pub const bpf_func_id_BPF_FUNC_probe_read: bpf_func_id = 4;
pub const bpf_func_id_BPF_FUNC_ktime_get_ns: bpf_func_id = 5;
pub const bpf_func_id_BPF_FUNC_trace_printk: bpf_func_id = 6;
pub const bpf_func_id_BPF_FUNC_get_prandom_u32: bpf_func_id = 7;
pub const bpf_func_id_BPF_FUNC_get_smp_processor_id: bpf_func_id = 8;
pub const bpf_func_id_BPF_FUNC_skb_store_bytes: bpf_func_id = 9;
pub const bpf_func_id_BPF_FUNC_l3_csum_replace: bpf_func_id = 10;
pub const bpf_func_id_BPF_FUNC_l4_csum_replace: bpf_func_id = 11;
pub const bpf_func_id_BPF_FUNC_tail_call: bpf_func_id = 12;
pub const bpf_func_id_BPF_FUNC_clone_redirect: bpf_func_id = 13;
pub const bpf_func_id_BPF_FUNC_get_current_pid_tgid: bpf_func_id = 14;
pub const bpf_func_id_BPF_FUNC_get_current_uid_gid: bpf_func_id = 15;
pub const bpf_func_id_BPF_FUNC_get_current_comm: bpf_func_id = 16;
pub const bpf_func_id_BPF_FUNC_get_cgroup_classid: bpf_func_id = 17;
pub const bpf_func_id_BPF_FUNC_skb_vlan_push: bpf_func_id = 18;
pub const bpf_func_id_BPF_FUNC_skb_vlan_pop: bpf_func_id = 19;
pub const bpf_func_id_BPF_FUNC_skb_get_tunnel_key: bpf_func_id = 20;
pub const bpf_func_id_BPF_FUNC_skb_set_tunnel_key: bpf_func_id = 21;
pub const bpf_func_id_BPF_FUNC_perf_event_read: bpf_func_id = 22;
pub const bpf_func_id_BPF_FUNC_redirect: bpf_func_id = 23;
pub const bpf_func_id_BPF_FUNC_get_route_realm: bpf_func_id = 24;
pub const bpf_func_id_BPF_FUNC_perf_event_output: bpf_func_id = 25;
pub const bpf_func_id_BPF_FUNC_skb_load_bytes: bpf_func_id = 26;
pub const bpf_func_id_BPF_FUNC_get_stackid: bpf_func_id = 27;
pub const bpf_func_id_BPF_FUNC_csum_diff: bpf_func_id = 28;
pub const bpf_func_id_BPF_FUNC_skb_get_tunnel_opt: bpf_func_id = 29;
pub const bpf_func_id_BPF_FUNC_skb_set_tunnel_opt: bpf_func_id = 30;
pub const bpf_func_id_BPF_FUNC_skb_change_proto: bpf_func_id = 31;
pub const bpf_func_id_BPF_FUNC_skb_change_type: bpf_func_id = 32;
pub const bpf_func_id_BPF_FUNC_skb_under_cgroup: bpf_func_id = 33;
pub const bpf_func_id_BPF_FUNC_get_hash_recalc: bpf_func_id = 34;
pub const bpf_func_id_BPF_FUNC_get_current_task: bpf_func_id = 35;
pub const bpf_func_id_BPF_FUNC_probe_write_user: bpf_func_id = 36;
pub const bpf_func_id_BPF_FUNC_current_task_under_cgroup: bpf_func_id = 37;
pub const bpf_func_id_BPF_FUNC_skb_change_tail: bpf_func_id = 38;
pub const bpf_func_id_BPF_FUNC_skb_pull_data: bpf_func_id = 39;
pub const bpf_func_id_BPF_FUNC_csum_update: bpf_func_id = 40;
pub const bpf_func_id_BPF_FUNC_set_hash_invalid: bpf_func_id = 41;
pub const bpf_func_id_BPF_FUNC_get_numa_node_id: bpf_func_id = 42;
pub const bpf_func_id_BPF_FUNC_skb_change_head: bpf_func_id = 43;
pub const bpf_func_id_BPF_FUNC_xdp_adjust_head: bpf_func_id = 44;
pub const bpf_func_id_BPF_FUNC_probe_read_str: bpf_func_id = 45;
pub const bpf_func_id_BPF_FUNC_get_socket_cookie: bpf_func_id = 46;
pub const bpf_func_id_BPF_FUNC_get_socket_uid: bpf_func_id = 47;
pub const bpf_func_id_BPF_FUNC_set_hash: bpf_func_id = 48;
pub const bpf_func_id_BPF_FUNC_setsockopt: bpf_func_id = 49;
pub const bpf_func_id_BPF_FUNC_skb_adjust_room: bpf_func_id = 50;
pub const bpf_func_id_BPF_FUNC_redirect_map: bpf_func_id = 51;
pub const bpf_func_id_BPF_FUNC_sk_redirect_map: bpf_func_id = 52;
pub const bpf_func_id_BPF_FUNC_sock_map_update: bpf_func_id = 53;
pub const bpf_func_id_BPF_FUNC_xdp_adjust_meta: bpf_func_id = 54;
pub const bpf_func_id_BPF_FUNC_perf_event_read_value: bpf_func_id = 55;
pub const bpf_func_id_BPF_FUNC_perf_prog_read_value: bpf_func_id = 56;
pub const bpf_func_id_BPF_FUNC_getsockopt: bpf_func_id = 57;
pub const bpf_func_id_BPF_FUNC_override_return: bpf_func_id = 58;
pub const bpf_func_id_BPF_FUNC_sock_ops_cb_flags_set: bpf_func_id = 59;
pub const bpf_func_id_BPF_FUNC_msg_redirect_map: bpf_func_id = 60;
pub const bpf_func_id_BPF_FUNC_msg_apply_bytes: bpf_func_id = 61;
pub const bpf_func_id_BPF_FUNC_msg_cork_bytes: bpf_func_id = 62;
pub const bpf_func_id_BPF_FUNC_msg_pull_data: bpf_func_id = 63;
pub const bpf_func_id_BPF_FUNC_bind: bpf_func_id = 64;
pub const bpf_func_id_BPF_FUNC_xdp_adjust_tail: bpf_func_id = 65;
pub const bpf_func_id_BPF_FUNC_skb_get_xfrm_state: bpf_func_id = 66;
pub const bpf_func_id_BPF_FUNC_get_stack: bpf_func_id = 67;
pub const bpf_func_id_BPF_FUNC_skb_load_bytes_relative: bpf_func_id = 68;
pub const bpf_func_id_BPF_FUNC_fib_lookup: bpf_func_id = 69;
pub const bpf_func_id_BPF_FUNC_sock_hash_update: bpf_func_id = 70;
pub const bpf_func_id_BPF_FUNC_msg_redirect_hash: bpf_func_id = 71;
pub const bpf_func_id_BPF_FUNC_sk_redirect_hash: bpf_func_id = 72;
pub const bpf_func_id_BPF_FUNC_lwt_push_encap: bpf_func_id = 73;
pub const bpf_func_id_BPF_FUNC_lwt_seg6_store_bytes: bpf_func_id = 74;
pub const bpf_func_id_BPF_FUNC_lwt_seg6_adjust_srh: bpf_func_id = 75;
pub const bpf_func_id_BPF_FUNC_lwt_seg6_action: bpf_func_id = 76;
pub const bpf_func_id_BPF_FUNC_rc_repeat: bpf_func_id = 77;
pub const bpf_func_id_BPF_FUNC_rc_keydown: bpf_func_id = 78;
pub const bpf_func_id_BPF_FUNC_skb_cgroup_id: bpf_func_id = 79;
pub const bpf_func_id_BPF_FUNC_get_current_cgroup_id: bpf_func_id = 80;
pub const bpf_func_id_BPF_FUNC_get_local_storage: bpf_func_id = 81;
pub const bpf_func_id_BPF_FUNC_sk_select_reuseport: bpf_func_id = 82;
pub const bpf_func_id_BPF_FUNC_skb_ancestor_cgroup_id: bpf_func_id = 83;
pub const bpf_func_id_BPF_FUNC_sk_lookup_tcp: bpf_func_id = 84;
pub const bpf_func_id_BPF_FUNC_sk_lookup_udp: bpf_func_id = 85;
pub const bpf_func_id_BPF_FUNC_sk_release: bpf_func_id = 86;
pub const bpf_func_id_BPF_FUNC_map_push_elem: bpf_func_id = 87;
pub const bpf_func_id_BPF_FUNC_map_pop_elem: bpf_func_id = 88;
pub const bpf_func_id_BPF_FUNC_map_peek_elem: bpf_func_id = 89;
pub const bpf_func_id_BPF_FUNC_msg_push_data: bpf_func_id = 90;
pub const bpf_func_id_BPF_FUNC_msg_pop_data: bpf_func_id = 91;
pub const bpf_func_id_BPF_FUNC_rc_pointer_rel: bpf_func_id = 92;
pub const bpf_func_id_BPF_FUNC_spin_lock: bpf_func_id = 93;
pub const bpf_func_id_BPF_FUNC_spin_unlock: bpf_func_id = 94;
pub const bpf_func_id_BPF_FUNC_sk_fullsock: bpf_func_id = 95;
pub const bpf_func_id_BPF_FUNC_tcp_sock: bpf_func_id = 96;
pub const bpf_func_id_BPF_FUNC_skb_ecn_set_ce: bpf_func_id = 97;
pub const bpf_func_id_BPF_FUNC_get_listener_sock: bpf_func_id = 98;
pub const bpf_func_id_BPF_FUNC_skc_lookup_tcp: bpf_func_id = 99;
pub const bpf_func_id_BPF_FUNC_tcp_check_syncookie: bpf_func_id = 100;
pub const bpf_func_id_BPF_FUNC_sysctl_get_name: bpf_func_id = 101;
pub const bpf_func_id_BPF_FUNC_sysctl_get_current_value: bpf_func_id = 102;
pub const bpf_func_id_BPF_FUNC_sysctl_get_new_value: bpf_func_id = 103;
pub const bpf_func_id_BPF_FUNC_sysctl_set_new_value: bpf_func_id = 104;
pub const bpf_func_id_BPF_FUNC_strtol: bpf_func_id = 105;
pub const bpf_func_id_BPF_FUNC_strtoul: bpf_func_id = 106;
pub const bpf_func_id_BPF_FUNC_sk_storage_get: bpf_func_id = 107;
pub const bpf_func_id_BPF_FUNC_sk_storage_delete: bpf_func_id = 108;
pub const bpf_func_id_BPF_FUNC_send_signal: bpf_func_id = 109;
pub const bpf_func_id_BPF_FUNC_tcp_gen_syncookie: bpf_func_id = 110;
pub const bpf_func_id_BPF_FUNC_skb_output: bpf_func_id = 111;
pub const bpf_func_id_BPF_FUNC_probe_read_user: bpf_func_id = 112;
pub const bpf_func_id_BPF_FUNC_probe_read_kernel: bpf_func_id = 113;
pub const bpf_func_id_BPF_FUNC_probe_read_user_str: bpf_func_id = 114;
pub const bpf_func_id_BPF_FUNC_probe_read_kernel_str: bpf_func_id = 115;
pub const bpf_func_id_BPF_FUNC_tcp_send_ack: bpf_func_id = 116;
pub const bpf_func_id_BPF_FUNC_send_signal_thread: bpf_func_id = 117;
pub const bpf_func_id_BPF_FUNC_jiffies64: bpf_func_id = 118;
pub const bpf_func_id_BPF_FUNC_read_branch_records: bpf_func_id = 119;
pub const bpf_func_id_BPF_FUNC_get_ns_current_pid_tgid: bpf_func_id = 120;
pub const bpf_func_id_BPF_FUNC_xdp_output: bpf_func_id = 121;
pub const bpf_func_id_BPF_FUNC_get_netns_cookie: bpf_func_id = 122;
pub const bpf_func_id_BPF_FUNC_get_current_ancestor_cgroup_id: bpf_func_id = 123;
pub const bpf_func_id_BPF_FUNC_sk_assign: bpf_func_id = 124;
pub const bpf_func_id_BPF_FUNC_ktime_get_boot_ns: bpf_func_id = 125;
pub const bpf_func_id_BPF_FUNC_seq_printf: bpf_func_id = 126;
pub const bpf_func_id_BPF_FUNC_seq_write: bpf_func_id = 127;
pub const bpf_func_id_BPF_FUNC_sk_cgroup_id: bpf_func_id = 128;
pub const bpf_func_id_BPF_FUNC_sk_ancestor_cgroup_id: bpf_func_id = 129;
pub const bpf_func_id_BPF_FUNC_ringbuf_output: bpf_func_id = 130;
pub const bpf_func_id_BPF_FUNC_ringbuf_reserve: bpf_func_id = 131;
pub const bpf_func_id_BPF_FUNC_ringbuf_submit: bpf_func_id = 132;
pub const bpf_func_id_BPF_FUNC_ringbuf_discard: bpf_func_id = 133;
pub const bpf_func_id_BPF_FUNC_ringbuf_query: bpf_func_id = 134;
pub const bpf_func_id_BPF_FUNC_csum_level: bpf_func_id = 135;
pub const bpf_func_id_BPF_FUNC_skc_to_tcp6_sock: bpf_func_id = 136;
pub const bpf_func_id_BPF_FUNC_skc_to_tcp_sock: bpf_func_id = 137;
pub const bpf_func_id_BPF_FUNC_skc_to_tcp_timewait_sock: bpf_func_id = 138;
pub const bpf_func_id_BPF_FUNC_skc_to_tcp_request_sock: bpf_func_id = 139;
pub const bpf_func_id_BPF_FUNC_skc_to_udp6_sock: bpf_func_id = 140;
pub const bpf_func_id_BPF_FUNC_get_task_stack: bpf_func_id = 141;
pub const bpf_func_id_BPF_FUNC_load_hdr_opt: bpf_func_id = 142;
pub const bpf_func_id_BPF_FUNC_store_hdr_opt: bpf_func_id = 143;
pub const bpf_func_id_BPF_FUNC_reserve_hdr_opt: bpf_func_id = 144;
pub const bpf_func_id_BPF_FUNC_inode_storage_get: bpf_func_id = 145;
pub const bpf_func_id_BPF_FUNC_inode_storage_delete: bpf_func_id = 146;
pub const bpf_func_id_BPF_FUNC_d_path: bpf_func_id = 147;
pub const bpf_func_id_BPF_FUNC_copy_from_user: bpf_func_id = 148;
pub const bpf_func_id_BPF_FUNC_snprintf_btf: bpf_func_id = 149;
pub const bpf_func_id_BPF_FUNC_seq_printf_btf: bpf_func_id = 150;
pub const bpf_func_id_BPF_FUNC_skb_cgroup_classid: bpf_func_id = 151;
pub const bpf_func_id_BPF_FUNC_redirect_neigh: bpf_func_id = 152;
pub const bpf_func_id_BPF_FUNC_per_cpu_ptr: bpf_func_id = 153;
pub const bpf_func_id_BPF_FUNC_this_cpu_ptr: bpf_func_id = 154;
pub const bpf_func_id_BPF_FUNC_redirect_peer: bpf_func_id = 155;
pub const bpf_func_id_BPF_FUNC_task_storage_get: bpf_func_id = 156;
pub const bpf_func_id_BPF_FUNC_task_storage_delete: bpf_func_id = 157;
pub const bpf_func_id_BPF_FUNC_get_current_task_btf: bpf_func_id = 158;
pub const bpf_func_id_BPF_FUNC_bprm_opts_set: bpf_func_id = 159;
pub const bpf_func_id_BPF_FUNC_ktime_get_coarse_ns: bpf_func_id = 160;
pub const bpf_func_id_BPF_FUNC_ima_inode_hash: bpf_func_id = 161;
pub const bpf_func_id_BPF_FUNC_sock_from_file: bpf_func_id = 162;
pub const bpf_func_id_BPF_FUNC_check_mtu: bpf_func_id = 163;
pub const bpf_func_id_BPF_FUNC_for_each_map_elem: bpf_func_id = 164;
pub const bpf_func_id_BPF_FUNC_snprintf: bpf_func_id = 165;
pub const bpf_func_id_BPF_FUNC_sys_bpf: bpf_func_id = 166;
pub const bpf_func_id_BPF_FUNC_btf_find_by_name_kind: bpf_func_id = 167;
pub const bpf_func_id_BPF_FUNC_sys_close: bpf_func_id = 168;
pub const bpf_func_id_BPF_FUNC_timer_init: bpf_func_id = 169;
pub const bpf_func_id_BPF_FUNC_timer_set_callback: bpf_func_id = 170;
pub const bpf_func_id_BPF_FUNC_timer_start: bpf_func_id = 171;
pub const bpf_func_id_BPF_FUNC_timer_cancel: bpf_func_id = 172;
pub const bpf_func_id_BPF_FUNC_get_func_ip: bpf_func_id = 173;
pub const bpf_func_id_BPF_FUNC_get_attach_cookie: bpf_func_id = 174;
pub const bpf_func_id_BPF_FUNC_task_pt_regs: bpf_func_id = 175;
pub const bpf_func_id_BPF_FUNC_get_branch_snapshot: bpf_func_id = 176;
pub const bpf_func_id_BPF_FUNC_trace_vprintk: bpf_func_id = 177;
pub const bpf_func_id_BPF_FUNC_skc_to_unix_sock: bpf_func_id = 178;
pub const bpf_func_id_BPF_FUNC_kallsyms_lookup_name: bpf_func_id = 179;
pub const bpf_func_id_BPF_FUNC_find_vma: bpf_func_id = 180;
pub const bpf_func_id_BPF_FUNC_loop: bpf_func_id = 181;
pub const bpf_func_id_BPF_FUNC_strncmp: bpf_func_id = 182;
pub const bpf_func_id_BPF_FUNC_get_func_arg: bpf_func_id = 183;
pub const bpf_func_id_BPF_FUNC_get_func_ret: bpf_func_id = 184;
pub const bpf_func_id_BPF_FUNC_get_func_arg_cnt: bpf_func_id = 185;
pub const bpf_func_id_BPF_FUNC_get_retval: bpf_func_id = 186;
pub const bpf_func_id_BPF_FUNC_set_retval: bpf_func_id = 187;
pub const bpf_func_id_BPF_FUNC_xdp_get_buff_len: bpf_func_id = 188;
pub const bpf_func_id_BPF_FUNC_xdp_load_bytes: bpf_func_id = 189;
pub const bpf_func_id_BPF_FUNC_xdp_store_bytes: bpf_func_id = 190;
pub const bpf_func_id_BPF_FUNC_copy_from_user_task: bpf_func_id = 191;
pub const bpf_func_id_BPF_FUNC_skb_set_tstamp: bpf_func_id = 192;
pub const bpf_func_id_BPF_FUNC_ima_file_hash: bpf_func_id = 193;
pub const bpf_func_id_BPF_FUNC_kptr_xchg: bpf_func_id = 194;
pub const bpf_func_id_BPF_FUNC_map_lookup_percpu_elem: bpf_func_id = 195;
pub const bpf_func_id_BPF_FUNC_skc_to_mptcp_sock: bpf_func_id = 196;
pub const bpf_func_id_BPF_FUNC_dynptr_from_mem: bpf_func_id = 197;
pub const bpf_func_id_BPF_FUNC_ringbuf_reserve_dynptr: bpf_func_id = 198;
pub const bpf_func_id_BPF_FUNC_ringbuf_submit_dynptr: bpf_func_id = 199;
pub const bpf_func_id_BPF_FUNC_ringbuf_discard_dynptr: bpf_func_id = 200;
pub const bpf_func_id_BPF_FUNC_dynptr_read: bpf_func_id = 201;
pub const bpf_func_id_BPF_FUNC_dynptr_write: bpf_func_id = 202;
pub const bpf_func_id_BPF_FUNC_dynptr_data: bpf_func_id = 203;
pub const bpf_func_id_BPF_FUNC_tcp_raw_gen_syncookie_ipv4: bpf_func_id = 204;
pub const bpf_func_id_BPF_FUNC_tcp_raw_gen_syncookie_ipv6: bpf_func_id = 205;
pub const bpf_func_id_BPF_FUNC_tcp_raw_check_syncookie_ipv4: bpf_func_id = 206;
pub const bpf_func_id_BPF_FUNC_tcp_raw_check_syncookie_ipv6: bpf_func_id = 207;
pub const bpf_func_id_BPF_FUNC_ktime_get_tai_ns: bpf_func_id = 208;
pub const bpf_func_id_BPF_FUNC_user_ringbuf_drain: bpf_func_id = 209;
pub const bpf_func_id_BPF_FUNC_cgrp_storage_get: bpf_func_id = 210;
pub const bpf_func_id_BPF_FUNC_cgrp_storage_delete: bpf_func_id = 211;
pub const bpf_func_id___BPF_FUNC_MAX_ID: bpf_func_id = 212;
pub type bpf_func_id = ::std::os::raw::c_uint;
pub const BPF_F_RECOMPUTE_CSUM: _bindgen_ty_6 = 1;
pub const BPF_F_INVALIDATE_HASH: _bindgen_ty_6 = 2;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const BPF_F_HDR_FIELD_MASK: _bindgen_ty_7 = 15;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const BPF_F_PSEUDO_HDR: _bindgen_ty_8 = 16;
pub const BPF_F_MARK_MANGLED_0: _bindgen_ty_8 = 32;
pub const BPF_F_MARK_ENFORCE: _bindgen_ty_8 = 64;
pub const BPF_F_IPV6: _bindgen_ty_8 = 128;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const BPF_F_TUNINFO_IPV6: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const BPF_F_SKIP_FIELD_MASK: _bindgen_ty_10 = 255;
pub const BPF_F_USER_STACK: _bindgen_ty_10 = 256;
pub const BPF_F_FAST_STACK_CMP: _bindgen_ty_10 = 512;
pub const BPF_F_REUSE_STACKID: _bindgen_ty_10 = 1024;
pub const BPF_F_USER_BUILD_ID: _bindgen_ty_10 = 2048;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const BPF_F_ZERO_CSUM_TX: _bindgen_ty_11 = 2;
pub const BPF_F_DONT_FRAGMENT: _bindgen_ty_11 = 4;
pub const BPF_F_SEQ_NUMBER: _bindgen_ty_11 = 8;
pub const BPF_F_NO_TUNNEL_KEY: _bindgen_ty_11 = 16;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const BPF_F_TUNINFO_FLAGS: _bindgen_ty_12 = 16;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const BPF_F_INDEX_MASK: _bindgen_ty_13 = 4294967295;
pub const BPF_F_CURRENT_CPU: _bindgen_ty_13 = 4294967295;
pub const BPF_F_CTXLEN_MASK: _bindgen_ty_13 = 4503595332403200;
pub type _bindgen_ty_13 = ::std::os::raw::c_ulong;
pub const BPF_F_CURRENT_NETNS: _bindgen_ty_14 = -1;
pub type _bindgen_ty_14 = ::std::os::raw::c_int;
pub const BPF_CSUM_LEVEL_QUERY: _bindgen_ty_15 = 0;
pub const BPF_CSUM_LEVEL_INC: _bindgen_ty_15 = 1;
pub const BPF_CSUM_LEVEL_DEC: _bindgen_ty_15 = 2;
pub const BPF_CSUM_LEVEL_RESET: _bindgen_ty_15 = 3;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const BPF_F_ADJ_ROOM_FIXED_GSO: _bindgen_ty_16 = 1;
pub const BPF_F_ADJ_ROOM_ENCAP_L3_IPV4: _bindgen_ty_16 = 2;
pub const BPF_F_ADJ_ROOM_ENCAP_L3_IPV6: _bindgen_ty_16 = 4;
pub const BPF_F_ADJ_ROOM_ENCAP_L4_GRE: _bindgen_ty_16 = 8;
pub const BPF_F_ADJ_ROOM_ENCAP_L4_UDP: _bindgen_ty_16 = 16;
pub const BPF_F_ADJ_ROOM_NO_CSUM_RESET: _bindgen_ty_16 = 32;
pub const BPF_F_ADJ_ROOM_ENCAP_L2_ETH: _bindgen_ty_16 = 64;
pub const BPF_F_ADJ_ROOM_DECAP_L3_IPV4: _bindgen_ty_16 = 128;
pub const BPF_F_ADJ_ROOM_DECAP_L3_IPV6: _bindgen_ty_16 = 256;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const BPF_ADJ_ROOM_ENCAP_L2_MASK: _bindgen_ty_17 = 255;
pub const BPF_ADJ_ROOM_ENCAP_L2_SHIFT: _bindgen_ty_17 = 56;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const BPF_F_SYSCTL_BASE_NAME: _bindgen_ty_18 = 1;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const BPF_LOCAL_STORAGE_GET_F_CREATE: _bindgen_ty_19 = 1;
pub const BPF_SK_STORAGE_GET_F_CREATE: _bindgen_ty_19 = 1;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const BPF_F_GET_BRANCH_RECORDS_SIZE: _bindgen_ty_20 = 1;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const BPF_RB_NO_WAKEUP: _bindgen_ty_21 = 1;
pub const BPF_RB_FORCE_WAKEUP: _bindgen_ty_21 = 2;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const BPF_RB_AVAIL_DATA: _bindgen_ty_22 = 0;
pub const BPF_RB_RING_SIZE: _bindgen_ty_22 = 1;
pub const BPF_RB_CONS_POS: _bindgen_ty_22 = 2;
pub const BPF_RB_PROD_POS: _bindgen_ty_22 = 3;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub const BPF_RINGBUF_BUSY_BIT: _bindgen_ty_23 = 2147483648;
pub const BPF_RINGBUF_DISCARD_BIT: _bindgen_ty_23 = 1073741824;
pub const BPF_RINGBUF_HDR_SZ: _bindgen_ty_23 = 8;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const BPF_SK_LOOKUP_F_REPLACE: _bindgen_ty_24 = 1;
pub const BPF_SK_LOOKUP_F_NO_REUSEPORT: _bindgen_ty_24 = 2;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const bpf_adj_room_mode_BPF_ADJ_ROOM_NET: bpf_adj_room_mode = 0;
pub const bpf_adj_room_mode_BPF_ADJ_ROOM_MAC: bpf_adj_room_mode = 1;
pub type bpf_adj_room_mode = ::std::os::raw::c_uint;
pub const bpf_hdr_start_off_BPF_HDR_START_MAC: bpf_hdr_start_off = 0;
pub const bpf_hdr_start_off_BPF_HDR_START_NET: bpf_hdr_start_off = 1;
pub type bpf_hdr_start_off = ::std::os::raw::c_uint;
pub const bpf_lwt_encap_mode_BPF_LWT_ENCAP_SEG6: bpf_lwt_encap_mode = 0;
pub const bpf_lwt_encap_mode_BPF_LWT_ENCAP_SEG6_INLINE: bpf_lwt_encap_mode = 1;
pub const bpf_lwt_encap_mode_BPF_LWT_ENCAP_IP: bpf_lwt_encap_mode = 2;
pub type bpf_lwt_encap_mode = ::std::os::raw::c_uint;
pub const BPF_F_BPRM_SECUREEXEC: _bindgen_ty_25 = 1;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const BPF_F_INGRESS: _bindgen_ty_26 = 1;
pub const BPF_F_BROADCAST: _bindgen_ty_26 = 8;
pub const BPF_F_EXCLUDE_INGRESS: _bindgen_ty_26 = 16;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
pub const BPF_SKB_TSTAMP_UNSPEC: _bindgen_ty_27 = 0;
pub const BPF_SKB_TSTAMP_DELIVERY_MONO: _bindgen_ty_27 = 1;
pub const BPF_SKB_CLOCK_REALTIME: _bindgen_ty_27 = 0;
pub const BPF_SKB_CLOCK_MONOTONIC: _bindgen_ty_27 = 1;
pub const BPF_SKB_CLOCK_TAI: _bindgen_ty_27 = 2;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_tunnel_key {
    pub tunnel_id: __u32,
    pub __bindgen_anon_1: bpf_tunnel_key__bindgen_ty_1,
    pub tunnel_tos: __u8,
    pub tunnel_ttl: __u8,
    pub __bindgen_anon_2: bpf_tunnel_key__bindgen_ty_2,
    pub tunnel_label: __u32,
    pub __bindgen_anon_3: bpf_tunnel_key__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_tunnel_key__bindgen_ty_1 {
    pub remote_ipv4: __u32,
    pub remote_ipv6: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_tunnel_key__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_tunnel_key__bindgen_ty_1>() - 16usize];
    ["Alignment of bpf_tunnel_key__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_tunnel_key__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_tunnel_key__bindgen_ty_1::remote_ipv4"]
        [::std::mem::offset_of!(bpf_tunnel_key__bindgen_ty_1, remote_ipv4) - 0usize];
    ["Offset of field: bpf_tunnel_key__bindgen_ty_1::remote_ipv6"]
        [::std::mem::offset_of!(bpf_tunnel_key__bindgen_ty_1, remote_ipv6) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_tunnel_key__bindgen_ty_2 {
    pub tunnel_ext: __u16,
    pub tunnel_flags: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_tunnel_key__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_tunnel_key__bindgen_ty_2>() - 2usize];
    ["Alignment of bpf_tunnel_key__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_tunnel_key__bindgen_ty_2>() - 2usize];
    ["Offset of field: bpf_tunnel_key__bindgen_ty_2::tunnel_ext"]
        [::std::mem::offset_of!(bpf_tunnel_key__bindgen_ty_2, tunnel_ext) - 0usize];
    ["Offset of field: bpf_tunnel_key__bindgen_ty_2::tunnel_flags"]
        [::std::mem::offset_of!(bpf_tunnel_key__bindgen_ty_2, tunnel_flags) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_tunnel_key__bindgen_ty_3 {
    pub local_ipv4: __u32,
    pub local_ipv6: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_tunnel_key__bindgen_ty_3"]
        [::std::mem::size_of::<bpf_tunnel_key__bindgen_ty_3>() - 16usize];
    ["Alignment of bpf_tunnel_key__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_tunnel_key__bindgen_ty_3>() - 4usize];
    ["Offset of field: bpf_tunnel_key__bindgen_ty_3::local_ipv4"]
        [::std::mem::offset_of!(bpf_tunnel_key__bindgen_ty_3, local_ipv4) - 0usize];
    ["Offset of field: bpf_tunnel_key__bindgen_ty_3::local_ipv6"]
        [::std::mem::offset_of!(bpf_tunnel_key__bindgen_ty_3, local_ipv6) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_tunnel_key"][::std::mem::size_of::<bpf_tunnel_key>() - 44usize];
    ["Alignment of bpf_tunnel_key"][::std::mem::align_of::<bpf_tunnel_key>() - 4usize];
    ["Offset of field: bpf_tunnel_key::tunnel_id"]
        [::std::mem::offset_of!(bpf_tunnel_key, tunnel_id) - 0usize];
    ["Offset of field: bpf_tunnel_key::tunnel_tos"]
        [::std::mem::offset_of!(bpf_tunnel_key, tunnel_tos) - 20usize];
    ["Offset of field: bpf_tunnel_key::tunnel_ttl"]
        [::std::mem::offset_of!(bpf_tunnel_key, tunnel_ttl) - 21usize];
    ["Offset of field: bpf_tunnel_key::tunnel_label"]
        [::std::mem::offset_of!(bpf_tunnel_key, tunnel_label) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_xfrm_state {
    pub reqid: __u32,
    pub spi: __u32,
    pub family: __u16,
    pub ext: __u16,
    pub __bindgen_anon_1: bpf_xfrm_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_xfrm_state__bindgen_ty_1 {
    pub remote_ipv4: __u32,
    pub remote_ipv6: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_xfrm_state__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_xfrm_state__bindgen_ty_1>() - 16usize];
    ["Alignment of bpf_xfrm_state__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_xfrm_state__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_xfrm_state__bindgen_ty_1::remote_ipv4"]
        [::std::mem::offset_of!(bpf_xfrm_state__bindgen_ty_1, remote_ipv4) - 0usize];
    ["Offset of field: bpf_xfrm_state__bindgen_ty_1::remote_ipv6"]
        [::std::mem::offset_of!(bpf_xfrm_state__bindgen_ty_1, remote_ipv6) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_xfrm_state"][::std::mem::size_of::<bpf_xfrm_state>() - 28usize];
    ["Alignment of bpf_xfrm_state"][::std::mem::align_of::<bpf_xfrm_state>() - 4usize];
    ["Offset of field: bpf_xfrm_state::reqid"]
        [::std::mem::offset_of!(bpf_xfrm_state, reqid) - 0usize];
    ["Offset of field: bpf_xfrm_state::spi"][::std::mem::offset_of!(bpf_xfrm_state, spi) - 4usize];
    ["Offset of field: bpf_xfrm_state::family"]
        [::std::mem::offset_of!(bpf_xfrm_state, family) - 8usize];
    ["Offset of field: bpf_xfrm_state::ext"][::std::mem::offset_of!(bpf_xfrm_state, ext) - 10usize];
};
pub const bpf_ret_code_BPF_OK: bpf_ret_code = 0;
pub const bpf_ret_code_BPF_DROP: bpf_ret_code = 2;
pub const bpf_ret_code_BPF_REDIRECT: bpf_ret_code = 7;
pub const bpf_ret_code_BPF_LWT_REROUTE: bpf_ret_code = 128;
pub const bpf_ret_code_BPF_FLOW_DISSECTOR_CONTINUE: bpf_ret_code = 129;
pub type bpf_ret_code = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_sock {
    pub bound_dev_if: __u32,
    pub family: __u32,
    pub type_: __u32,
    pub protocol: __u32,
    pub mark: __u32,
    pub priority: __u32,
    pub src_ip4: __u32,
    pub src_ip6: [__u32; 4usize],
    pub src_port: __u32,
    pub dst_port: __be16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub dst_ip4: __u32,
    pub dst_ip6: [__u32; 4usize],
    pub state: __u32,
    pub rx_queue_mapping: __s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock"][::std::mem::size_of::<bpf_sock>() - 80usize];
    ["Alignment of bpf_sock"][::std::mem::align_of::<bpf_sock>() - 4usize];
    ["Offset of field: bpf_sock::bound_dev_if"]
        [::std::mem::offset_of!(bpf_sock, bound_dev_if) - 0usize];
    ["Offset of field: bpf_sock::family"][::std::mem::offset_of!(bpf_sock, family) - 4usize];
    ["Offset of field: bpf_sock::type_"][::std::mem::offset_of!(bpf_sock, type_) - 8usize];
    ["Offset of field: bpf_sock::protocol"][::std::mem::offset_of!(bpf_sock, protocol) - 12usize];
    ["Offset of field: bpf_sock::mark"][::std::mem::offset_of!(bpf_sock, mark) - 16usize];
    ["Offset of field: bpf_sock::priority"][::std::mem::offset_of!(bpf_sock, priority) - 20usize];
    ["Offset of field: bpf_sock::src_ip4"][::std::mem::offset_of!(bpf_sock, src_ip4) - 24usize];
    ["Offset of field: bpf_sock::src_ip6"][::std::mem::offset_of!(bpf_sock, src_ip6) - 28usize];
    ["Offset of field: bpf_sock::src_port"][::std::mem::offset_of!(bpf_sock, src_port) - 44usize];
    ["Offset of field: bpf_sock::dst_port"][::std::mem::offset_of!(bpf_sock, dst_port) - 48usize];
    ["Offset of field: bpf_sock::dst_ip4"][::std::mem::offset_of!(bpf_sock, dst_ip4) - 52usize];
    ["Offset of field: bpf_sock::dst_ip6"][::std::mem::offset_of!(bpf_sock, dst_ip6) - 56usize];
    ["Offset of field: bpf_sock::state"][::std::mem::offset_of!(bpf_sock, state) - 72usize];
    ["Offset of field: bpf_sock::rx_queue_mapping"]
        [::std::mem::offset_of!(bpf_sock, rx_queue_mapping) - 76usize];
};
impl bpf_sock {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_tcp_sock {
    pub snd_cwnd: __u32,
    pub srtt_us: __u32,
    pub rtt_min: __u32,
    pub snd_ssthresh: __u32,
    pub rcv_nxt: __u32,
    pub snd_nxt: __u32,
    pub snd_una: __u32,
    pub mss_cache: __u32,
    pub ecn_flags: __u32,
    pub rate_delivered: __u32,
    pub rate_interval_us: __u32,
    pub packets_out: __u32,
    pub retrans_out: __u32,
    pub total_retrans: __u32,
    pub segs_in: __u32,
    pub data_segs_in: __u32,
    pub segs_out: __u32,
    pub data_segs_out: __u32,
    pub lost_out: __u32,
    pub sacked_out: __u32,
    pub bytes_received: __u64,
    pub bytes_acked: __u64,
    pub dsack_dups: __u32,
    pub delivered: __u32,
    pub delivered_ce: __u32,
    pub icsk_retransmits: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_tcp_sock"][::std::mem::size_of::<bpf_tcp_sock>() - 112usize];
    ["Alignment of bpf_tcp_sock"][::std::mem::align_of::<bpf_tcp_sock>() - 8usize];
    ["Offset of field: bpf_tcp_sock::snd_cwnd"]
        [::std::mem::offset_of!(bpf_tcp_sock, snd_cwnd) - 0usize];
    ["Offset of field: bpf_tcp_sock::srtt_us"]
        [::std::mem::offset_of!(bpf_tcp_sock, srtt_us) - 4usize];
    ["Offset of field: bpf_tcp_sock::rtt_min"]
        [::std::mem::offset_of!(bpf_tcp_sock, rtt_min) - 8usize];
    ["Offset of field: bpf_tcp_sock::snd_ssthresh"]
        [::std::mem::offset_of!(bpf_tcp_sock, snd_ssthresh) - 12usize];
    ["Offset of field: bpf_tcp_sock::rcv_nxt"]
        [::std::mem::offset_of!(bpf_tcp_sock, rcv_nxt) - 16usize];
    ["Offset of field: bpf_tcp_sock::snd_nxt"]
        [::std::mem::offset_of!(bpf_tcp_sock, snd_nxt) - 20usize];
    ["Offset of field: bpf_tcp_sock::snd_una"]
        [::std::mem::offset_of!(bpf_tcp_sock, snd_una) - 24usize];
    ["Offset of field: bpf_tcp_sock::mss_cache"]
        [::std::mem::offset_of!(bpf_tcp_sock, mss_cache) - 28usize];
    ["Offset of field: bpf_tcp_sock::ecn_flags"]
        [::std::mem::offset_of!(bpf_tcp_sock, ecn_flags) - 32usize];
    ["Offset of field: bpf_tcp_sock::rate_delivered"]
        [::std::mem::offset_of!(bpf_tcp_sock, rate_delivered) - 36usize];
    ["Offset of field: bpf_tcp_sock::rate_interval_us"]
        [::std::mem::offset_of!(bpf_tcp_sock, rate_interval_us) - 40usize];
    ["Offset of field: bpf_tcp_sock::packets_out"]
        [::std::mem::offset_of!(bpf_tcp_sock, packets_out) - 44usize];
    ["Offset of field: bpf_tcp_sock::retrans_out"]
        [::std::mem::offset_of!(bpf_tcp_sock, retrans_out) - 48usize];
    ["Offset of field: bpf_tcp_sock::total_retrans"]
        [::std::mem::offset_of!(bpf_tcp_sock, total_retrans) - 52usize];
    ["Offset of field: bpf_tcp_sock::segs_in"]
        [::std::mem::offset_of!(bpf_tcp_sock, segs_in) - 56usize];
    ["Offset of field: bpf_tcp_sock::data_segs_in"]
        [::std::mem::offset_of!(bpf_tcp_sock, data_segs_in) - 60usize];
    ["Offset of field: bpf_tcp_sock::segs_out"]
        [::std::mem::offset_of!(bpf_tcp_sock, segs_out) - 64usize];
    ["Offset of field: bpf_tcp_sock::data_segs_out"]
        [::std::mem::offset_of!(bpf_tcp_sock, data_segs_out) - 68usize];
    ["Offset of field: bpf_tcp_sock::lost_out"]
        [::std::mem::offset_of!(bpf_tcp_sock, lost_out) - 72usize];
    ["Offset of field: bpf_tcp_sock::sacked_out"]
        [::std::mem::offset_of!(bpf_tcp_sock, sacked_out) - 76usize];
    ["Offset of field: bpf_tcp_sock::bytes_received"]
        [::std::mem::offset_of!(bpf_tcp_sock, bytes_received) - 80usize];
    ["Offset of field: bpf_tcp_sock::bytes_acked"]
        [::std::mem::offset_of!(bpf_tcp_sock, bytes_acked) - 88usize];
    ["Offset of field: bpf_tcp_sock::dsack_dups"]
        [::std::mem::offset_of!(bpf_tcp_sock, dsack_dups) - 96usize];
    ["Offset of field: bpf_tcp_sock::delivered"]
        [::std::mem::offset_of!(bpf_tcp_sock, delivered) - 100usize];
    ["Offset of field: bpf_tcp_sock::delivered_ce"]
        [::std::mem::offset_of!(bpf_tcp_sock, delivered_ce) - 104usize];
    ["Offset of field: bpf_tcp_sock::icsk_retransmits"]
        [::std::mem::offset_of!(bpf_tcp_sock, icsk_retransmits) - 108usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sock_tuple {
    pub __bindgen_anon_1: bpf_sock_tuple__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_tuple__bindgen_ty_1 {
    pub ipv4: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1,
    pub ipv6: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1 {
    pub saddr: __be32,
    pub daddr: __be32,
    pub sport: __be16,
    pub dport: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1>() - 12usize];
    ["Alignment of bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1::saddr"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1, saddr) - 0usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1::daddr"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1, daddr) - 4usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1::sport"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1, sport) - 8usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1::dport"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1__bindgen_ty_1, dport) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2 {
    pub saddr: [__be32; 4usize],
    pub daddr: [__be32; 4usize],
    pub sport: __be16,
    pub dport: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2>() - 36usize];
    ["Alignment of bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2::saddr"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2, saddr) - 0usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2::daddr"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2, daddr) - 16usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2::sport"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2, sport) - 32usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2::dport"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1__bindgen_ty_2, dport) - 34usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_tuple__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_sock_tuple__bindgen_ty_1>() - 36usize];
    ["Alignment of bpf_sock_tuple__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_sock_tuple__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1::ipv4"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1, ipv4) - 0usize];
    ["Offset of field: bpf_sock_tuple__bindgen_ty_1::ipv6"]
        [::std::mem::offset_of!(bpf_sock_tuple__bindgen_ty_1, ipv6) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_tuple"][::std::mem::size_of::<bpf_sock_tuple>() - 36usize];
    ["Alignment of bpf_sock_tuple"][::std::mem::align_of::<bpf_sock_tuple>() - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_xdp_sock {
    pub queue_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_xdp_sock"][::std::mem::size_of::<bpf_xdp_sock>() - 4usize];
    ["Alignment of bpf_xdp_sock"][::std::mem::align_of::<bpf_xdp_sock>() - 4usize];
    ["Offset of field: bpf_xdp_sock::queue_id"]
        [::std::mem::offset_of!(bpf_xdp_sock, queue_id) - 0usize];
};
pub const xdp_action_XDP_ABORTED: xdp_action = 0;
pub const xdp_action_XDP_DROP: xdp_action = 1;
pub const xdp_action_XDP_PASS: xdp_action = 2;
pub const xdp_action_XDP_TX: xdp_action = 3;
pub const xdp_action_XDP_REDIRECT: xdp_action = 4;
pub type xdp_action = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_md {
    pub data: __u32,
    pub data_end: __u32,
    pub data_meta: __u32,
    pub ingress_ifindex: __u32,
    pub rx_queue_index: __u32,
    pub egress_ifindex: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_md"][::std::mem::size_of::<xdp_md>() - 24usize];
    ["Alignment of xdp_md"][::std::mem::align_of::<xdp_md>() - 4usize];
    ["Offset of field: xdp_md::data"][::std::mem::offset_of!(xdp_md, data) - 0usize];
    ["Offset of field: xdp_md::data_end"][::std::mem::offset_of!(xdp_md, data_end) - 4usize];
    ["Offset of field: xdp_md::data_meta"][::std::mem::offset_of!(xdp_md, data_meta) - 8usize];
    ["Offset of field: xdp_md::ingress_ifindex"]
        [::std::mem::offset_of!(xdp_md, ingress_ifindex) - 12usize];
    ["Offset of field: xdp_md::rx_queue_index"]
        [::std::mem::offset_of!(xdp_md, rx_queue_index) - 16usize];
    ["Offset of field: xdp_md::egress_ifindex"]
        [::std::mem::offset_of!(xdp_md, egress_ifindex) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_devmap_val {
    pub ifindex: __u32,
    pub bpf_prog: bpf_devmap_val__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_devmap_val__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_devmap_val__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_devmap_val__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_devmap_val__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_devmap_val__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_devmap_val__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(bpf_devmap_val__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: bpf_devmap_val__bindgen_ty_1::id"]
        [::std::mem::offset_of!(bpf_devmap_val__bindgen_ty_1, id) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_devmap_val"][::std::mem::size_of::<bpf_devmap_val>() - 8usize];
    ["Alignment of bpf_devmap_val"][::std::mem::align_of::<bpf_devmap_val>() - 4usize];
    ["Offset of field: bpf_devmap_val::ifindex"]
        [::std::mem::offset_of!(bpf_devmap_val, ifindex) - 0usize];
    ["Offset of field: bpf_devmap_val::bpf_prog"]
        [::std::mem::offset_of!(bpf_devmap_val, bpf_prog) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_cpumap_val {
    pub qsize: __u32,
    pub bpf_prog: bpf_cpumap_val__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_cpumap_val__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_cpumap_val__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_cpumap_val__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_cpumap_val__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_cpumap_val__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_cpumap_val__bindgen_ty_1::fd"]
        [::std::mem::offset_of!(bpf_cpumap_val__bindgen_ty_1, fd) - 0usize];
    ["Offset of field: bpf_cpumap_val__bindgen_ty_1::id"]
        [::std::mem::offset_of!(bpf_cpumap_val__bindgen_ty_1, id) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_cpumap_val"][::std::mem::size_of::<bpf_cpumap_val>() - 8usize];
    ["Alignment of bpf_cpumap_val"][::std::mem::align_of::<bpf_cpumap_val>() - 4usize];
    ["Offset of field: bpf_cpumap_val::qsize"]
        [::std::mem::offset_of!(bpf_cpumap_val, qsize) - 0usize];
    ["Offset of field: bpf_cpumap_val::bpf_prog"]
        [::std::mem::offset_of!(bpf_cpumap_val, bpf_prog) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_prog_info {
    pub type_: __u32,
    pub id: __u32,
    pub tag: [__u8; 8usize],
    pub jited_prog_len: __u32,
    pub xlated_prog_len: __u32,
    pub jited_prog_insns: __u64,
    pub xlated_prog_insns: __u64,
    pub load_time: __u64,
    pub created_by_uid: __u32,
    pub nr_map_ids: __u32,
    pub map_ids: __u64,
    pub name: [::std::os::raw::c_char; 16usize],
    pub ifindex: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub netns_dev: __u64,
    pub netns_ino: __u64,
    pub nr_jited_ksyms: __u32,
    pub nr_jited_func_lens: __u32,
    pub jited_ksyms: __u64,
    pub jited_func_lens: __u64,
    pub btf_id: __u32,
    pub func_info_rec_size: __u32,
    pub func_info: __u64,
    pub nr_func_info: __u32,
    pub nr_line_info: __u32,
    pub line_info: __u64,
    pub jited_line_info: __u64,
    pub nr_jited_line_info: __u32,
    pub line_info_rec_size: __u32,
    pub jited_line_info_rec_size: __u32,
    pub nr_prog_tags: __u32,
    pub prog_tags: __u64,
    pub run_time_ns: __u64,
    pub run_cnt: __u64,
    pub recursion_misses: __u64,
    pub verified_insns: __u32,
    pub attach_btf_obj_id: __u32,
    pub attach_btf_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_info"][::std::mem::size_of::<bpf_prog_info>() - 232usize];
    ["Alignment of bpf_prog_info"][::std::mem::align_of::<bpf_prog_info>() - 8usize];
    ["Offset of field: bpf_prog_info::type_"]
        [::std::mem::offset_of!(bpf_prog_info, type_) - 0usize];
    ["Offset of field: bpf_prog_info::id"][::std::mem::offset_of!(bpf_prog_info, id) - 4usize];
    ["Offset of field: bpf_prog_info::tag"][::std::mem::offset_of!(bpf_prog_info, tag) - 8usize];
    ["Offset of field: bpf_prog_info::jited_prog_len"]
        [::std::mem::offset_of!(bpf_prog_info, jited_prog_len) - 16usize];
    ["Offset of field: bpf_prog_info::xlated_prog_len"]
        [::std::mem::offset_of!(bpf_prog_info, xlated_prog_len) - 20usize];
    ["Offset of field: bpf_prog_info::jited_prog_insns"]
        [::std::mem::offset_of!(bpf_prog_info, jited_prog_insns) - 24usize];
    ["Offset of field: bpf_prog_info::xlated_prog_insns"]
        [::std::mem::offset_of!(bpf_prog_info, xlated_prog_insns) - 32usize];
    ["Offset of field: bpf_prog_info::load_time"]
        [::std::mem::offset_of!(bpf_prog_info, load_time) - 40usize];
    ["Offset of field: bpf_prog_info::created_by_uid"]
        [::std::mem::offset_of!(bpf_prog_info, created_by_uid) - 48usize];
    ["Offset of field: bpf_prog_info::nr_map_ids"]
        [::std::mem::offset_of!(bpf_prog_info, nr_map_ids) - 52usize];
    ["Offset of field: bpf_prog_info::map_ids"]
        [::std::mem::offset_of!(bpf_prog_info, map_ids) - 56usize];
    ["Offset of field: bpf_prog_info::name"][::std::mem::offset_of!(bpf_prog_info, name) - 64usize];
    ["Offset of field: bpf_prog_info::ifindex"]
        [::std::mem::offset_of!(bpf_prog_info, ifindex) - 80usize];
    ["Offset of field: bpf_prog_info::netns_dev"]
        [::std::mem::offset_of!(bpf_prog_info, netns_dev) - 88usize];
    ["Offset of field: bpf_prog_info::netns_ino"]
        [::std::mem::offset_of!(bpf_prog_info, netns_ino) - 96usize];
    ["Offset of field: bpf_prog_info::nr_jited_ksyms"]
        [::std::mem::offset_of!(bpf_prog_info, nr_jited_ksyms) - 104usize];
    ["Offset of field: bpf_prog_info::nr_jited_func_lens"]
        [::std::mem::offset_of!(bpf_prog_info, nr_jited_func_lens) - 108usize];
    ["Offset of field: bpf_prog_info::jited_ksyms"]
        [::std::mem::offset_of!(bpf_prog_info, jited_ksyms) - 112usize];
    ["Offset of field: bpf_prog_info::jited_func_lens"]
        [::std::mem::offset_of!(bpf_prog_info, jited_func_lens) - 120usize];
    ["Offset of field: bpf_prog_info::btf_id"]
        [::std::mem::offset_of!(bpf_prog_info, btf_id) - 128usize];
    ["Offset of field: bpf_prog_info::func_info_rec_size"]
        [::std::mem::offset_of!(bpf_prog_info, func_info_rec_size) - 132usize];
    ["Offset of field: bpf_prog_info::func_info"]
        [::std::mem::offset_of!(bpf_prog_info, func_info) - 136usize];
    ["Offset of field: bpf_prog_info::nr_func_info"]
        [::std::mem::offset_of!(bpf_prog_info, nr_func_info) - 144usize];
    ["Offset of field: bpf_prog_info::nr_line_info"]
        [::std::mem::offset_of!(bpf_prog_info, nr_line_info) - 148usize];
    ["Offset of field: bpf_prog_info::line_info"]
        [::std::mem::offset_of!(bpf_prog_info, line_info) - 152usize];
    ["Offset of field: bpf_prog_info::jited_line_info"]
        [::std::mem::offset_of!(bpf_prog_info, jited_line_info) - 160usize];
    ["Offset of field: bpf_prog_info::nr_jited_line_info"]
        [::std::mem::offset_of!(bpf_prog_info, nr_jited_line_info) - 168usize];
    ["Offset of field: bpf_prog_info::line_info_rec_size"]
        [::std::mem::offset_of!(bpf_prog_info, line_info_rec_size) - 172usize];
    ["Offset of field: bpf_prog_info::jited_line_info_rec_size"]
        [::std::mem::offset_of!(bpf_prog_info, jited_line_info_rec_size) - 176usize];
    ["Offset of field: bpf_prog_info::nr_prog_tags"]
        [::std::mem::offset_of!(bpf_prog_info, nr_prog_tags) - 180usize];
    ["Offset of field: bpf_prog_info::prog_tags"]
        [::std::mem::offset_of!(bpf_prog_info, prog_tags) - 184usize];
    ["Offset of field: bpf_prog_info::run_time_ns"]
        [::std::mem::offset_of!(bpf_prog_info, run_time_ns) - 192usize];
    ["Offset of field: bpf_prog_info::run_cnt"]
        [::std::mem::offset_of!(bpf_prog_info, run_cnt) - 200usize];
    ["Offset of field: bpf_prog_info::recursion_misses"]
        [::std::mem::offset_of!(bpf_prog_info, recursion_misses) - 208usize];
    ["Offset of field: bpf_prog_info::verified_insns"]
        [::std::mem::offset_of!(bpf_prog_info, verified_insns) - 216usize];
    ["Offset of field: bpf_prog_info::attach_btf_obj_id"]
        [::std::mem::offset_of!(bpf_prog_info, attach_btf_obj_id) - 220usize];
    ["Offset of field: bpf_prog_info::attach_btf_id"]
        [::std::mem::offset_of!(bpf_prog_info, attach_btf_id) - 224usize];
};
impl bpf_prog_info {
    #[inline]
    pub fn gpl_compatible(&self) -> __u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gpl_compatible(&mut self, val: __u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(gpl_compatible: __u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let gpl_compatible: u32 = unsafe { ::std::mem::transmute(gpl_compatible) };
            gpl_compatible as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_map_info {
    pub type_: __u32,
    pub id: __u32,
    pub key_size: __u32,
    pub value_size: __u32,
    pub max_entries: __u32,
    pub map_flags: __u32,
    pub name: [::std::os::raw::c_char; 16usize],
    pub ifindex: __u32,
    pub btf_vmlinux_value_type_id: __u32,
    pub netns_dev: __u64,
    pub netns_ino: __u64,
    pub btf_id: __u32,
    pub btf_key_type_id: __u32,
    pub btf_value_type_id: __u32,
    pub btf_vmlinux_id: __u32,
    pub map_extra: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_map_info"][::std::mem::size_of::<bpf_map_info>() - 88usize];
    ["Alignment of bpf_map_info"][::std::mem::align_of::<bpf_map_info>() - 8usize];
    ["Offset of field: bpf_map_info::type_"][::std::mem::offset_of!(bpf_map_info, type_) - 0usize];
    ["Offset of field: bpf_map_info::id"][::std::mem::offset_of!(bpf_map_info, id) - 4usize];
    ["Offset of field: bpf_map_info::key_size"]
        [::std::mem::offset_of!(bpf_map_info, key_size) - 8usize];
    ["Offset of field: bpf_map_info::value_size"]
        [::std::mem::offset_of!(bpf_map_info, value_size) - 12usize];
    ["Offset of field: bpf_map_info::max_entries"]
        [::std::mem::offset_of!(bpf_map_info, max_entries) - 16usize];
    ["Offset of field: bpf_map_info::map_flags"]
        [::std::mem::offset_of!(bpf_map_info, map_flags) - 20usize];
    ["Offset of field: bpf_map_info::name"][::std::mem::offset_of!(bpf_map_info, name) - 24usize];
    ["Offset of field: bpf_map_info::ifindex"]
        [::std::mem::offset_of!(bpf_map_info, ifindex) - 40usize];
    ["Offset of field: bpf_map_info::btf_vmlinux_value_type_id"]
        [::std::mem::offset_of!(bpf_map_info, btf_vmlinux_value_type_id) - 44usize];
    ["Offset of field: bpf_map_info::netns_dev"]
        [::std::mem::offset_of!(bpf_map_info, netns_dev) - 48usize];
    ["Offset of field: bpf_map_info::netns_ino"]
        [::std::mem::offset_of!(bpf_map_info, netns_ino) - 56usize];
    ["Offset of field: bpf_map_info::btf_id"]
        [::std::mem::offset_of!(bpf_map_info, btf_id) - 64usize];
    ["Offset of field: bpf_map_info::btf_key_type_id"]
        [::std::mem::offset_of!(bpf_map_info, btf_key_type_id) - 68usize];
    ["Offset of field: bpf_map_info::btf_value_type_id"]
        [::std::mem::offset_of!(bpf_map_info, btf_value_type_id) - 72usize];
    ["Offset of field: bpf_map_info::btf_vmlinux_id"]
        [::std::mem::offset_of!(bpf_map_info, btf_vmlinux_id) - 76usize];
    ["Offset of field: bpf_map_info::map_extra"]
        [::std::mem::offset_of!(bpf_map_info, map_extra) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_btf_info {
    pub btf: __u64,
    pub btf_size: __u32,
    pub id: __u32,
    pub name: __u64,
    pub name_len: __u32,
    pub kernel_btf: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_btf_info"][::std::mem::size_of::<bpf_btf_info>() - 32usize];
    ["Alignment of bpf_btf_info"][::std::mem::align_of::<bpf_btf_info>() - 8usize];
    ["Offset of field: bpf_btf_info::btf"][::std::mem::offset_of!(bpf_btf_info, btf) - 0usize];
    ["Offset of field: bpf_btf_info::btf_size"]
        [::std::mem::offset_of!(bpf_btf_info, btf_size) - 8usize];
    ["Offset of field: bpf_btf_info::id"][::std::mem::offset_of!(bpf_btf_info, id) - 12usize];
    ["Offset of field: bpf_btf_info::name"][::std::mem::offset_of!(bpf_btf_info, name) - 16usize];
    ["Offset of field: bpf_btf_info::name_len"]
        [::std::mem::offset_of!(bpf_btf_info, name_len) - 24usize];
    ["Offset of field: bpf_btf_info::kernel_btf"]
        [::std::mem::offset_of!(bpf_btf_info, kernel_btf) - 28usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_link_info {
    pub type_: __u32,
    pub id: __u32,
    pub prog_id: __u32,
    pub __bindgen_anon_1: bpf_link_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link_info__bindgen_ty_1 {
    pub raw_tracepoint: bpf_link_info__bindgen_ty_1__bindgen_ty_1,
    pub tracing: bpf_link_info__bindgen_ty_1__bindgen_ty_2,
    pub cgroup: bpf_link_info__bindgen_ty_1__bindgen_ty_3,
    pub iter: bpf_link_info__bindgen_ty_1__bindgen_ty_4,
    pub netns: bpf_link_info__bindgen_ty_1__bindgen_ty_5,
    pub xdp: bpf_link_info__bindgen_ty_1__bindgen_ty_6,
    pub struct_ops: bpf_link_info__bindgen_ty_1__bindgen_ty_7,
    pub netfilter: bpf_link_info__bindgen_ty_1__bindgen_ty_8,
    pub kprobe_multi: bpf_link_info__bindgen_ty_1__bindgen_ty_9,
    pub uprobe_multi: bpf_link_info__bindgen_ty_1__bindgen_ty_10,
    pub perf_event: bpf_link_info__bindgen_ty_1__bindgen_ty_11,
    pub tcx: bpf_link_info__bindgen_ty_1__bindgen_ty_12,
    pub netkit: bpf_link_info__bindgen_ty_1__bindgen_ty_13,
    pub sockmap: bpf_link_info__bindgen_ty_1__bindgen_ty_14,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_1 {
    pub tp_name: __u64,
    pub tp_name_len: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_1::tp_name"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_1, tp_name) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_1::tp_name_len"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_1, tp_name_len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_2 {
    pub attach_type: __u32,
    pub target_obj_id: __u32,
    pub target_btf_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_2>() - 12usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_2::attach_type"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_2, attach_type) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_2::target_obj_id"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_2, target_obj_id) - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_2::target_btf_id"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_2, target_btf_id) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_3 {
    pub cgroup_id: __u64,
    pub attach_type: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_3::cgroup_id"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_3, cgroup_id) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_3::attach_type"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_3, attach_type) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_4 {
    pub target_name: __u64,
    pub target_name_len: __u32,
    pub __bindgen_anon_1: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub map: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 {
    pub map_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1::map_id"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1 , map_id) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1"][::std::mem::align_of::<
        bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1::map"][::std::mem::offset_of!(
        bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
        map
    ) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2 {
    pub cgroup: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1,
    pub task: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1 {
    pub cgroup_id: __u64,
    pub order: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1,
        >() - 16usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1,
        >() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1::cgroup_id"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1 , cgroup_id) - 0usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1::order"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_1 , order) - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2 {
    pub tid: __u32,
    pub pid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2,
        >() - 8usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2,
        >() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2::tid"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2 , tid) - 0usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2::pid"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2__bindgen_ty_2 , pid) - 4usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2"][::std::mem::size_of::<
        bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2,
    >() - 16usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2"][::std::mem::align_of::<
        bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2,
    >() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2::cgroup"][::std::mem::offset_of!(
        bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2,
        cgroup
    )
        - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2::task"][::std::mem::offset_of!(
        bpf_link_info__bindgen_ty_1__bindgen_ty_4__bindgen_ty_2,
        task
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4::target_name"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_4, target_name) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_4::target_name_len"][::std::mem::offset_of!(
        bpf_link_info__bindgen_ty_1__bindgen_ty_4,
        target_name_len
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_5 {
    pub netns_ino: __u32,
    pub attach_type: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_5>() - 8usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_5>() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_5::netns_ino"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_5, netns_ino) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_5::attach_type"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_5, attach_type) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_6 {
    pub ifindex: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_6>() - 4usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_6>() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_6::ifindex"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_6, ifindex) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_7 {
    pub map_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_7>() - 4usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_7>() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_7::map_id"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_7, map_id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_8 {
    pub pf: __u32,
    pub hooknum: __u32,
    pub priority: __s32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_8"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_8>() - 16usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_8"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_8>() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_8::pf"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_8, pf) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_8::hooknum"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_8, hooknum) - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_8::priority"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_8, priority) - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_8::flags"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_8, flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_9 {
    pub addrs: __u64,
    pub count: __u32,
    pub flags: __u32,
    pub missed: __u64,
    pub cookies: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_9"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_9>() - 32usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_9"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_9>() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_9::addrs"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_9, addrs) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_9::count"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_9, count) - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_9::flags"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_9, flags) - 12usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_9::missed"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_9, missed) - 16usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_9::cookies"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_9, cookies) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_10 {
    pub path: __u64,
    pub offsets: __u64,
    pub ref_ctr_offsets: __u64,
    pub cookies: __u64,
    pub path_size: __u32,
    pub count: __u32,
    pub flags: __u32,
    pub pid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_10"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_10>() - 48usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_10"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_10>() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_10::path"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_10, path) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_10::offsets"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_10, offsets) - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_10::ref_ctr_offsets"][::std::mem::offset_of!(
        bpf_link_info__bindgen_ty_1__bindgen_ty_10,
        ref_ctr_offsets
    ) - 16usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_10::cookies"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_10, cookies) - 24usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_10::path_size"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_10, path_size) - 32usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_10::count"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_10, count) - 36usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_10::flags"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_10, flags) - 40usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_10::pid"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_10, pid) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11 {
    pub type_: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_anon_1: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1 {
    pub uprobe: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1,
    pub kprobe: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2,
    pub tracepoint: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3,
    pub event: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1 {
    pub file_name: __u64,
    pub name_len: __u32,
    pub offset: __u32,
    pub cookie: __u64,
    pub ref_ctr_offset: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1,
        >() - 32usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1,
        >() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1::file_name"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1 , file_name) - 0usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1::name_len"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1 , name_len) - 8usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1::offset"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1 , offset) - 12usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1::cookie"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1 , cookie) - 16usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1::ref_ctr_offset"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_1 , ref_ctr_offset) - 24usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2 {
    pub func_name: __u64,
    pub name_len: __u32,
    pub offset: __u32,
    pub addr: __u64,
    pub missed: __u64,
    pub cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2,
        >() - 40usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2,
        >() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2::func_name"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2 , func_name) - 0usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2::name_len"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2 , name_len) - 8usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2::offset"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2 , offset) - 12usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2::addr"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2 , addr) - 16usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2::missed"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2 , missed) - 24usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2::cookie"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_2 , cookie) - 32usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3 {
    pub tp_name: __u64,
    pub name_len: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3,
        >() - 24usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3,
        >() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3::tp_name"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3 , tp_name) - 0usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3::name_len"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3 , name_len) - 8usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3::cookie"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3 , cookie) - 16usize] ;
};
impl bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_3 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4 {
    pub config: __u64,
    pub type_: __u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4,
        >() - 24usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<
            bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4,
        >() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4::config"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4 , config) - 0usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4::type_"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4 , type_) - 8usize] ;
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4::cookie"] [:: std :: mem :: offset_of ! (bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4 , cookie) - 16usize] ;
};
impl bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1__bindgen_ty_4 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1"][::std::mem::size_of::<
        bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1,
    >() - 40usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1"][::std::mem::align_of::<
        bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1::uprobe"][::std::mem::offset_of!(
        bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1,
        uprobe
    )
        - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1::kprobe"][::std::mem::offset_of!(
        bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1,
        kprobe
    )
        - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1::tracepoint"][::std::mem::offset_of!(
        bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1,
        tracepoint
    )
        - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1::event"][::std::mem::offset_of!(
        bpf_link_info__bindgen_ty_1__bindgen_ty_11__bindgen_ty_1,
        event
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_11"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_11>() - 48usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_11"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_11>() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_11::type_"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_11, type_) - 0usize];
};
impl bpf_link_info__bindgen_ty_1__bindgen_ty_11 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_12 {
    pub ifindex: __u32,
    pub attach_type: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_12"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_12>() - 8usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_12"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_12>() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_12::ifindex"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_12, ifindex) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_12::attach_type"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_12, attach_type) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_13 {
    pub ifindex: __u32,
    pub attach_type: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_13"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_13>() - 8usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_13"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_13>() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_13::ifindex"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_13, ifindex) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_13::attach_type"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_13, attach_type) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_info__bindgen_ty_1__bindgen_ty_14 {
    pub map_id: __u32,
    pub attach_type: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1__bindgen_ty_14"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_14>() - 8usize];
    ["Alignment of bpf_link_info__bindgen_ty_1__bindgen_ty_14"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1__bindgen_ty_14>() - 4usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_14::map_id"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_14, map_id) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1__bindgen_ty_14::attach_type"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1__bindgen_ty_14, attach_type) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_link_info__bindgen_ty_1>() - 48usize];
    ["Alignment of bpf_link_info__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_link_info__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::raw_tracepoint"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, raw_tracepoint) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::tracing"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, tracing) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::cgroup"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, cgroup) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::iter"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, iter) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::netns"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, netns) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::xdp"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, xdp) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::struct_ops"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, struct_ops) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::netfilter"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, netfilter) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::kprobe_multi"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, kprobe_multi) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::uprobe_multi"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, uprobe_multi) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::perf_event"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, perf_event) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::tcx"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, tcx) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::netkit"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, netkit) - 0usize];
    ["Offset of field: bpf_link_info__bindgen_ty_1::sockmap"]
        [::std::mem::offset_of!(bpf_link_info__bindgen_ty_1, sockmap) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_info"][::std::mem::size_of::<bpf_link_info>() - 64usize];
    ["Alignment of bpf_link_info"][::std::mem::align_of::<bpf_link_info>() - 8usize];
    ["Offset of field: bpf_link_info::type_"]
        [::std::mem::offset_of!(bpf_link_info, type_) - 0usize];
    ["Offset of field: bpf_link_info::id"][::std::mem::offset_of!(bpf_link_info, id) - 4usize];
    ["Offset of field: bpf_link_info::prog_id"]
        [::std::mem::offset_of!(bpf_link_info, prog_id) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sock_addr {
    pub user_family: __u32,
    pub user_ip4: __u32,
    pub user_ip6: [__u32; 4usize],
    pub user_port: __u32,
    pub family: __u32,
    pub type_: __u32,
    pub protocol: __u32,
    pub msg_src_ip4: __u32,
    pub msg_src_ip6: [__u32; 4usize],
    pub __bindgen_anon_1: bpf_sock_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_addr__bindgen_ty_1 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_addr__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_sock_addr__bindgen_ty_1>() - 8usize];
    ["Alignment of bpf_sock_addr__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_sock_addr__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_sock_addr__bindgen_ty_1::sk"]
        [::std::mem::offset_of!(bpf_sock_addr__bindgen_ty_1, sk) - 0usize];
};
impl bpf_sock_addr__bindgen_ty_1 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_addr"][::std::mem::size_of::<bpf_sock_addr>() - 72usize];
    ["Alignment of bpf_sock_addr"][::std::mem::align_of::<bpf_sock_addr>() - 8usize];
    ["Offset of field: bpf_sock_addr::user_family"]
        [::std::mem::offset_of!(bpf_sock_addr, user_family) - 0usize];
    ["Offset of field: bpf_sock_addr::user_ip4"]
        [::std::mem::offset_of!(bpf_sock_addr, user_ip4) - 4usize];
    ["Offset of field: bpf_sock_addr::user_ip6"]
        [::std::mem::offset_of!(bpf_sock_addr, user_ip6) - 8usize];
    ["Offset of field: bpf_sock_addr::user_port"]
        [::std::mem::offset_of!(bpf_sock_addr, user_port) - 24usize];
    ["Offset of field: bpf_sock_addr::family"]
        [::std::mem::offset_of!(bpf_sock_addr, family) - 28usize];
    ["Offset of field: bpf_sock_addr::type_"]
        [::std::mem::offset_of!(bpf_sock_addr, type_) - 32usize];
    ["Offset of field: bpf_sock_addr::protocol"]
        [::std::mem::offset_of!(bpf_sock_addr, protocol) - 36usize];
    ["Offset of field: bpf_sock_addr::msg_src_ip4"]
        [::std::mem::offset_of!(bpf_sock_addr, msg_src_ip4) - 40usize];
    ["Offset of field: bpf_sock_addr::msg_src_ip6"]
        [::std::mem::offset_of!(bpf_sock_addr, msg_src_ip6) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sock_ops {
    pub op: __u32,
    pub __bindgen_anon_1: bpf_sock_ops__bindgen_ty_1,
    pub family: __u32,
    pub remote_ip4: __u32,
    pub local_ip4: __u32,
    pub remote_ip6: [__u32; 4usize],
    pub local_ip6: [__u32; 4usize],
    pub remote_port: __u32,
    pub local_port: __u32,
    pub is_fullsock: __u32,
    pub snd_cwnd: __u32,
    pub srtt_us: __u32,
    pub bpf_sock_ops_cb_flags: __u32,
    pub state: __u32,
    pub rtt_min: __u32,
    pub snd_ssthresh: __u32,
    pub rcv_nxt: __u32,
    pub snd_nxt: __u32,
    pub snd_una: __u32,
    pub mss_cache: __u32,
    pub ecn_flags: __u32,
    pub rate_delivered: __u32,
    pub rate_interval_us: __u32,
    pub packets_out: __u32,
    pub retrans_out: __u32,
    pub total_retrans: __u32,
    pub segs_in: __u32,
    pub data_segs_in: __u32,
    pub segs_out: __u32,
    pub data_segs_out: __u32,
    pub lost_out: __u32,
    pub sacked_out: __u32,
    pub sk_txhash: __u32,
    pub bytes_received: __u64,
    pub bytes_acked: __u64,
    pub __bindgen_anon_2: bpf_sock_ops__bindgen_ty_2,
    pub __bindgen_anon_3: bpf_sock_ops__bindgen_ty_3,
    pub __bindgen_anon_4: bpf_sock_ops__bindgen_ty_4,
    pub skb_len: __u32,
    pub skb_tcp_flags: __u32,
    pub skb_hwtstamp: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_ops__bindgen_ty_1 {
    pub args: [__u32; 4usize],
    pub reply: __u32,
    pub replylong: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_ops__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_sock_ops__bindgen_ty_1>() - 16usize];
    ["Alignment of bpf_sock_ops__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_sock_ops__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_sock_ops__bindgen_ty_1::args"]
        [::std::mem::offset_of!(bpf_sock_ops__bindgen_ty_1, args) - 0usize];
    ["Offset of field: bpf_sock_ops__bindgen_ty_1::reply"]
        [::std::mem::offset_of!(bpf_sock_ops__bindgen_ty_1, reply) - 0usize];
    ["Offset of field: bpf_sock_ops__bindgen_ty_1::replylong"]
        [::std::mem::offset_of!(bpf_sock_ops__bindgen_ty_1, replylong) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_ops__bindgen_ty_2 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_ops__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_sock_ops__bindgen_ty_2>() - 8usize];
    ["Alignment of bpf_sock_ops__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_sock_ops__bindgen_ty_2>() - 8usize];
    ["Offset of field: bpf_sock_ops__bindgen_ty_2::sk"]
        [::std::mem::offset_of!(bpf_sock_ops__bindgen_ty_2, sk) - 0usize];
};
impl bpf_sock_ops__bindgen_ty_2 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_ops__bindgen_ty_3 {
    pub skb_data: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_ops__bindgen_ty_3"]
        [::std::mem::size_of::<bpf_sock_ops__bindgen_ty_3>() - 8usize];
    ["Alignment of bpf_sock_ops__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_sock_ops__bindgen_ty_3>() - 8usize];
    ["Offset of field: bpf_sock_ops__bindgen_ty_3::skb_data"]
        [::std::mem::offset_of!(bpf_sock_ops__bindgen_ty_3, skb_data) - 0usize];
};
impl bpf_sock_ops__bindgen_ty_3 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sock_ops__bindgen_ty_4 {
    pub skb_data_end: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_ops__bindgen_ty_4"]
        [::std::mem::size_of::<bpf_sock_ops__bindgen_ty_4>() - 8usize];
    ["Alignment of bpf_sock_ops__bindgen_ty_4"]
        [::std::mem::align_of::<bpf_sock_ops__bindgen_ty_4>() - 8usize];
    ["Offset of field: bpf_sock_ops__bindgen_ty_4::skb_data_end"]
        [::std::mem::offset_of!(bpf_sock_ops__bindgen_ty_4, skb_data_end) - 0usize];
};
impl bpf_sock_ops__bindgen_ty_4 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sock_ops"][::std::mem::size_of::<bpf_sock_ops>() - 224usize];
    ["Alignment of bpf_sock_ops"][::std::mem::align_of::<bpf_sock_ops>() - 8usize];
    ["Offset of field: bpf_sock_ops::op"][::std::mem::offset_of!(bpf_sock_ops, op) - 0usize];
    ["Offset of field: bpf_sock_ops::family"]
        [::std::mem::offset_of!(bpf_sock_ops, family) - 20usize];
    ["Offset of field: bpf_sock_ops::remote_ip4"]
        [::std::mem::offset_of!(bpf_sock_ops, remote_ip4) - 24usize];
    ["Offset of field: bpf_sock_ops::local_ip4"]
        [::std::mem::offset_of!(bpf_sock_ops, local_ip4) - 28usize];
    ["Offset of field: bpf_sock_ops::remote_ip6"]
        [::std::mem::offset_of!(bpf_sock_ops, remote_ip6) - 32usize];
    ["Offset of field: bpf_sock_ops::local_ip6"]
        [::std::mem::offset_of!(bpf_sock_ops, local_ip6) - 48usize];
    ["Offset of field: bpf_sock_ops::remote_port"]
        [::std::mem::offset_of!(bpf_sock_ops, remote_port) - 64usize];
    ["Offset of field: bpf_sock_ops::local_port"]
        [::std::mem::offset_of!(bpf_sock_ops, local_port) - 68usize];
    ["Offset of field: bpf_sock_ops::is_fullsock"]
        [::std::mem::offset_of!(bpf_sock_ops, is_fullsock) - 72usize];
    ["Offset of field: bpf_sock_ops::snd_cwnd"]
        [::std::mem::offset_of!(bpf_sock_ops, snd_cwnd) - 76usize];
    ["Offset of field: bpf_sock_ops::srtt_us"]
        [::std::mem::offset_of!(bpf_sock_ops, srtt_us) - 80usize];
    ["Offset of field: bpf_sock_ops::bpf_sock_ops_cb_flags"]
        [::std::mem::offset_of!(bpf_sock_ops, bpf_sock_ops_cb_flags) - 84usize];
    ["Offset of field: bpf_sock_ops::state"][::std::mem::offset_of!(bpf_sock_ops, state) - 88usize];
    ["Offset of field: bpf_sock_ops::rtt_min"]
        [::std::mem::offset_of!(bpf_sock_ops, rtt_min) - 92usize];
    ["Offset of field: bpf_sock_ops::snd_ssthresh"]
        [::std::mem::offset_of!(bpf_sock_ops, snd_ssthresh) - 96usize];
    ["Offset of field: bpf_sock_ops::rcv_nxt"]
        [::std::mem::offset_of!(bpf_sock_ops, rcv_nxt) - 100usize];
    ["Offset of field: bpf_sock_ops::snd_nxt"]
        [::std::mem::offset_of!(bpf_sock_ops, snd_nxt) - 104usize];
    ["Offset of field: bpf_sock_ops::snd_una"]
        [::std::mem::offset_of!(bpf_sock_ops, snd_una) - 108usize];
    ["Offset of field: bpf_sock_ops::mss_cache"]
        [::std::mem::offset_of!(bpf_sock_ops, mss_cache) - 112usize];
    ["Offset of field: bpf_sock_ops::ecn_flags"]
        [::std::mem::offset_of!(bpf_sock_ops, ecn_flags) - 116usize];
    ["Offset of field: bpf_sock_ops::rate_delivered"]
        [::std::mem::offset_of!(bpf_sock_ops, rate_delivered) - 120usize];
    ["Offset of field: bpf_sock_ops::rate_interval_us"]
        [::std::mem::offset_of!(bpf_sock_ops, rate_interval_us) - 124usize];
    ["Offset of field: bpf_sock_ops::packets_out"]
        [::std::mem::offset_of!(bpf_sock_ops, packets_out) - 128usize];
    ["Offset of field: bpf_sock_ops::retrans_out"]
        [::std::mem::offset_of!(bpf_sock_ops, retrans_out) - 132usize];
    ["Offset of field: bpf_sock_ops::total_retrans"]
        [::std::mem::offset_of!(bpf_sock_ops, total_retrans) - 136usize];
    ["Offset of field: bpf_sock_ops::segs_in"]
        [::std::mem::offset_of!(bpf_sock_ops, segs_in) - 140usize];
    ["Offset of field: bpf_sock_ops::data_segs_in"]
        [::std::mem::offset_of!(bpf_sock_ops, data_segs_in) - 144usize];
    ["Offset of field: bpf_sock_ops::segs_out"]
        [::std::mem::offset_of!(bpf_sock_ops, segs_out) - 148usize];
    ["Offset of field: bpf_sock_ops::data_segs_out"]
        [::std::mem::offset_of!(bpf_sock_ops, data_segs_out) - 152usize];
    ["Offset of field: bpf_sock_ops::lost_out"]
        [::std::mem::offset_of!(bpf_sock_ops, lost_out) - 156usize];
    ["Offset of field: bpf_sock_ops::sacked_out"]
        [::std::mem::offset_of!(bpf_sock_ops, sacked_out) - 160usize];
    ["Offset of field: bpf_sock_ops::sk_txhash"]
        [::std::mem::offset_of!(bpf_sock_ops, sk_txhash) - 164usize];
    ["Offset of field: bpf_sock_ops::bytes_received"]
        [::std::mem::offset_of!(bpf_sock_ops, bytes_received) - 168usize];
    ["Offset of field: bpf_sock_ops::bytes_acked"]
        [::std::mem::offset_of!(bpf_sock_ops, bytes_acked) - 176usize];
    ["Offset of field: bpf_sock_ops::skb_len"]
        [::std::mem::offset_of!(bpf_sock_ops, skb_len) - 208usize];
    ["Offset of field: bpf_sock_ops::skb_tcp_flags"]
        [::std::mem::offset_of!(bpf_sock_ops, skb_tcp_flags) - 212usize];
    ["Offset of field: bpf_sock_ops::skb_hwtstamp"]
        [::std::mem::offset_of!(bpf_sock_ops, skb_hwtstamp) - 216usize];
};
pub const BPF_SOCK_OPS_RTO_CB_FLAG: _bindgen_ty_28 = 1;
pub const BPF_SOCK_OPS_RETRANS_CB_FLAG: _bindgen_ty_28 = 2;
pub const BPF_SOCK_OPS_STATE_CB_FLAG: _bindgen_ty_28 = 4;
pub const BPF_SOCK_OPS_RTT_CB_FLAG: _bindgen_ty_28 = 8;
pub const BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG: _bindgen_ty_28 = 16;
pub const BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG: _bindgen_ty_28 = 32;
pub const BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG: _bindgen_ty_28 = 64;
pub const BPF_SOCK_OPS_ALL_CB_FLAGS: _bindgen_ty_28 = 127;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
pub const BPF_SOCK_OPS_VOID: _bindgen_ty_30 = 0;
pub const BPF_SOCK_OPS_TIMEOUT_INIT: _bindgen_ty_30 = 1;
pub const BPF_SOCK_OPS_RWND_INIT: _bindgen_ty_30 = 2;
pub const BPF_SOCK_OPS_TCP_CONNECT_CB: _bindgen_ty_30 = 3;
pub const BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB: _bindgen_ty_30 = 4;
pub const BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB: _bindgen_ty_30 = 5;
pub const BPF_SOCK_OPS_NEEDS_ECN: _bindgen_ty_30 = 6;
pub const BPF_SOCK_OPS_BASE_RTT: _bindgen_ty_30 = 7;
pub const BPF_SOCK_OPS_RTO_CB: _bindgen_ty_30 = 8;
pub const BPF_SOCK_OPS_RETRANS_CB: _bindgen_ty_30 = 9;
pub const BPF_SOCK_OPS_STATE_CB: _bindgen_ty_30 = 10;
pub const BPF_SOCK_OPS_TCP_LISTEN_CB: _bindgen_ty_30 = 11;
pub const BPF_SOCK_OPS_RTT_CB: _bindgen_ty_30 = 12;
pub const BPF_SOCK_OPS_PARSE_HDR_OPT_CB: _bindgen_ty_30 = 13;
pub const BPF_SOCK_OPS_HDR_OPT_LEN_CB: _bindgen_ty_30 = 14;
pub const BPF_SOCK_OPS_WRITE_HDR_OPT_CB: _bindgen_ty_30 = 15;
pub const BPF_SOCK_OPS_TSTAMP_SCHED_CB: _bindgen_ty_30 = 16;
pub const BPF_SOCK_OPS_TSTAMP_SND_SW_CB: _bindgen_ty_30 = 17;
pub const BPF_SOCK_OPS_TSTAMP_SND_HW_CB: _bindgen_ty_30 = 18;
pub const BPF_SOCK_OPS_TSTAMP_ACK_CB: _bindgen_ty_30 = 19;
pub const BPF_SOCK_OPS_TSTAMP_SENDMSG_CB: _bindgen_ty_30 = 20;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
pub const BPF_TCP_ESTABLISHED: _bindgen_ty_31 = 1;
pub const BPF_TCP_SYN_SENT: _bindgen_ty_31 = 2;
pub const BPF_TCP_SYN_RECV: _bindgen_ty_31 = 3;
pub const BPF_TCP_FIN_WAIT1: _bindgen_ty_31 = 4;
pub const BPF_TCP_FIN_WAIT2: _bindgen_ty_31 = 5;
pub const BPF_TCP_TIME_WAIT: _bindgen_ty_31 = 6;
pub const BPF_TCP_CLOSE: _bindgen_ty_31 = 7;
pub const BPF_TCP_CLOSE_WAIT: _bindgen_ty_31 = 8;
pub const BPF_TCP_LAST_ACK: _bindgen_ty_31 = 9;
pub const BPF_TCP_LISTEN: _bindgen_ty_31 = 10;
pub const BPF_TCP_CLOSING: _bindgen_ty_31 = 11;
pub const BPF_TCP_NEW_SYN_RECV: _bindgen_ty_31 = 12;
pub const BPF_TCP_BOUND_INACTIVE: _bindgen_ty_31 = 13;
pub const BPF_TCP_MAX_STATES: _bindgen_ty_31 = 14;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub const BPF_LOAD_HDR_OPT_TCP_SYN: _bindgen_ty_33 = 1;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
pub const BPF_WRITE_HDR_TCP_CURRENT_MSS: _bindgen_ty_34 = 1;
pub const BPF_WRITE_HDR_TCP_SYNACK_COOKIE: _bindgen_ty_34 = 2;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_perf_event_value {
    pub counter: __u64,
    pub enabled: __u64,
    pub running: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_perf_event_value"][::std::mem::size_of::<bpf_perf_event_value>() - 24usize];
    ["Alignment of bpf_perf_event_value"][::std::mem::align_of::<bpf_perf_event_value>() - 8usize];
    ["Offset of field: bpf_perf_event_value::counter"]
        [::std::mem::offset_of!(bpf_perf_event_value, counter) - 0usize];
    ["Offset of field: bpf_perf_event_value::enabled"]
        [::std::mem::offset_of!(bpf_perf_event_value, enabled) - 8usize];
    ["Offset of field: bpf_perf_event_value::running"]
        [::std::mem::offset_of!(bpf_perf_event_value, running) - 16usize];
};
pub const BPF_DEVCG_ACC_MKNOD: _bindgen_ty_35 = 1;
pub const BPF_DEVCG_ACC_READ: _bindgen_ty_35 = 2;
pub const BPF_DEVCG_ACC_WRITE: _bindgen_ty_35 = 4;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
pub const BPF_DEVCG_DEV_BLOCK: _bindgen_ty_36 = 1;
pub const BPF_DEVCG_DEV_CHAR: _bindgen_ty_36 = 2;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_cgroup_dev_ctx {
    pub access_type: __u32,
    pub major: __u32,
    pub minor: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_cgroup_dev_ctx"][::std::mem::size_of::<bpf_cgroup_dev_ctx>() - 12usize];
    ["Alignment of bpf_cgroup_dev_ctx"][::std::mem::align_of::<bpf_cgroup_dev_ctx>() - 4usize];
    ["Offset of field: bpf_cgroup_dev_ctx::access_type"]
        [::std::mem::offset_of!(bpf_cgroup_dev_ctx, access_type) - 0usize];
    ["Offset of field: bpf_cgroup_dev_ctx::major"]
        [::std::mem::offset_of!(bpf_cgroup_dev_ctx, major) - 4usize];
    ["Offset of field: bpf_cgroup_dev_ctx::minor"]
        [::std::mem::offset_of!(bpf_cgroup_dev_ctx, minor) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct bpf_raw_tracepoint_args {
    pub args: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_raw_tracepoint_args"][::std::mem::size_of::<bpf_raw_tracepoint_args>() - 0usize];
    ["Alignment of bpf_raw_tracepoint_args"]
        [::std::mem::align_of::<bpf_raw_tracepoint_args>() - 8usize];
    ["Offset of field: bpf_raw_tracepoint_args::args"]
        [::std::mem::offset_of!(bpf_raw_tracepoint_args, args) - 0usize];
};
pub const BPF_FIB_LOOKUP_DIRECT: _bindgen_ty_37 = 1;
pub const BPF_FIB_LOOKUP_OUTPUT: _bindgen_ty_37 = 2;
pub const BPF_FIB_LOOKUP_SKIP_NEIGH: _bindgen_ty_37 = 4;
pub const BPF_FIB_LOOKUP_TBID: _bindgen_ty_37 = 8;
pub const BPF_FIB_LOOKUP_SRC: _bindgen_ty_37 = 16;
pub const BPF_FIB_LOOKUP_MARK: _bindgen_ty_37 = 32;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
pub const BPF_FIB_LKUP_RET_SUCCESS: _bindgen_ty_38 = 0;
pub const BPF_FIB_LKUP_RET_BLACKHOLE: _bindgen_ty_38 = 1;
pub const BPF_FIB_LKUP_RET_UNREACHABLE: _bindgen_ty_38 = 2;
pub const BPF_FIB_LKUP_RET_PROHIBIT: _bindgen_ty_38 = 3;
pub const BPF_FIB_LKUP_RET_NOT_FWDED: _bindgen_ty_38 = 4;
pub const BPF_FIB_LKUP_RET_FWD_DISABLED: _bindgen_ty_38 = 5;
pub const BPF_FIB_LKUP_RET_UNSUPP_LWT: _bindgen_ty_38 = 6;
pub const BPF_FIB_LKUP_RET_NO_NEIGH: _bindgen_ty_38 = 7;
pub const BPF_FIB_LKUP_RET_FRAG_NEEDED: _bindgen_ty_38 = 8;
pub const BPF_FIB_LKUP_RET_NO_SRC_ADDR: _bindgen_ty_38 = 9;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_fib_lookup {
    pub family: __u8,
    pub l4_protocol: __u8,
    pub sport: __be16,
    pub dport: __be16,
    pub __bindgen_anon_1: bpf_fib_lookup__bindgen_ty_1,
    pub ifindex: __u32,
    pub __bindgen_anon_2: bpf_fib_lookup__bindgen_ty_2,
    pub __bindgen_anon_3: bpf_fib_lookup__bindgen_ty_3,
    pub __bindgen_anon_4: bpf_fib_lookup__bindgen_ty_4,
    pub __bindgen_anon_5: bpf_fib_lookup__bindgen_ty_5,
    pub __bindgen_anon_6: bpf_fib_lookup__bindgen_ty_6,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_1 {
    pub tot_len: __u16,
    pub mtu_result: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_fib_lookup__bindgen_ty_1>() - 2usize];
    ["Alignment of bpf_fib_lookup__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_fib_lookup__bindgen_ty_1>() - 2usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_1::tot_len"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_1, tot_len) - 0usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_1::mtu_result"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_1, mtu_result) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_2 {
    pub tos: __u8,
    pub flowinfo: __be32,
    pub rt_metric: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_fib_lookup__bindgen_ty_2>() - 4usize];
    ["Alignment of bpf_fib_lookup__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_fib_lookup__bindgen_ty_2>() - 4usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_2::tos"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_2, tos) - 0usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_2::flowinfo"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_2, flowinfo) - 0usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_2::rt_metric"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_2, rt_metric) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_3 {
    pub ipv4_src: __be32,
    pub ipv6_src: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup__bindgen_ty_3"]
        [::std::mem::size_of::<bpf_fib_lookup__bindgen_ty_3>() - 16usize];
    ["Alignment of bpf_fib_lookup__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_fib_lookup__bindgen_ty_3>() - 4usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_3::ipv4_src"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_3, ipv4_src) - 0usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_3::ipv6_src"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_3, ipv6_src) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_4 {
    pub ipv4_dst: __be32,
    pub ipv6_dst: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup__bindgen_ty_4"]
        [::std::mem::size_of::<bpf_fib_lookup__bindgen_ty_4>() - 16usize];
    ["Alignment of bpf_fib_lookup__bindgen_ty_4"]
        [::std::mem::align_of::<bpf_fib_lookup__bindgen_ty_4>() - 4usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_4::ipv4_dst"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_4, ipv4_dst) - 0usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_4::ipv6_dst"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_4, ipv6_dst) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_5 {
    pub __bindgen_anon_1: bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1,
    pub tbid: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1 {
    pub h_vlan_proto: __be16,
    pub h_vlan_TCI: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1>() - 2usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1::h_vlan_proto"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1, h_vlan_proto) - 0usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1::h_vlan_TCI"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_5__bindgen_ty_1, h_vlan_TCI) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup__bindgen_ty_5"]
        [::std::mem::size_of::<bpf_fib_lookup__bindgen_ty_5>() - 4usize];
    ["Alignment of bpf_fib_lookup__bindgen_ty_5"]
        [::std::mem::align_of::<bpf_fib_lookup__bindgen_ty_5>() - 4usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_5::tbid"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_5, tbid) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_fib_lookup__bindgen_ty_6 {
    pub __bindgen_anon_1: bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1 {
    pub mark: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1::mark"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_6__bindgen_ty_1, mark) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2 {
    pub smac: [__u8; 6usize],
    pub dmac: [__u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2>() - 12usize];
    ["Alignment of bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2>() - 1usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2::smac"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2, smac) - 0usize];
    ["Offset of field: bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2::dmac"]
        [::std::mem::offset_of!(bpf_fib_lookup__bindgen_ty_6__bindgen_ty_2, dmac) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup__bindgen_ty_6"]
        [::std::mem::size_of::<bpf_fib_lookup__bindgen_ty_6>() - 12usize];
    ["Alignment of bpf_fib_lookup__bindgen_ty_6"]
        [::std::mem::align_of::<bpf_fib_lookup__bindgen_ty_6>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_fib_lookup"][::std::mem::size_of::<bpf_fib_lookup>() - 64usize];
    ["Alignment of bpf_fib_lookup"][::std::mem::align_of::<bpf_fib_lookup>() - 4usize];
    ["Offset of field: bpf_fib_lookup::family"]
        [::std::mem::offset_of!(bpf_fib_lookup, family) - 0usize];
    ["Offset of field: bpf_fib_lookup::l4_protocol"]
        [::std::mem::offset_of!(bpf_fib_lookup, l4_protocol) - 1usize];
    ["Offset of field: bpf_fib_lookup::sport"]
        [::std::mem::offset_of!(bpf_fib_lookup, sport) - 2usize];
    ["Offset of field: bpf_fib_lookup::dport"]
        [::std::mem::offset_of!(bpf_fib_lookup, dport) - 4usize];
    ["Offset of field: bpf_fib_lookup::ifindex"]
        [::std::mem::offset_of!(bpf_fib_lookup, ifindex) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_redir_neigh {
    pub nh_family: __u32,
    pub __bindgen_anon_1: bpf_redir_neigh__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_redir_neigh__bindgen_ty_1 {
    pub ipv4_nh: __be32,
    pub ipv6_nh: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_redir_neigh__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_redir_neigh__bindgen_ty_1>() - 16usize];
    ["Alignment of bpf_redir_neigh__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_redir_neigh__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_redir_neigh__bindgen_ty_1::ipv4_nh"]
        [::std::mem::offset_of!(bpf_redir_neigh__bindgen_ty_1, ipv4_nh) - 0usize];
    ["Offset of field: bpf_redir_neigh__bindgen_ty_1::ipv6_nh"]
        [::std::mem::offset_of!(bpf_redir_neigh__bindgen_ty_1, ipv6_nh) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_redir_neigh"][::std::mem::size_of::<bpf_redir_neigh>() - 20usize];
    ["Alignment of bpf_redir_neigh"][::std::mem::align_of::<bpf_redir_neigh>() - 4usize];
    ["Offset of field: bpf_redir_neigh::nh_family"]
        [::std::mem::offset_of!(bpf_redir_neigh, nh_family) - 0usize];
};
pub const bpf_check_mtu_flags_BPF_MTU_CHK_SEGS: bpf_check_mtu_flags = 1;
pub type bpf_check_mtu_flags = ::std::os::raw::c_uint;
pub const bpf_check_mtu_ret_BPF_MTU_CHK_RET_SUCCESS: bpf_check_mtu_ret = 0;
pub const bpf_check_mtu_ret_BPF_MTU_CHK_RET_FRAG_NEEDED: bpf_check_mtu_ret = 1;
pub const bpf_check_mtu_ret_BPF_MTU_CHK_RET_SEGS_TOOBIG: bpf_check_mtu_ret = 2;
pub type bpf_check_mtu_ret = ::std::os::raw::c_uint;
pub const bpf_task_fd_type_BPF_FD_TYPE_RAW_TRACEPOINT: bpf_task_fd_type = 0;
pub const bpf_task_fd_type_BPF_FD_TYPE_TRACEPOINT: bpf_task_fd_type = 1;
pub const bpf_task_fd_type_BPF_FD_TYPE_KPROBE: bpf_task_fd_type = 2;
pub const bpf_task_fd_type_BPF_FD_TYPE_KRETPROBE: bpf_task_fd_type = 3;
pub const bpf_task_fd_type_BPF_FD_TYPE_UPROBE: bpf_task_fd_type = 4;
pub const bpf_task_fd_type_BPF_FD_TYPE_URETPROBE: bpf_task_fd_type = 5;
pub type bpf_task_fd_type = ::std::os::raw::c_uint;
pub const BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG: _bindgen_ty_39 = 1;
pub const BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL: _bindgen_ty_39 = 2;
pub const BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP: _bindgen_ty_39 = 4;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_flow_keys {
    pub nhoff: __u16,
    pub thoff: __u16,
    pub addr_proto: __u16,
    pub is_frag: __u8,
    pub is_first_frag: __u8,
    pub is_encap: __u8,
    pub ip_proto: __u8,
    pub n_proto: __be16,
    pub sport: __be16,
    pub dport: __be16,
    pub __bindgen_anon_1: bpf_flow_keys__bindgen_ty_1,
    pub flags: __u32,
    pub flow_label: __be32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_flow_keys__bindgen_ty_1 {
    pub __bindgen_anon_1: bpf_flow_keys__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_flow_keys__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_flow_keys__bindgen_ty_1__bindgen_ty_1 {
    pub ipv4_src: __be32,
    pub ipv4_dst: __be32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_flow_keys__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_flow_keys__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of bpf_flow_keys__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_flow_keys__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_flow_keys__bindgen_ty_1__bindgen_ty_1::ipv4_src"]
        [::std::mem::offset_of!(bpf_flow_keys__bindgen_ty_1__bindgen_ty_1, ipv4_src) - 0usize];
    ["Offset of field: bpf_flow_keys__bindgen_ty_1__bindgen_ty_1::ipv4_dst"]
        [::std::mem::offset_of!(bpf_flow_keys__bindgen_ty_1__bindgen_ty_1, ipv4_dst) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_flow_keys__bindgen_ty_1__bindgen_ty_2 {
    pub ipv6_src: [__u32; 4usize],
    pub ipv6_dst: [__u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_flow_keys__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_flow_keys__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of bpf_flow_keys__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_flow_keys__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: bpf_flow_keys__bindgen_ty_1__bindgen_ty_2::ipv6_src"]
        [::std::mem::offset_of!(bpf_flow_keys__bindgen_ty_1__bindgen_ty_2, ipv6_src) - 0usize];
    ["Offset of field: bpf_flow_keys__bindgen_ty_1__bindgen_ty_2::ipv6_dst"]
        [::std::mem::offset_of!(bpf_flow_keys__bindgen_ty_1__bindgen_ty_2, ipv6_dst) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_flow_keys__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_flow_keys__bindgen_ty_1>() - 32usize];
    ["Alignment of bpf_flow_keys__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_flow_keys__bindgen_ty_1>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_flow_keys"][::std::mem::size_of::<bpf_flow_keys>() - 56usize];
    ["Alignment of bpf_flow_keys"][::std::mem::align_of::<bpf_flow_keys>() - 4usize];
    ["Offset of field: bpf_flow_keys::nhoff"]
        [::std::mem::offset_of!(bpf_flow_keys, nhoff) - 0usize];
    ["Offset of field: bpf_flow_keys::thoff"]
        [::std::mem::offset_of!(bpf_flow_keys, thoff) - 2usize];
    ["Offset of field: bpf_flow_keys::addr_proto"]
        [::std::mem::offset_of!(bpf_flow_keys, addr_proto) - 4usize];
    ["Offset of field: bpf_flow_keys::is_frag"]
        [::std::mem::offset_of!(bpf_flow_keys, is_frag) - 6usize];
    ["Offset of field: bpf_flow_keys::is_first_frag"]
        [::std::mem::offset_of!(bpf_flow_keys, is_first_frag) - 7usize];
    ["Offset of field: bpf_flow_keys::is_encap"]
        [::std::mem::offset_of!(bpf_flow_keys, is_encap) - 8usize];
    ["Offset of field: bpf_flow_keys::ip_proto"]
        [::std::mem::offset_of!(bpf_flow_keys, ip_proto) - 9usize];
    ["Offset of field: bpf_flow_keys::n_proto"]
        [::std::mem::offset_of!(bpf_flow_keys, n_proto) - 10usize];
    ["Offset of field: bpf_flow_keys::sport"]
        [::std::mem::offset_of!(bpf_flow_keys, sport) - 12usize];
    ["Offset of field: bpf_flow_keys::dport"]
        [::std::mem::offset_of!(bpf_flow_keys, dport) - 14usize];
    ["Offset of field: bpf_flow_keys::flags"]
        [::std::mem::offset_of!(bpf_flow_keys, flags) - 48usize];
    ["Offset of field: bpf_flow_keys::flow_label"]
        [::std::mem::offset_of!(bpf_flow_keys, flow_label) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_func_info {
    pub insn_off: __u32,
    pub type_id: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_func_info"][::std::mem::size_of::<bpf_func_info>() - 8usize];
    ["Alignment of bpf_func_info"][::std::mem::align_of::<bpf_func_info>() - 4usize];
    ["Offset of field: bpf_func_info::insn_off"]
        [::std::mem::offset_of!(bpf_func_info, insn_off) - 0usize];
    ["Offset of field: bpf_func_info::type_id"]
        [::std::mem::offset_of!(bpf_func_info, type_id) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_line_info {
    pub insn_off: __u32,
    pub file_name_off: __u32,
    pub line_off: __u32,
    pub line_col: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_line_info"][::std::mem::size_of::<bpf_line_info>() - 16usize];
    ["Alignment of bpf_line_info"][::std::mem::align_of::<bpf_line_info>() - 4usize];
    ["Offset of field: bpf_line_info::insn_off"]
        [::std::mem::offset_of!(bpf_line_info, insn_off) - 0usize];
    ["Offset of field: bpf_line_info::file_name_off"]
        [::std::mem::offset_of!(bpf_line_info, file_name_off) - 4usize];
    ["Offset of field: bpf_line_info::line_off"]
        [::std::mem::offset_of!(bpf_line_info, line_off) - 8usize];
    ["Offset of field: bpf_line_info::line_col"]
        [::std::mem::offset_of!(bpf_line_info, line_col) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_spin_lock {
    pub val: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_spin_lock"][::std::mem::size_of::<bpf_spin_lock>() - 4usize];
    ["Alignment of bpf_spin_lock"][::std::mem::align_of::<bpf_spin_lock>() - 4usize];
    ["Offset of field: bpf_spin_lock::val"][::std::mem::offset_of!(bpf_spin_lock, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_timer {
    pub __opaque: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_timer"][::std::mem::size_of::<bpf_timer>() - 16usize];
    ["Alignment of bpf_timer"][::std::mem::align_of::<bpf_timer>() - 8usize];
    ["Offset of field: bpf_timer::__opaque"][::std::mem::offset_of!(bpf_timer, __opaque) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_wq {
    pub __opaque: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_wq"][::std::mem::size_of::<bpf_wq>() - 16usize];
    ["Alignment of bpf_wq"][::std::mem::align_of::<bpf_wq>() - 8usize];
    ["Offset of field: bpf_wq::__opaque"][::std::mem::offset_of!(bpf_wq, __opaque) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_dynptr {
    pub __opaque: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_dynptr"][::std::mem::size_of::<bpf_dynptr>() - 16usize];
    ["Alignment of bpf_dynptr"][::std::mem::align_of::<bpf_dynptr>() - 8usize];
    ["Offset of field: bpf_dynptr::__opaque"]
        [::std::mem::offset_of!(bpf_dynptr, __opaque) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_list_head {
    pub __opaque: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_list_head"][::std::mem::size_of::<bpf_list_head>() - 16usize];
    ["Alignment of bpf_list_head"][::std::mem::align_of::<bpf_list_head>() - 8usize];
    ["Offset of field: bpf_list_head::__opaque"]
        [::std::mem::offset_of!(bpf_list_head, __opaque) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_list_node {
    pub __opaque: [__u64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_list_node"][::std::mem::size_of::<bpf_list_node>() - 24usize];
    ["Alignment of bpf_list_node"][::std::mem::align_of::<bpf_list_node>() - 8usize];
    ["Offset of field: bpf_list_node::__opaque"]
        [::std::mem::offset_of!(bpf_list_node, __opaque) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_rb_root {
    pub __opaque: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_rb_root"][::std::mem::size_of::<bpf_rb_root>() - 16usize];
    ["Alignment of bpf_rb_root"][::std::mem::align_of::<bpf_rb_root>() - 8usize];
    ["Offset of field: bpf_rb_root::__opaque"]
        [::std::mem::offset_of!(bpf_rb_root, __opaque) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_rb_node {
    pub __opaque: [__u64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_rb_node"][::std::mem::size_of::<bpf_rb_node>() - 32usize];
    ["Alignment of bpf_rb_node"][::std::mem::align_of::<bpf_rb_node>() - 8usize];
    ["Offset of field: bpf_rb_node::__opaque"]
        [::std::mem::offset_of!(bpf_rb_node, __opaque) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_refcount {
    pub __opaque: [__u32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_refcount"][::std::mem::size_of::<bpf_refcount>() - 4usize];
    ["Alignment of bpf_refcount"][::std::mem::align_of::<bpf_refcount>() - 4usize];
    ["Offset of field: bpf_refcount::__opaque"]
        [::std::mem::offset_of!(bpf_refcount, __opaque) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_sysctl {
    pub write: __u32,
    pub file_pos: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sysctl"][::std::mem::size_of::<bpf_sysctl>() - 8usize];
    ["Alignment of bpf_sysctl"][::std::mem::align_of::<bpf_sysctl>() - 4usize];
    ["Offset of field: bpf_sysctl::write"][::std::mem::offset_of!(bpf_sysctl, write) - 0usize];
    ["Offset of field: bpf_sysctl::file_pos"]
        [::std::mem::offset_of!(bpf_sysctl, file_pos) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sockopt {
    pub __bindgen_anon_1: bpf_sockopt__bindgen_ty_1,
    pub __bindgen_anon_2: bpf_sockopt__bindgen_ty_2,
    pub __bindgen_anon_3: bpf_sockopt__bindgen_ty_3,
    pub level: __s32,
    pub optname: __s32,
    pub optlen: __s32,
    pub retval: __s32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sockopt__bindgen_ty_1 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sockopt__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_sockopt__bindgen_ty_1>() - 8usize];
    ["Alignment of bpf_sockopt__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_sockopt__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_sockopt__bindgen_ty_1::sk"]
        [::std::mem::offset_of!(bpf_sockopt__bindgen_ty_1, sk) - 0usize];
};
impl bpf_sockopt__bindgen_ty_1 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sockopt__bindgen_ty_2 {
    pub optval: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sockopt__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_sockopt__bindgen_ty_2>() - 8usize];
    ["Alignment of bpf_sockopt__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_sockopt__bindgen_ty_2>() - 8usize];
    ["Offset of field: bpf_sockopt__bindgen_ty_2::optval"]
        [::std::mem::offset_of!(bpf_sockopt__bindgen_ty_2, optval) - 0usize];
};
impl bpf_sockopt__bindgen_ty_2 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sockopt__bindgen_ty_3 {
    pub optval_end: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sockopt__bindgen_ty_3"]
        [::std::mem::size_of::<bpf_sockopt__bindgen_ty_3>() - 8usize];
    ["Alignment of bpf_sockopt__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_sockopt__bindgen_ty_3>() - 8usize];
    ["Offset of field: bpf_sockopt__bindgen_ty_3::optval_end"]
        [::std::mem::offset_of!(bpf_sockopt__bindgen_ty_3, optval_end) - 0usize];
};
impl bpf_sockopt__bindgen_ty_3 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sockopt"][::std::mem::size_of::<bpf_sockopt>() - 40usize];
    ["Alignment of bpf_sockopt"][::std::mem::align_of::<bpf_sockopt>() - 8usize];
    ["Offset of field: bpf_sockopt::level"][::std::mem::offset_of!(bpf_sockopt, level) - 24usize];
    ["Offset of field: bpf_sockopt::optname"]
        [::std::mem::offset_of!(bpf_sockopt, optname) - 28usize];
    ["Offset of field: bpf_sockopt::optlen"][::std::mem::offset_of!(bpf_sockopt, optlen) - 32usize];
    ["Offset of field: bpf_sockopt::retval"][::std::mem::offset_of!(bpf_sockopt, retval) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_pidns_info {
    pub pid: __u32,
    pub tgid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_pidns_info"][::std::mem::size_of::<bpf_pidns_info>() - 8usize];
    ["Alignment of bpf_pidns_info"][::std::mem::align_of::<bpf_pidns_info>() - 4usize];
    ["Offset of field: bpf_pidns_info::pid"][::std::mem::offset_of!(bpf_pidns_info, pid) - 0usize];
    ["Offset of field: bpf_pidns_info::tgid"]
        [::std::mem::offset_of!(bpf_pidns_info, tgid) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_sk_lookup {
    pub __bindgen_anon_1: bpf_sk_lookup__bindgen_ty_1,
    pub family: __u32,
    pub protocol: __u32,
    pub remote_ip4: __u32,
    pub remote_ip6: [__u32; 4usize],
    pub remote_port: __be16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub local_ip4: __u32,
    pub local_ip6: [__u32; 4usize],
    pub local_port: __u32,
    pub ingress_ifindex: __u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sk_lookup__bindgen_ty_1 {
    pub __bindgen_anon_1: bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1,
    pub cookie: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1 {
    pub sk: *mut bpf_sock,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1::sk"]
        [::std::mem::offset_of!(bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1, sk) - 0usize];
};
impl bpf_sk_lookup__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sk_lookup__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_sk_lookup__bindgen_ty_1>() - 8usize];
    ["Alignment of bpf_sk_lookup__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_sk_lookup__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_sk_lookup__bindgen_ty_1::cookie"]
        [::std::mem::offset_of!(bpf_sk_lookup__bindgen_ty_1, cookie) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_sk_lookup"][::std::mem::size_of::<bpf_sk_lookup>() - 72usize];
    ["Alignment of bpf_sk_lookup"][::std::mem::align_of::<bpf_sk_lookup>() - 8usize];
    ["Offset of field: bpf_sk_lookup::family"]
        [::std::mem::offset_of!(bpf_sk_lookup, family) - 8usize];
    ["Offset of field: bpf_sk_lookup::protocol"]
        [::std::mem::offset_of!(bpf_sk_lookup, protocol) - 12usize];
    ["Offset of field: bpf_sk_lookup::remote_ip4"]
        [::std::mem::offset_of!(bpf_sk_lookup, remote_ip4) - 16usize];
    ["Offset of field: bpf_sk_lookup::remote_ip6"]
        [::std::mem::offset_of!(bpf_sk_lookup, remote_ip6) - 20usize];
    ["Offset of field: bpf_sk_lookup::remote_port"]
        [::std::mem::offset_of!(bpf_sk_lookup, remote_port) - 36usize];
    ["Offset of field: bpf_sk_lookup::local_ip4"]
        [::std::mem::offset_of!(bpf_sk_lookup, local_ip4) - 40usize];
    ["Offset of field: bpf_sk_lookup::local_ip6"]
        [::std::mem::offset_of!(bpf_sk_lookup, local_ip6) - 44usize];
    ["Offset of field: bpf_sk_lookup::local_port"]
        [::std::mem::offset_of!(bpf_sk_lookup, local_port) - 60usize];
    ["Offset of field: bpf_sk_lookup::ingress_ifindex"]
        [::std::mem::offset_of!(bpf_sk_lookup, ingress_ifindex) - 64usize];
};
impl bpf_sk_lookup {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btf_ptr {
    pub ptr: *mut ::std::os::raw::c_void,
    pub type_id: __u32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of btf_ptr"][::std::mem::size_of::<btf_ptr>() - 16usize];
    ["Alignment of btf_ptr"][::std::mem::align_of::<btf_ptr>() - 8usize];
    ["Offset of field: btf_ptr::ptr"][::std::mem::offset_of!(btf_ptr, ptr) - 0usize];
    ["Offset of field: btf_ptr::type_id"][::std::mem::offset_of!(btf_ptr, type_id) - 8usize];
    ["Offset of field: btf_ptr::flags"][::std::mem::offset_of!(btf_ptr, flags) - 12usize];
};
pub const BTF_F_COMPACT: _bindgen_ty_40 = 1;
pub const BTF_F_NONAME: _bindgen_ty_40 = 2;
pub const BTF_F_PTR_RAW: _bindgen_ty_40 = 4;
pub const BTF_F_ZERO: _bindgen_ty_40 = 8;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_BYTE_OFFSET: bpf_core_relo_kind = 0;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_BYTE_SIZE: bpf_core_relo_kind = 1;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_EXISTS: bpf_core_relo_kind = 2;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_SIGNED: bpf_core_relo_kind = 3;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_LSHIFT_U64: bpf_core_relo_kind = 4;
pub const bpf_core_relo_kind_BPF_CORE_FIELD_RSHIFT_U64: bpf_core_relo_kind = 5;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_ID_LOCAL: bpf_core_relo_kind = 6;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_ID_TARGET: bpf_core_relo_kind = 7;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_EXISTS: bpf_core_relo_kind = 8;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_SIZE: bpf_core_relo_kind = 9;
pub const bpf_core_relo_kind_BPF_CORE_ENUMVAL_EXISTS: bpf_core_relo_kind = 10;
pub const bpf_core_relo_kind_BPF_CORE_ENUMVAL_VALUE: bpf_core_relo_kind = 11;
pub const bpf_core_relo_kind_BPF_CORE_TYPE_MATCHES: bpf_core_relo_kind = 12;
pub type bpf_core_relo_kind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_core_relo {
    pub insn_off: __u32,
    pub type_id: __u32,
    pub access_str_off: __u32,
    pub kind: bpf_core_relo_kind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_core_relo"][::std::mem::size_of::<bpf_core_relo>() - 16usize];
    ["Alignment of bpf_core_relo"][::std::mem::align_of::<bpf_core_relo>() - 4usize];
    ["Offset of field: bpf_core_relo::insn_off"]
        [::std::mem::offset_of!(bpf_core_relo, insn_off) - 0usize];
    ["Offset of field: bpf_core_relo::type_id"]
        [::std::mem::offset_of!(bpf_core_relo, type_id) - 4usize];
    ["Offset of field: bpf_core_relo::access_str_off"]
        [::std::mem::offset_of!(bpf_core_relo, access_str_off) - 8usize];
    ["Offset of field: bpf_core_relo::kind"][::std::mem::offset_of!(bpf_core_relo, kind) - 12usize];
};
pub const BPF_F_TIMER_ABS: _bindgen_ty_41 = 1;
pub const BPF_F_TIMER_CPU_PIN: _bindgen_ty_41 = 2;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_iter_num {
    pub __opaque: [__u64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_iter_num"][::std::mem::size_of::<bpf_iter_num>() - 8usize];
    ["Alignment of bpf_iter_num"][::std::mem::align_of::<bpf_iter_num>() - 8usize];
    ["Offset of field: bpf_iter_num::__opaque"]
        [::std::mem::offset_of!(bpf_iter_num, __opaque) - 0usize];
};
pub const bpf_kfunc_flags_BPF_F_PAD_ZEROS: bpf_kfunc_flags = 1;
pub type bpf_kfunc_flags = ::std::os::raw::c_uint;
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_program {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_map {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btf_ext {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bpf_program__get_type(prog: *const bpf_program) -> bpf_prog_type;
}
extern "C" {
    pub fn bpf_program__get_expected_attach_type(prog: *const bpf_program) -> bpf_attach_type;
}
extern "C" {
    pub fn bpf_map__get_pin_path(map: *const bpf_map) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn btf__get_raw_data(btf: *const btf, size: *mut __u32) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn btf_ext__get_raw_data(
        btf_ext: *const btf_ext,
        size: *mut __u32,
    ) -> *const ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_object {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_object_open_opts {
    pub sz: usize,
    pub object_name: *const ::std::os::raw::c_char,
    pub relaxed_maps: bool,
    pub pin_root_path: *const ::std::os::raw::c_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub kconfig: *const ::std::os::raw::c_char,
    pub btf_custom_path: *const ::std::os::raw::c_char,
    pub kernel_log_buf: *mut ::std::os::raw::c_char,
    pub kernel_log_size: usize,
    pub kernel_log_level: __u32,
    pub bpf_token_path: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_object_open_opts"][::std::mem::size_of::<bpf_object_open_opts>() - 88usize];
    ["Alignment of bpf_object_open_opts"][::std::mem::align_of::<bpf_object_open_opts>() - 8usize];
    ["Offset of field: bpf_object_open_opts::sz"]
        [::std::mem::offset_of!(bpf_object_open_opts, sz) - 0usize];
    ["Offset of field: bpf_object_open_opts::object_name"]
        [::std::mem::offset_of!(bpf_object_open_opts, object_name) - 8usize];
    ["Offset of field: bpf_object_open_opts::relaxed_maps"]
        [::std::mem::offset_of!(bpf_object_open_opts, relaxed_maps) - 16usize];
    ["Offset of field: bpf_object_open_opts::pin_root_path"]
        [::std::mem::offset_of!(bpf_object_open_opts, pin_root_path) - 24usize];
    ["Offset of field: bpf_object_open_opts::kconfig"]
        [::std::mem::offset_of!(bpf_object_open_opts, kconfig) - 40usize];
    ["Offset of field: bpf_object_open_opts::btf_custom_path"]
        [::std::mem::offset_of!(bpf_object_open_opts, btf_custom_path) - 48usize];
    ["Offset of field: bpf_object_open_opts::kernel_log_buf"]
        [::std::mem::offset_of!(bpf_object_open_opts, kernel_log_buf) - 56usize];
    ["Offset of field: bpf_object_open_opts::kernel_log_size"]
        [::std::mem::offset_of!(bpf_object_open_opts, kernel_log_size) - 64usize];
    ["Offset of field: bpf_object_open_opts::kernel_log_level"]
        [::std::mem::offset_of!(bpf_object_open_opts, kernel_log_level) - 72usize];
    ["Offset of field: bpf_object_open_opts::bpf_token_path"]
        [::std::mem::offset_of!(bpf_object_open_opts, bpf_token_path) - 80usize];
};
impl bpf_object_open_opts {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[doc = " @brief **bpf_object__open()** creates a bpf_object by opening\n the BPF ELF object file pointed to by the passed path and loading it\n into memory.\n @param path BPF object file path.\n @return pointer to the new bpf_object; or NULL is returned on error,\n error code is stored in errno"]
    pub fn bpf_object__open(path: *const ::std::os::raw::c_char) -> *mut bpf_object;
}
extern "C" {
    #[doc = " @brief **bpf_object__open_file()** creates a bpf_object by opening\n the BPF ELF object file pointed to by the passed path and loading it\n into memory.\n @param path BPF object file path\n @param opts options for how to load the bpf object, this parameter is\n optional and can be set to NULL\n @return pointer to the new bpf_object; or NULL is returned on error,\n error code is stored in errno"]
    pub fn bpf_object__open_file(
        path: *const ::std::os::raw::c_char,
        opts: *const bpf_object_open_opts,
    ) -> *mut bpf_object;
}
extern "C" {
    #[doc = " @brief **bpf_object__open_mem()** creates a bpf_object by reading\n the BPF objects raw bytes from a memory buffer containing a valid\n BPF ELF object file.\n @param obj_buf pointer to the buffer containing ELF file bytes\n @param obj_buf_sz number of bytes in the buffer\n @param opts options for how to load the bpf object\n @return pointer to the new bpf_object; or NULL is returned on error,\n error code is stored in errno"]
    pub fn bpf_object__open_mem(
        obj_buf: *const ::std::os::raw::c_void,
        obj_buf_sz: usize,
        opts: *const bpf_object_open_opts,
    ) -> *mut bpf_object;
}
extern "C" {
    #[doc = " @brief **bpf_object__load()** loads BPF object into kernel.\n @param obj Pointer to a valid BPF object instance returned by\n **bpf_object__open*()** APIs\n @return 0, on success; negative error code, otherwise, error code is\n stored in errno"]
    pub fn bpf_object__load(obj: *mut bpf_object) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_object__close()** closes a BPF object and releases all\n resources.\n @param obj Pointer to a valid BPF object"]
    pub fn bpf_object__close(obj: *mut bpf_object);
}
extern "C" {
    #[doc = " @brief **bpf_object__pin_maps()** pins each map contained within\n the BPF object at the passed directory.\n @param obj Pointer to a valid BPF object\n @param path A directory where maps should be pinned.\n @return 0, on success; negative error code, otherwise\n\n If `path` is NULL `bpf_map__pin` (which is being used on each map)\n will use the pin_path attribute of each map. In this case, maps that\n don't have a pin_path set will be ignored."]
    pub fn bpf_object__pin_maps(
        obj: *mut bpf_object,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_object__unpin_maps()** unpins each map contained within\n the BPF object found in the passed directory.\n @param obj Pointer to a valid BPF object\n @param path A directory where pinned maps should be searched for.\n @return 0, on success; negative error code, otherwise\n\n If `path` is NULL `bpf_map__unpin` (which is being used on each map)\n will use the pin_path attribute of each map. In this case, maps that\n don't have a pin_path set will be ignored."]
    pub fn bpf_object__unpin_maps(
        obj: *mut bpf_object,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__pin_programs(
        obj: *mut bpf_object,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__unpin_programs(
        obj: *mut bpf_object,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__pin(
        object: *mut bpf_object,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__unpin(
        object: *mut bpf_object,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__name(obj: *const bpf_object) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bpf_object__kversion(obj: *const bpf_object) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn bpf_object__set_kversion(
        obj: *mut bpf_object,
        kern_version: __u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__btf(obj: *const bpf_object) -> *mut btf;
}
extern "C" {
    pub fn bpf_object__btf_fd(obj: *const bpf_object) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__find_program_by_name(
        obj: *const bpf_object,
        name: *const ::std::os::raw::c_char,
    ) -> *mut bpf_program;
}
extern "C" {
    pub fn bpf_object__next_program(
        obj: *const bpf_object,
        prog: *mut bpf_program,
    ) -> *mut bpf_program;
}
extern "C" {
    pub fn bpf_object__prev_program(
        obj: *const bpf_object,
        prog: *mut bpf_program,
    ) -> *mut bpf_program;
}
extern "C" {
    pub fn bpf_program__set_ifindex(prog: *mut bpf_program, ifindex: __u32);
}
extern "C" {
    pub fn bpf_program__name(prog: *const bpf_program) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bpf_program__section_name(prog: *const bpf_program) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bpf_program__autoload(prog: *const bpf_program) -> bool;
}
extern "C" {
    pub fn bpf_program__set_autoload(
        prog: *mut bpf_program,
        autoload: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_program__autoattach(prog: *const bpf_program) -> bool;
}
extern "C" {
    pub fn bpf_program__set_autoattach(prog: *mut bpf_program, autoattach: bool);
}
extern "C" {
    #[doc = " @brief **bpf_program__insns()** gives read-only access to BPF program's\n underlying BPF instructions.\n @param prog BPF program for which to return instructions\n @return a pointer to an array of BPF instructions that belong to the\n specified BPF program\n\n Returned pointer is always valid and not NULL. Number of `struct bpf_insn`\n pointed to can be fetched using **bpf_program__insn_cnt()** API.\n\n Keep in mind, libbpf can modify and append/delete BPF program's\n instructions as it processes BPF object file and prepares everything for\n uploading into the kernel. So depending on the point in BPF object\n lifetime, **bpf_program__insns()** can return different sets of\n instructions. As an example, during BPF object load phase BPF program\n instructions will be CO-RE-relocated, BPF subprograms instructions will be\n appended, ldimm64 instructions will have FDs embedded, etc. So instructions\n returned before **bpf_object__load()** and after it might be quite\n different."]
    pub fn bpf_program__insns(prog: *const bpf_program) -> *const bpf_insn;
}
extern "C" {
    #[doc = " @brief **bpf_program__set_insns()** can set BPF program's underlying\n BPF instructions.\n\n WARNING: This is a very advanced libbpf API and users need to know\n what they are doing. This should be used from prog_prepare_load_fn\n callback only.\n\n @param prog BPF program for which to return instructions\n @param new_insns a pointer to an array of BPF instructions\n @param new_insn_cnt number of `struct bpf_insn`'s that form\n specified BPF program\n @return 0, on success; negative error code, otherwise"]
    pub fn bpf_program__set_insns(
        prog: *mut bpf_program,
        new_insns: *mut bpf_insn,
        new_insn_cnt: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_program__insn_cnt()** returns number of `struct bpf_insn`'s\n that form specified BPF program.\n @param prog BPF program for which to return number of BPF instructions\n\n See **bpf_program__insns()** documentation for notes on how libbpf can\n change instructions and their count during different phases of\n **bpf_object** lifetime."]
    pub fn bpf_program__insn_cnt(prog: *const bpf_program) -> usize;
}
extern "C" {
    pub fn bpf_program__fd(prog: *const bpf_program) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_program__pin()** pins the BPF program to a file\n in the BPF FS specified by a path. This increments the programs\n reference count, allowing it to stay loaded after the process\n which loaded it has exited.\n\n @param prog BPF program to pin, must already be loaded\n @param path file path in a BPF file system\n @return 0, on success; negative error code, otherwise"]
    pub fn bpf_program__pin(
        prog: *mut bpf_program,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_program__unpin()** unpins the BPF program from a file\n in the BPFFS specified by a path. This decrements the programs\n reference count.\n\n The file pinning the BPF program can also be unlinked by a different\n process in which case this function will return an error.\n\n @param prog BPF program to unpin\n @param path file path to the pin in a BPF file system\n @return 0, on success; negative error code, otherwise"]
    pub fn bpf_program__unpin(
        prog: *mut bpf_program,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_program__unload(prog: *mut bpf_program);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bpf_link__open(path: *const ::std::os::raw::c_char) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_link__fd(link: *const bpf_link) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_link__pin_path(link: *const bpf_link) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief **bpf_link__pin()** pins the BPF link to a file\n in the BPF FS specified by a path. This increments the links\n reference count, allowing it to stay loaded after the process\n which loaded it has exited.\n\n @param link BPF link to pin, must already be loaded\n @param path file path in a BPF file system\n @return 0, on success; negative error code, otherwise"]
    pub fn bpf_link__pin(
        link: *mut bpf_link,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_link__unpin()** unpins the BPF link from a file\n in the BPFFS specified by a path. This decrements the links\n reference count.\n\n The file pinning the BPF link can also be unlinked by a different\n process in which case this function will return an error.\n\n @param prog BPF program to unpin\n @param path file path to the pin in a BPF file system\n @return 0, on success; negative error code, otherwise"]
    pub fn bpf_link__unpin(link: *mut bpf_link) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_link__update_program(
        link: *mut bpf_link,
        prog: *mut bpf_program,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_link__disconnect(link: *mut bpf_link);
}
extern "C" {
    pub fn bpf_link__detach(link: *mut bpf_link) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_link__destroy(link: *mut bpf_link) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_program__attach()** is a generic function for attaching\n a BPF program based on auto-detection of program type, attach type,\n and extra paremeters, where applicable.\n\n @param prog BPF program to attach\n @return Reference to the newly created BPF link; or NULL is returned on error,\n error code is stored in errno\n\n This is supported for:\n   - kprobe/kretprobe (depends on SEC() definition)\n   - uprobe/uretprobe (depends on SEC() definition)\n   - tracepoint\n   - raw tracepoint\n   - tracing programs (typed raw TP/fentry/fexit/fmod_ret)"]
    pub fn bpf_program__attach(prog: *const bpf_program) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_perf_event_opts {
    pub sz: usize,
    pub bpf_cookie: __u64,
    pub force_ioctl_attach: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_perf_event_opts"][::std::mem::size_of::<bpf_perf_event_opts>() - 24usize];
    ["Alignment of bpf_perf_event_opts"][::std::mem::align_of::<bpf_perf_event_opts>() - 8usize];
    ["Offset of field: bpf_perf_event_opts::sz"]
        [::std::mem::offset_of!(bpf_perf_event_opts, sz) - 0usize];
    ["Offset of field: bpf_perf_event_opts::bpf_cookie"]
        [::std::mem::offset_of!(bpf_perf_event_opts, bpf_cookie) - 8usize];
    ["Offset of field: bpf_perf_event_opts::force_ioctl_attach"]
        [::std::mem::offset_of!(bpf_perf_event_opts, force_ioctl_attach) - 16usize];
};
extern "C" {
    pub fn bpf_program__attach_perf_event(
        prog: *const bpf_program,
        pfd: ::std::os::raw::c_int,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_perf_event_opts(
        prog: *const bpf_program,
        pfd: ::std::os::raw::c_int,
        opts: *const bpf_perf_event_opts,
    ) -> *mut bpf_link;
}
pub const probe_attach_mode_PROBE_ATTACH_MODE_DEFAULT: probe_attach_mode = 0;
pub const probe_attach_mode_PROBE_ATTACH_MODE_LEGACY: probe_attach_mode = 1;
pub const probe_attach_mode_PROBE_ATTACH_MODE_PERF: probe_attach_mode = 2;
pub const probe_attach_mode_PROBE_ATTACH_MODE_LINK: probe_attach_mode = 3;
#[doc = " enum probe_attach_mode - the mode to attach kprobe/uprobe\n\n force libbpf to attach kprobe/uprobe in specific mode, -ENOTSUP will\n be returned if it is not supported by the kernel."]
pub type probe_attach_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_kprobe_opts {
    pub sz: usize,
    pub bpf_cookie: __u64,
    pub offset: usize,
    pub retprobe: bool,
    pub attach_mode: probe_attach_mode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_kprobe_opts"][::std::mem::size_of::<bpf_kprobe_opts>() - 32usize];
    ["Alignment of bpf_kprobe_opts"][::std::mem::align_of::<bpf_kprobe_opts>() - 8usize];
    ["Offset of field: bpf_kprobe_opts::sz"][::std::mem::offset_of!(bpf_kprobe_opts, sz) - 0usize];
    ["Offset of field: bpf_kprobe_opts::bpf_cookie"]
        [::std::mem::offset_of!(bpf_kprobe_opts, bpf_cookie) - 8usize];
    ["Offset of field: bpf_kprobe_opts::offset"]
        [::std::mem::offset_of!(bpf_kprobe_opts, offset) - 16usize];
    ["Offset of field: bpf_kprobe_opts::retprobe"]
        [::std::mem::offset_of!(bpf_kprobe_opts, retprobe) - 24usize];
    ["Offset of field: bpf_kprobe_opts::attach_mode"]
        [::std::mem::offset_of!(bpf_kprobe_opts, attach_mode) - 28usize];
};
extern "C" {
    pub fn bpf_program__attach_kprobe(
        prog: *const bpf_program,
        retprobe: bool,
        func_name: *const ::std::os::raw::c_char,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_kprobe_opts(
        prog: *const bpf_program,
        func_name: *const ::std::os::raw::c_char,
        opts: *const bpf_kprobe_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_kprobe_multi_opts {
    pub sz: usize,
    pub syms: *mut *const ::std::os::raw::c_char,
    pub addrs: *const ::std::os::raw::c_ulong,
    pub cookies: *const __u64,
    pub cnt: usize,
    pub retprobe: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_kprobe_multi_opts"][::std::mem::size_of::<bpf_kprobe_multi_opts>() - 48usize];
    ["Alignment of bpf_kprobe_multi_opts"]
        [::std::mem::align_of::<bpf_kprobe_multi_opts>() - 8usize];
    ["Offset of field: bpf_kprobe_multi_opts::sz"]
        [::std::mem::offset_of!(bpf_kprobe_multi_opts, sz) - 0usize];
    ["Offset of field: bpf_kprobe_multi_opts::syms"]
        [::std::mem::offset_of!(bpf_kprobe_multi_opts, syms) - 8usize];
    ["Offset of field: bpf_kprobe_multi_opts::addrs"]
        [::std::mem::offset_of!(bpf_kprobe_multi_opts, addrs) - 16usize];
    ["Offset of field: bpf_kprobe_multi_opts::cookies"]
        [::std::mem::offset_of!(bpf_kprobe_multi_opts, cookies) - 24usize];
    ["Offset of field: bpf_kprobe_multi_opts::cnt"]
        [::std::mem::offset_of!(bpf_kprobe_multi_opts, cnt) - 32usize];
    ["Offset of field: bpf_kprobe_multi_opts::retprobe"]
        [::std::mem::offset_of!(bpf_kprobe_multi_opts, retprobe) - 40usize];
};
extern "C" {
    pub fn bpf_program__attach_kprobe_multi_opts(
        prog: *const bpf_program,
        pattern: *const ::std::os::raw::c_char,
        opts: *const bpf_kprobe_multi_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_uprobe_multi_opts {
    pub sz: usize,
    pub syms: *mut *const ::std::os::raw::c_char,
    pub offsets: *const ::std::os::raw::c_ulong,
    pub ref_ctr_offsets: *const ::std::os::raw::c_ulong,
    pub cookies: *const __u64,
    pub cnt: usize,
    pub retprobe: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_uprobe_multi_opts"][::std::mem::size_of::<bpf_uprobe_multi_opts>() - 56usize];
    ["Alignment of bpf_uprobe_multi_opts"]
        [::std::mem::align_of::<bpf_uprobe_multi_opts>() - 8usize];
    ["Offset of field: bpf_uprobe_multi_opts::sz"]
        [::std::mem::offset_of!(bpf_uprobe_multi_opts, sz) - 0usize];
    ["Offset of field: bpf_uprobe_multi_opts::syms"]
        [::std::mem::offset_of!(bpf_uprobe_multi_opts, syms) - 8usize];
    ["Offset of field: bpf_uprobe_multi_opts::offsets"]
        [::std::mem::offset_of!(bpf_uprobe_multi_opts, offsets) - 16usize];
    ["Offset of field: bpf_uprobe_multi_opts::ref_ctr_offsets"]
        [::std::mem::offset_of!(bpf_uprobe_multi_opts, ref_ctr_offsets) - 24usize];
    ["Offset of field: bpf_uprobe_multi_opts::cookies"]
        [::std::mem::offset_of!(bpf_uprobe_multi_opts, cookies) - 32usize];
    ["Offset of field: bpf_uprobe_multi_opts::cnt"]
        [::std::mem::offset_of!(bpf_uprobe_multi_opts, cnt) - 40usize];
    ["Offset of field: bpf_uprobe_multi_opts::retprobe"]
        [::std::mem::offset_of!(bpf_uprobe_multi_opts, retprobe) - 48usize];
};
extern "C" {
    #[doc = " @brief **bpf_program__attach_uprobe_multi()** attaches a BPF program\n to multiple uprobes with uprobe_multi link.\n\n User can specify 2 mutually exclusive set of inputs:\n\n   1) use only path/func_pattern/pid arguments\n\n   2) use path/pid with allowed combinations of\n      syms/offsets/ref_ctr_offsets/cookies/cnt\n\n      - syms and offsets are mutually exclusive\n      - ref_ctr_offsets and cookies are optional\n\n\n @param prog BPF program to attach\n @param pid Process ID to attach the uprobe to, 0 for self (own process),\n -1 for all processes\n @param binary_path Path to binary\n @param func_pattern Regular expression to specify functions to attach\n BPF program to\n @param opts Additional options (see **struct bpf_uprobe_multi_opts**)\n @return 0, on success; negative error code, otherwise"]
    pub fn bpf_program__attach_uprobe_multi(
        prog: *const bpf_program,
        pid: pid_t,
        binary_path: *const ::std::os::raw::c_char,
        func_pattern: *const ::std::os::raw::c_char,
        opts: *const bpf_uprobe_multi_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_ksyscall_opts {
    pub sz: usize,
    pub bpf_cookie: __u64,
    pub retprobe: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_ksyscall_opts"][::std::mem::size_of::<bpf_ksyscall_opts>() - 24usize];
    ["Alignment of bpf_ksyscall_opts"][::std::mem::align_of::<bpf_ksyscall_opts>() - 8usize];
    ["Offset of field: bpf_ksyscall_opts::sz"]
        [::std::mem::offset_of!(bpf_ksyscall_opts, sz) - 0usize];
    ["Offset of field: bpf_ksyscall_opts::bpf_cookie"]
        [::std::mem::offset_of!(bpf_ksyscall_opts, bpf_cookie) - 8usize];
    ["Offset of field: bpf_ksyscall_opts::retprobe"]
        [::std::mem::offset_of!(bpf_ksyscall_opts, retprobe) - 16usize];
};
extern "C" {
    #[doc = " @brief **bpf_program__attach_ksyscall()** attaches a BPF program\n to kernel syscall handler of a specified syscall. Optionally it's possible\n to request to install retprobe that will be triggered at syscall exit. It's\n also possible to associate BPF cookie (though options).\n\n Libbpf automatically will determine correct full kernel function name,\n which depending on system architecture and kernel version/configuration\n could be of the form __<arch>_sys_<syscall> or __se_sys_<syscall>, and will\n attach specified program using kprobe/kretprobe mechanism.\n\n **bpf_program__attach_ksyscall()** is an API counterpart of declarative\n **SEC(\"ksyscall/<syscall>\")** annotation of BPF programs.\n\n At the moment **SEC(\"ksyscall\")** and **bpf_program__attach_ksyscall()** do\n not handle all the calling convention quirks for mmap(), clone() and compat\n syscalls. It also only attaches to \"native\" syscall interfaces. If host\n system supports compat syscalls or defines 32-bit syscalls in 64-bit\n kernel, such syscall interfaces won't be attached to by libbpf.\n\n These limitations may or may not change in the future. Therefore it is\n recommended to use SEC(\"kprobe\") for these syscalls or if working with\n compat and 32-bit interfaces is required.\n\n @param prog BPF program to attach\n @param syscall_name Symbolic name of the syscall (e.g., \"bpf\")\n @param opts Additional options (see **struct bpf_ksyscall_opts**)\n @return Reference to the newly created BPF link; or NULL is returned on\n error, error code is stored in errno"]
    pub fn bpf_program__attach_ksyscall(
        prog: *const bpf_program,
        syscall_name: *const ::std::os::raw::c_char,
        opts: *const bpf_ksyscall_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_uprobe_opts {
    pub sz: usize,
    pub ref_ctr_offset: usize,
    pub bpf_cookie: __u64,
    pub retprobe: bool,
    pub func_name: *const ::std::os::raw::c_char,
    pub attach_mode: probe_attach_mode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_uprobe_opts"][::std::mem::size_of::<bpf_uprobe_opts>() - 48usize];
    ["Alignment of bpf_uprobe_opts"][::std::mem::align_of::<bpf_uprobe_opts>() - 8usize];
    ["Offset of field: bpf_uprobe_opts::sz"][::std::mem::offset_of!(bpf_uprobe_opts, sz) - 0usize];
    ["Offset of field: bpf_uprobe_opts::ref_ctr_offset"]
        [::std::mem::offset_of!(bpf_uprobe_opts, ref_ctr_offset) - 8usize];
    ["Offset of field: bpf_uprobe_opts::bpf_cookie"]
        [::std::mem::offset_of!(bpf_uprobe_opts, bpf_cookie) - 16usize];
    ["Offset of field: bpf_uprobe_opts::retprobe"]
        [::std::mem::offset_of!(bpf_uprobe_opts, retprobe) - 24usize];
    ["Offset of field: bpf_uprobe_opts::func_name"]
        [::std::mem::offset_of!(bpf_uprobe_opts, func_name) - 32usize];
    ["Offset of field: bpf_uprobe_opts::attach_mode"]
        [::std::mem::offset_of!(bpf_uprobe_opts, attach_mode) - 40usize];
};
extern "C" {
    #[doc = " @brief **bpf_program__attach_uprobe()** attaches a BPF program\n to the userspace function which is found by binary path and\n offset. You can optionally specify a particular proccess to attach\n to. You can also optionally attach the program to the function\n exit instead of entry.\n\n @param prog BPF program to attach\n @param retprobe Attach to function exit\n @param pid Process ID to attach the uprobe to, 0 for self (own process),\n -1 for all processes\n @param binary_path Path to binary that contains the function symbol\n @param func_offset Offset within the binary of the function symbol\n @return Reference to the newly created BPF link; or NULL is returned on error,\n error code is stored in errno"]
    pub fn bpf_program__attach_uprobe(
        prog: *const bpf_program,
        retprobe: bool,
        pid: pid_t,
        binary_path: *const ::std::os::raw::c_char,
        func_offset: usize,
    ) -> *mut bpf_link;
}
extern "C" {
    #[doc = " @brief **bpf_program__attach_uprobe_opts()** is just like\n bpf_program__attach_uprobe() except with a options struct\n for various configurations.\n\n @param prog BPF program to attach\n @param pid Process ID to attach the uprobe to, 0 for self (own process),\n -1 for all processes\n @param binary_path Path to binary that contains the function symbol\n @param func_offset Offset within the binary of the function symbol\n @param opts Options for altering program attachment\n @return Reference to the newly created BPF link; or NULL is returned on error,\n error code is stored in errno"]
    pub fn bpf_program__attach_uprobe_opts(
        prog: *const bpf_program,
        pid: pid_t,
        binary_path: *const ::std::os::raw::c_char,
        func_offset: usize,
        opts: *const bpf_uprobe_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_usdt_opts {
    pub sz: usize,
    pub usdt_cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_usdt_opts"][::std::mem::size_of::<bpf_usdt_opts>() - 16usize];
    ["Alignment of bpf_usdt_opts"][::std::mem::align_of::<bpf_usdt_opts>() - 8usize];
    ["Offset of field: bpf_usdt_opts::sz"][::std::mem::offset_of!(bpf_usdt_opts, sz) - 0usize];
    ["Offset of field: bpf_usdt_opts::usdt_cookie"]
        [::std::mem::offset_of!(bpf_usdt_opts, usdt_cookie) - 8usize];
};
extern "C" {
    #[doc = " @brief **bpf_program__attach_usdt()** is just like\n bpf_program__attach_uprobe_opts() except it covers USDT (User-space\n Statically Defined Tracepoint) attachment, instead of attaching to\n user-space function entry or exit.\n\n @param prog BPF program to attach\n @param pid Process ID to attach the uprobe to, 0 for self (own process),\n -1 for all processes\n @param binary_path Path to binary that contains provided USDT probe\n @param usdt_provider USDT provider name\n @param usdt_name USDT probe name\n @param opts Options for altering program attachment\n @return Reference to the newly created BPF link; or NULL is returned on error,\n error code is stored in errno"]
    pub fn bpf_program__attach_usdt(
        prog: *const bpf_program,
        pid: pid_t,
        binary_path: *const ::std::os::raw::c_char,
        usdt_provider: *const ::std::os::raw::c_char,
        usdt_name: *const ::std::os::raw::c_char,
        opts: *const bpf_usdt_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_tracepoint_opts {
    pub sz: usize,
    pub bpf_cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_tracepoint_opts"][::std::mem::size_of::<bpf_tracepoint_opts>() - 16usize];
    ["Alignment of bpf_tracepoint_opts"][::std::mem::align_of::<bpf_tracepoint_opts>() - 8usize];
    ["Offset of field: bpf_tracepoint_opts::sz"]
        [::std::mem::offset_of!(bpf_tracepoint_opts, sz) - 0usize];
    ["Offset of field: bpf_tracepoint_opts::bpf_cookie"]
        [::std::mem::offset_of!(bpf_tracepoint_opts, bpf_cookie) - 8usize];
};
extern "C" {
    pub fn bpf_program__attach_tracepoint(
        prog: *const bpf_program,
        tp_category: *const ::std::os::raw::c_char,
        tp_name: *const ::std::os::raw::c_char,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_tracepoint_opts(
        prog: *const bpf_program,
        tp_category: *const ::std::os::raw::c_char,
        tp_name: *const ::std::os::raw::c_char,
        opts: *const bpf_tracepoint_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_raw_tracepoint_opts {
    pub sz: usize,
    pub cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_raw_tracepoint_opts"][::std::mem::size_of::<bpf_raw_tracepoint_opts>() - 16usize];
    ["Alignment of bpf_raw_tracepoint_opts"]
        [::std::mem::align_of::<bpf_raw_tracepoint_opts>() - 8usize];
    ["Offset of field: bpf_raw_tracepoint_opts::sz"]
        [::std::mem::offset_of!(bpf_raw_tracepoint_opts, sz) - 0usize];
    ["Offset of field: bpf_raw_tracepoint_opts::cookie"]
        [::std::mem::offset_of!(bpf_raw_tracepoint_opts, cookie) - 8usize];
};
extern "C" {
    pub fn bpf_program__attach_raw_tracepoint(
        prog: *const bpf_program,
        tp_name: *const ::std::os::raw::c_char,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_raw_tracepoint_opts(
        prog: *const bpf_program,
        tp_name: *const ::std::os::raw::c_char,
        opts: *mut bpf_raw_tracepoint_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_trace_opts {
    pub sz: usize,
    pub cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_trace_opts"][::std::mem::size_of::<bpf_trace_opts>() - 16usize];
    ["Alignment of bpf_trace_opts"][::std::mem::align_of::<bpf_trace_opts>() - 8usize];
    ["Offset of field: bpf_trace_opts::sz"][::std::mem::offset_of!(bpf_trace_opts, sz) - 0usize];
    ["Offset of field: bpf_trace_opts::cookie"]
        [::std::mem::offset_of!(bpf_trace_opts, cookie) - 8usize];
};
extern "C" {
    pub fn bpf_program__attach_trace(prog: *const bpf_program) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_trace_opts(
        prog: *const bpf_program,
        opts: *const bpf_trace_opts,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_lsm(prog: *const bpf_program) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_cgroup(
        prog: *const bpf_program,
        cgroup_fd: ::std::os::raw::c_int,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_netns(
        prog: *const bpf_program,
        netns_fd: ::std::os::raw::c_int,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_xdp(
        prog: *const bpf_program,
        ifindex: ::std::os::raw::c_int,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__attach_freplace(
        prog: *const bpf_program,
        target_fd: ::std::os::raw::c_int,
        attach_func_name: *const ::std::os::raw::c_char,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_netfilter_opts {
    pub sz: usize,
    pub pf: __u32,
    pub hooknum: __u32,
    pub priority: __s32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_netfilter_opts"][::std::mem::size_of::<bpf_netfilter_opts>() - 24usize];
    ["Alignment of bpf_netfilter_opts"][::std::mem::align_of::<bpf_netfilter_opts>() - 8usize];
    ["Offset of field: bpf_netfilter_opts::sz"]
        [::std::mem::offset_of!(bpf_netfilter_opts, sz) - 0usize];
    ["Offset of field: bpf_netfilter_opts::pf"]
        [::std::mem::offset_of!(bpf_netfilter_opts, pf) - 8usize];
    ["Offset of field: bpf_netfilter_opts::hooknum"]
        [::std::mem::offset_of!(bpf_netfilter_opts, hooknum) - 12usize];
    ["Offset of field: bpf_netfilter_opts::priority"]
        [::std::mem::offset_of!(bpf_netfilter_opts, priority) - 16usize];
    ["Offset of field: bpf_netfilter_opts::flags"]
        [::std::mem::offset_of!(bpf_netfilter_opts, flags) - 20usize];
};
extern "C" {
    pub fn bpf_program__attach_netfilter(
        prog: *const bpf_program,
        opts: *const bpf_netfilter_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_tcx_opts {
    pub sz: usize,
    pub flags: __u32,
    pub relative_fd: __u32,
    pub relative_id: __u32,
    pub expected_revision: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_tcx_opts"][::std::mem::size_of::<bpf_tcx_opts>() - 32usize];
    ["Alignment of bpf_tcx_opts"][::std::mem::align_of::<bpf_tcx_opts>() - 8usize];
    ["Offset of field: bpf_tcx_opts::sz"][::std::mem::offset_of!(bpf_tcx_opts, sz) - 0usize];
    ["Offset of field: bpf_tcx_opts::flags"][::std::mem::offset_of!(bpf_tcx_opts, flags) - 8usize];
    ["Offset of field: bpf_tcx_opts::relative_fd"]
        [::std::mem::offset_of!(bpf_tcx_opts, relative_fd) - 12usize];
    ["Offset of field: bpf_tcx_opts::relative_id"]
        [::std::mem::offset_of!(bpf_tcx_opts, relative_id) - 16usize];
    ["Offset of field: bpf_tcx_opts::expected_revision"]
        [::std::mem::offset_of!(bpf_tcx_opts, expected_revision) - 24usize];
};
extern "C" {
    pub fn bpf_program__attach_tcx(
        prog: *const bpf_program,
        ifindex: ::std::os::raw::c_int,
        opts: *const bpf_tcx_opts,
    ) -> *mut bpf_link;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_netkit_opts {
    pub sz: usize,
    pub flags: __u32,
    pub relative_fd: __u32,
    pub relative_id: __u32,
    pub expected_revision: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_netkit_opts"][::std::mem::size_of::<bpf_netkit_opts>() - 32usize];
    ["Alignment of bpf_netkit_opts"][::std::mem::align_of::<bpf_netkit_opts>() - 8usize];
    ["Offset of field: bpf_netkit_opts::sz"][::std::mem::offset_of!(bpf_netkit_opts, sz) - 0usize];
    ["Offset of field: bpf_netkit_opts::flags"]
        [::std::mem::offset_of!(bpf_netkit_opts, flags) - 8usize];
    ["Offset of field: bpf_netkit_opts::relative_fd"]
        [::std::mem::offset_of!(bpf_netkit_opts, relative_fd) - 12usize];
    ["Offset of field: bpf_netkit_opts::relative_id"]
        [::std::mem::offset_of!(bpf_netkit_opts, relative_id) - 16usize];
    ["Offset of field: bpf_netkit_opts::expected_revision"]
        [::std::mem::offset_of!(bpf_netkit_opts, expected_revision) - 24usize];
};
extern "C" {
    pub fn bpf_program__attach_netkit(
        prog: *const bpf_program,
        ifindex: ::std::os::raw::c_int,
        opts: *const bpf_netkit_opts,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_map__attach_struct_ops(map: *const bpf_map) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_link__update_map(link: *mut bpf_link, map: *const bpf_map) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_iter_attach_opts {
    pub sz: usize,
    pub link_info: *mut bpf_iter_link_info,
    pub link_info_len: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_iter_attach_opts"][::std::mem::size_of::<bpf_iter_attach_opts>() - 24usize];
    ["Alignment of bpf_iter_attach_opts"][::std::mem::align_of::<bpf_iter_attach_opts>() - 8usize];
    ["Offset of field: bpf_iter_attach_opts::sz"]
        [::std::mem::offset_of!(bpf_iter_attach_opts, sz) - 0usize];
    ["Offset of field: bpf_iter_attach_opts::link_info"]
        [::std::mem::offset_of!(bpf_iter_attach_opts, link_info) - 8usize];
    ["Offset of field: bpf_iter_attach_opts::link_info_len"]
        [::std::mem::offset_of!(bpf_iter_attach_opts, link_info_len) - 16usize];
};
extern "C" {
    pub fn bpf_program__attach_iter(
        prog: *const bpf_program,
        opts: *const bpf_iter_attach_opts,
    ) -> *mut bpf_link;
}
extern "C" {
    pub fn bpf_program__type(prog: *const bpf_program) -> bpf_prog_type;
}
extern "C" {
    #[doc = " @brief **bpf_program__set_type()** sets the program\n type of the passed BPF program.\n @param prog BPF program to set the program type for\n @param type program type to set the BPF map to have\n @return error code; or 0 if no error. An error occurs\n if the object is already loaded.\n\n This must be called before the BPF object is loaded,\n otherwise it has no effect and an error is returned."]
    pub fn bpf_program__set_type(
        prog: *mut bpf_program,
        type_: bpf_prog_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_program__expected_attach_type(prog: *const bpf_program) -> bpf_attach_type;
}
extern "C" {
    #[doc = " @brief **bpf_program__set_expected_attach_type()** sets the\n attach type of the passed BPF program. This is used for\n auto-detection of attachment when programs are loaded.\n @param prog BPF program to set the attach type for\n @param type attach type to set the BPF map to have\n @return error code; or 0 if no error. An error occurs\n if the object is already loaded.\n\n This must be called before the BPF object is loaded,\n otherwise it has no effect and an error is returned."]
    pub fn bpf_program__set_expected_attach_type(
        prog: *mut bpf_program,
        type_: bpf_attach_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_program__flags(prog: *const bpf_program) -> __u32;
}
extern "C" {
    pub fn bpf_program__set_flags(prog: *mut bpf_program, flags: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_program__log_level(prog: *const bpf_program) -> __u32;
}
extern "C" {
    pub fn bpf_program__set_log_level(
        prog: *mut bpf_program,
        log_level: __u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_program__log_buf(
        prog: *const bpf_program,
        log_size: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bpf_program__set_log_buf(
        prog: *mut bpf_program,
        log_buf: *mut ::std::os::raw::c_char,
        log_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_program__set_attach_target()** sets BTF-based attach target\n for supported BPF program types:\n   - BTF-aware raw tracepoints (tp_btf);\n   - fentry/fexit/fmod_ret;\n   - lsm;\n   - freplace.\n @param prog BPF program to set the attach type for\n @param type attach type to set the BPF map to have\n @return error code; or 0 if no error occurred."]
    pub fn bpf_program__set_attach_target(
        prog: *mut bpf_program,
        attach_prog_fd: ::std::os::raw::c_int,
        attach_func_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_object__find_map_by_name()** returns BPF map of\n the given name, if it exists within the passed BPF object\n @param obj BPF object\n @param name name of the BPF map\n @return BPF map instance, if such map exists within the BPF object;\n or NULL otherwise."]
    pub fn bpf_object__find_map_by_name(
        obj: *const bpf_object,
        name: *const ::std::os::raw::c_char,
    ) -> *mut bpf_map;
}
extern "C" {
    pub fn bpf_object__find_map_fd_by_name(
        obj: *const bpf_object,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__next_map(obj: *const bpf_object, map: *const bpf_map) -> *mut bpf_map;
}
extern "C" {
    pub fn bpf_object__prev_map(obj: *const bpf_object, map: *const bpf_map) -> *mut bpf_map;
}
extern "C" {
    #[doc = " @brief **bpf_map__set_autocreate()** sets whether libbpf has to auto-create\n BPF map during BPF object load phase.\n @param map the BPF map instance\n @param autocreate whether to create BPF map during BPF object load\n @return 0 on success; -EBUSY if BPF object was already loaded\n\n **bpf_map__set_autocreate()** allows to opt-out from libbpf auto-creating\n BPF map. By default, libbpf will attempt to create every single BPF map\n defined in BPF object file using BPF_MAP_CREATE command of bpf() syscall\n and fill in map FD in BPF instructions.\n\n This API allows to opt-out of this process for specific map instance. This\n can be useful if host kernel doesn't support such BPF map type or used\n combination of flags and user application wants to avoid creating such\n a map in the first place. User is still responsible to make sure that their\n BPF-side code that expects to use such missing BPF map is recognized by BPF\n verifier as dead code, otherwise BPF verifier will reject such BPF program."]
    pub fn bpf_map__set_autocreate(map: *mut bpf_map, autocreate: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__autocreate(map: *const bpf_map) -> bool;
}
extern "C" {
    #[doc = " @brief **bpf_map__fd()** gets the file descriptor of the passed\n BPF map\n @param map the BPF map instance\n @return the file descriptor; or -EINVAL in case of an error"]
    pub fn bpf_map__fd(map: *const bpf_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__reuse_fd(map: *mut bpf_map, fd: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__name(map: *const bpf_map) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bpf_map__type(map: *const bpf_map) -> bpf_map_type;
}
extern "C" {
    pub fn bpf_map__set_type(map: *mut bpf_map, type_: bpf_map_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__max_entries(map: *const bpf_map) -> __u32;
}
extern "C" {
    pub fn bpf_map__set_max_entries(map: *mut bpf_map, max_entries: __u32)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__map_flags(map: *const bpf_map) -> __u32;
}
extern "C" {
    pub fn bpf_map__set_map_flags(map: *mut bpf_map, flags: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__numa_node(map: *const bpf_map) -> __u32;
}
extern "C" {
    pub fn bpf_map__set_numa_node(map: *mut bpf_map, numa_node: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__key_size(map: *const bpf_map) -> __u32;
}
extern "C" {
    pub fn bpf_map__set_key_size(map: *mut bpf_map, size: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__value_size(map: *const bpf_map) -> __u32;
}
extern "C" {
    #[doc = " @brief **bpf_map__set_value_size()** sets map value size.\n @param map the BPF map instance\n @return 0, on success; negative error, otherwise\n\n There is a special case for maps with associated memory-mapped regions, like\n the global data section maps (bss, data, rodata). When this function is used\n on such a map, the mapped region is resized. Afterward, an attempt is made to\n adjust the corresponding BTF info. This attempt is best-effort and can only\n succeed if the last variable of the data section map is an array. The array\n BTF type is replaced by a new BTF array type with a different length.\n Any previously existing pointers returned from bpf_map__initial_value() or\n corresponding data section skeleton pointer must be reinitialized."]
    pub fn bpf_map__set_value_size(map: *mut bpf_map, size: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__btf_key_type_id(map: *const bpf_map) -> __u32;
}
extern "C" {
    pub fn bpf_map__btf_value_type_id(map: *const bpf_map) -> __u32;
}
extern "C" {
    pub fn bpf_map__ifindex(map: *const bpf_map) -> __u32;
}
extern "C" {
    pub fn bpf_map__set_ifindex(map: *mut bpf_map, ifindex: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__map_extra(map: *const bpf_map) -> __u64;
}
extern "C" {
    pub fn bpf_map__set_map_extra(map: *mut bpf_map, map_extra: __u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__set_initial_value(
        map: *mut bpf_map,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__initial_value(
        map: *const bpf_map,
        psize: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " @brief **bpf_map__is_internal()** tells the caller whether or not the\n passed map is a special map created by libbpf automatically for things like\n global variables, __ksym externs, Kconfig values, etc\n @param map the bpf_map\n @return true, if the map is an internal map; false, otherwise"]
    pub fn bpf_map__is_internal(map: *const bpf_map) -> bool;
}
extern "C" {
    #[doc = " @brief **bpf_map__set_pin_path()** sets the path attribute that tells where the\n BPF map should be pinned. This does not actually create the 'pin'.\n @param map The bpf_map\n @param path The path\n @return 0, on success; negative error, otherwise"]
    pub fn bpf_map__set_pin_path(
        map: *mut bpf_map,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map__pin_path()** gets the path attribute that tells where the\n BPF map should be pinned.\n @param map The bpf_map\n @return The path string; which can be NULL"]
    pub fn bpf_map__pin_path(map: *const bpf_map) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief **bpf_map__is_pinned()** tells the caller whether or not the\n passed map has been pinned via a 'pin' file.\n @param map The bpf_map\n @return true, if the map is pinned; false, otherwise"]
    pub fn bpf_map__is_pinned(map: *const bpf_map) -> bool;
}
extern "C" {
    #[doc = " @brief **bpf_map__pin()** creates a file that serves as a 'pin'\n for the BPF map. This increments the reference count on the\n BPF map which will keep the BPF map loaded even after the\n userspace process which loaded it has exited.\n @param map The bpf_map to pin\n @param path A file path for the 'pin'\n @return 0, on success; negative error, otherwise\n\n If `path` is NULL the maps `pin_path` attribute will be used. If this is\n also NULL, an error will be returned and the map will not be pinned."]
    pub fn bpf_map__pin(
        map: *mut bpf_map,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map__unpin()** removes the file that serves as a\n 'pin' for the BPF map.\n @param map The bpf_map to unpin\n @param path A file path for the 'pin'\n @return 0, on success; negative error, otherwise\n\n The `path` parameter can be NULL, in which case the `pin_path`\n map attribute is unpinned. If both the `path` parameter and\n `pin_path` map attribute are set, they must be equal."]
    pub fn bpf_map__unpin(
        map: *mut bpf_map,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__set_inner_map_fd(
        map: *mut bpf_map,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map__inner_map(map: *mut bpf_map) -> *mut bpf_map;
}
extern "C" {
    #[doc = " @brief **bpf_map__lookup_elem()** allows to lookup BPF map value\n corresponding to provided key.\n @param map BPF map to lookup element in\n @param key pointer to memory containing bytes of the key used for lookup\n @param key_sz size in bytes of key data, needs to match BPF map definition's **key_size**\n @param value pointer to memory in which looked up value will be stored\n @param value_sz size in byte of value data memory; it has to match BPF map\n definition's **value_size**. For per-CPU BPF maps value size has to be\n a product of BPF map value size and number of possible CPUs in the system\n (could be fetched with **libbpf_num_possible_cpus()**). Note also that for\n per-CPU values value size has to be aligned up to closest 8 bytes for\n alignment reasons, so expected size is: `round_up(value_size, 8)\n * libbpf_num_possible_cpus()`.\n @flags extra flags passed to kernel for this operation\n @return 0, on success; negative error, otherwise\n\n **bpf_map__lookup_elem()** is high-level equivalent of\n **bpf_map_lookup_elem()** API with added check for key and value size."]
    pub fn bpf_map__lookup_elem(
        map: *const bpf_map,
        key: *const ::std::os::raw::c_void,
        key_sz: usize,
        value: *mut ::std::os::raw::c_void,
        value_sz: usize,
        flags: __u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map__update_elem()** allows to insert or update value in BPF\n map that corresponds to provided key.\n @param map BPF map to insert to or update element in\n @param key pointer to memory containing bytes of the key\n @param key_sz size in bytes of key data, needs to match BPF map definition's **key_size**\n @param value pointer to memory containing bytes of the value\n @param value_sz size in byte of value data memory; it has to match BPF map\n definition's **value_size**. For per-CPU BPF maps value size has to be\n a product of BPF map value size and number of possible CPUs in the system\n (could be fetched with **libbpf_num_possible_cpus()**). Note also that for\n per-CPU values value size has to be aligned up to closest 8 bytes for\n alignment reasons, so expected size is: `round_up(value_size, 8)\n * libbpf_num_possible_cpus()`.\n @flags extra flags passed to kernel for this operation\n @return 0, on success; negative error, otherwise\n\n **bpf_map__update_elem()** is high-level equivalent of\n **bpf_map_update_elem()** API with added check for key and value size."]
    pub fn bpf_map__update_elem(
        map: *const bpf_map,
        key: *const ::std::os::raw::c_void,
        key_sz: usize,
        value: *const ::std::os::raw::c_void,
        value_sz: usize,
        flags: __u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map__delete_elem()** allows to delete element in BPF map that\n corresponds to provided key.\n @param map BPF map to delete element from\n @param key pointer to memory containing bytes of the key\n @param key_sz size in bytes of key data, needs to match BPF map definition's **key_size**\n @flags extra flags passed to kernel for this operation\n @return 0, on success; negative error, otherwise\n\n **bpf_map__delete_elem()** is high-level equivalent of\n **bpf_map_delete_elem()** API with added check for key size."]
    pub fn bpf_map__delete_elem(
        map: *const bpf_map,
        key: *const ::std::os::raw::c_void,
        key_sz: usize,
        flags: __u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map__lookup_and_delete_elem()** allows to lookup BPF map value\n corresponding to provided key and atomically delete it afterwards.\n @param map BPF map to lookup element in\n @param key pointer to memory containing bytes of the key used for lookup\n @param key_sz size in bytes of key data, needs to match BPF map definition's **key_size**\n @param value pointer to memory in which looked up value will be stored\n @param value_sz size in byte of value data memory; it has to match BPF map\n definition's **value_size**. For per-CPU BPF maps value size has to be\n a product of BPF map value size and number of possible CPUs in the system\n (could be fetched with **libbpf_num_possible_cpus()**). Note also that for\n per-CPU values value size has to be aligned up to closest 8 bytes for\n alignment reasons, so expected size is: `round_up(value_size, 8)\n * libbpf_num_possible_cpus()`.\n @flags extra flags passed to kernel for this operation\n @return 0, on success; negative error, otherwise\n\n **bpf_map__lookup_and_delete_elem()** is high-level equivalent of\n **bpf_map_lookup_and_delete_elem()** API with added check for key and value size."]
    pub fn bpf_map__lookup_and_delete_elem(
        map: *const bpf_map,
        key: *const ::std::os::raw::c_void,
        key_sz: usize,
        value: *mut ::std::os::raw::c_void,
        value_sz: usize,
        flags: __u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map__get_next_key()** allows to iterate BPF map keys by\n fetching next key that follows current key.\n @param map BPF map to fetch next key from\n @param cur_key pointer to memory containing bytes of current key or NULL to\n fetch the first key\n @param next_key pointer to memory to write next key into\n @param key_sz size in bytes of key data, needs to match BPF map definition's **key_size**\n @return 0, on success; -ENOENT if **cur_key** is the last key in BPF map;\n negative error, otherwise\n\n **bpf_map__get_next_key()** is high-level equivalent of\n **bpf_map_get_next_key()** API with added check for key size."]
    pub fn bpf_map__get_next_key(
        map: *const bpf_map,
        cur_key: *const ::std::os::raw::c_void,
        next_key: *mut ::std::os::raw::c_void,
        key_sz: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_xdp_set_link_opts {
    pub sz: usize,
    pub old_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_xdp_set_link_opts"][::std::mem::size_of::<bpf_xdp_set_link_opts>() - 16usize];
    ["Alignment of bpf_xdp_set_link_opts"]
        [::std::mem::align_of::<bpf_xdp_set_link_opts>() - 8usize];
    ["Offset of field: bpf_xdp_set_link_opts::sz"]
        [::std::mem::offset_of!(bpf_xdp_set_link_opts, sz) - 0usize];
    ["Offset of field: bpf_xdp_set_link_opts::old_fd"]
        [::std::mem::offset_of!(bpf_xdp_set_link_opts, old_fd) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_xdp_attach_opts {
    pub sz: usize,
    pub old_prog_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_xdp_attach_opts"][::std::mem::size_of::<bpf_xdp_attach_opts>() - 16usize];
    ["Alignment of bpf_xdp_attach_opts"][::std::mem::align_of::<bpf_xdp_attach_opts>() - 8usize];
    ["Offset of field: bpf_xdp_attach_opts::sz"]
        [::std::mem::offset_of!(bpf_xdp_attach_opts, sz) - 0usize];
    ["Offset of field: bpf_xdp_attach_opts::old_prog_fd"]
        [::std::mem::offset_of!(bpf_xdp_attach_opts, old_prog_fd) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_xdp_query_opts {
    pub sz: usize,
    pub prog_id: __u32,
    pub drv_prog_id: __u32,
    pub hw_prog_id: __u32,
    pub skb_prog_id: __u32,
    pub attach_mode: __u8,
    pub feature_flags: __u64,
    pub xdp_zc_max_segs: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_xdp_query_opts"][::std::mem::size_of::<bpf_xdp_query_opts>() - 48usize];
    ["Alignment of bpf_xdp_query_opts"][::std::mem::align_of::<bpf_xdp_query_opts>() - 8usize];
    ["Offset of field: bpf_xdp_query_opts::sz"]
        [::std::mem::offset_of!(bpf_xdp_query_opts, sz) - 0usize];
    ["Offset of field: bpf_xdp_query_opts::prog_id"]
        [::std::mem::offset_of!(bpf_xdp_query_opts, prog_id) - 8usize];
    ["Offset of field: bpf_xdp_query_opts::drv_prog_id"]
        [::std::mem::offset_of!(bpf_xdp_query_opts, drv_prog_id) - 12usize];
    ["Offset of field: bpf_xdp_query_opts::hw_prog_id"]
        [::std::mem::offset_of!(bpf_xdp_query_opts, hw_prog_id) - 16usize];
    ["Offset of field: bpf_xdp_query_opts::skb_prog_id"]
        [::std::mem::offset_of!(bpf_xdp_query_opts, skb_prog_id) - 20usize];
    ["Offset of field: bpf_xdp_query_opts::attach_mode"]
        [::std::mem::offset_of!(bpf_xdp_query_opts, attach_mode) - 24usize];
    ["Offset of field: bpf_xdp_query_opts::feature_flags"]
        [::std::mem::offset_of!(bpf_xdp_query_opts, feature_flags) - 32usize];
    ["Offset of field: bpf_xdp_query_opts::xdp_zc_max_segs"]
        [::std::mem::offset_of!(bpf_xdp_query_opts, xdp_zc_max_segs) - 40usize];
};
extern "C" {
    pub fn bpf_xdp_attach(
        ifindex: ::std::os::raw::c_int,
        prog_fd: ::std::os::raw::c_int,
        flags: __u32,
        opts: *const bpf_xdp_attach_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_xdp_detach(
        ifindex: ::std::os::raw::c_int,
        flags: __u32,
        opts: *const bpf_xdp_attach_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_xdp_query(
        ifindex: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        opts: *mut bpf_xdp_query_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_xdp_query_id(
        ifindex: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        prog_id: *mut __u32,
    ) -> ::std::os::raw::c_int;
}
pub const bpf_tc_attach_point_BPF_TC_INGRESS: bpf_tc_attach_point = 1;
pub const bpf_tc_attach_point_BPF_TC_EGRESS: bpf_tc_attach_point = 2;
pub const bpf_tc_attach_point_BPF_TC_CUSTOM: bpf_tc_attach_point = 4;
pub type bpf_tc_attach_point = ::std::os::raw::c_uint;
pub const bpf_tc_flags_BPF_TC_F_REPLACE: bpf_tc_flags = 1;
pub type bpf_tc_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_tc_hook {
    pub sz: usize,
    pub ifindex: ::std::os::raw::c_int,
    pub attach_point: bpf_tc_attach_point,
    pub parent: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_tc_hook"][::std::mem::size_of::<bpf_tc_hook>() - 24usize];
    ["Alignment of bpf_tc_hook"][::std::mem::align_of::<bpf_tc_hook>() - 8usize];
    ["Offset of field: bpf_tc_hook::sz"][::std::mem::offset_of!(bpf_tc_hook, sz) - 0usize];
    ["Offset of field: bpf_tc_hook::ifindex"]
        [::std::mem::offset_of!(bpf_tc_hook, ifindex) - 8usize];
    ["Offset of field: bpf_tc_hook::attach_point"]
        [::std::mem::offset_of!(bpf_tc_hook, attach_point) - 12usize];
    ["Offset of field: bpf_tc_hook::parent"][::std::mem::offset_of!(bpf_tc_hook, parent) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_tc_opts {
    pub sz: usize,
    pub prog_fd: ::std::os::raw::c_int,
    pub flags: __u32,
    pub prog_id: __u32,
    pub handle: __u32,
    pub priority: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_tc_opts"][::std::mem::size_of::<bpf_tc_opts>() - 32usize];
    ["Alignment of bpf_tc_opts"][::std::mem::align_of::<bpf_tc_opts>() - 8usize];
    ["Offset of field: bpf_tc_opts::sz"][::std::mem::offset_of!(bpf_tc_opts, sz) - 0usize];
    ["Offset of field: bpf_tc_opts::prog_fd"]
        [::std::mem::offset_of!(bpf_tc_opts, prog_fd) - 8usize];
    ["Offset of field: bpf_tc_opts::flags"][::std::mem::offset_of!(bpf_tc_opts, flags) - 12usize];
    ["Offset of field: bpf_tc_opts::prog_id"]
        [::std::mem::offset_of!(bpf_tc_opts, prog_id) - 16usize];
    ["Offset of field: bpf_tc_opts::handle"][::std::mem::offset_of!(bpf_tc_opts, handle) - 20usize];
    ["Offset of field: bpf_tc_opts::priority"]
        [::std::mem::offset_of!(bpf_tc_opts, priority) - 24usize];
};
extern "C" {
    pub fn bpf_tc_hook_create(hook: *mut bpf_tc_hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_tc_hook_destroy(hook: *mut bpf_tc_hook) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_tc_attach(hook: *const bpf_tc_hook, opts: *mut bpf_tc_opts)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_tc_detach(
        hook: *const bpf_tc_hook,
        opts: *const bpf_tc_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_tc_query(hook: *const bpf_tc_hook, opts: *mut bpf_tc_opts) -> ::std::os::raw::c_int;
}
pub const bpf_perf_event_ret_LIBBPF_PERF_EVENT_DONE: bpf_perf_event_ret = 0;
pub const bpf_perf_event_ret_LIBBPF_PERF_EVENT_ERROR: bpf_perf_event_ret = -1;
pub const bpf_perf_event_ret_LIBBPF_PERF_EVENT_CONT: bpf_perf_event_ret = -2;
pub type bpf_perf_event_ret = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_prog_linfo {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bpf_prog_linfo__free(prog_linfo: *mut bpf_prog_linfo);
}
extern "C" {
    pub fn bpf_prog_linfo__new(info: *const bpf_prog_info) -> *mut bpf_prog_linfo;
}
extern "C" {
    pub fn bpf_prog_linfo__lfind_addr_func(
        prog_linfo: *const bpf_prog_linfo,
        addr: __u64,
        func_idx: __u32,
        nr_skip: __u32,
    ) -> *const bpf_line_info;
}
extern "C" {
    pub fn bpf_prog_linfo__lfind(
        prog_linfo: *const bpf_prog_linfo,
        insn_off: __u32,
        nr_skip: __u32,
    ) -> *const bpf_line_info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_map_skeleton {
    pub name: *const ::std::os::raw::c_char,
    pub map: *mut *mut bpf_map,
    pub mmaped: *mut *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_map_skeleton"][::std::mem::size_of::<bpf_map_skeleton>() - 24usize];
    ["Alignment of bpf_map_skeleton"][::std::mem::align_of::<bpf_map_skeleton>() - 8usize];
    ["Offset of field: bpf_map_skeleton::name"]
        [::std::mem::offset_of!(bpf_map_skeleton, name) - 0usize];
    ["Offset of field: bpf_map_skeleton::map"]
        [::std::mem::offset_of!(bpf_map_skeleton, map) - 8usize];
    ["Offset of field: bpf_map_skeleton::mmaped"]
        [::std::mem::offset_of!(bpf_map_skeleton, mmaped) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_prog_skeleton {
    pub name: *const ::std::os::raw::c_char,
    pub prog: *mut *mut bpf_program,
    pub link: *mut *mut bpf_link,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_skeleton"][::std::mem::size_of::<bpf_prog_skeleton>() - 24usize];
    ["Alignment of bpf_prog_skeleton"][::std::mem::align_of::<bpf_prog_skeleton>() - 8usize];
    ["Offset of field: bpf_prog_skeleton::name"]
        [::std::mem::offset_of!(bpf_prog_skeleton, name) - 0usize];
    ["Offset of field: bpf_prog_skeleton::prog"]
        [::std::mem::offset_of!(bpf_prog_skeleton, prog) - 8usize];
    ["Offset of field: bpf_prog_skeleton::link"]
        [::std::mem::offset_of!(bpf_prog_skeleton, link) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_object_skeleton {
    pub sz: usize,
    pub name: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub data_sz: usize,
    pub obj: *mut *mut bpf_object,
    pub map_cnt: ::std::os::raw::c_int,
    pub map_skel_sz: ::std::os::raw::c_int,
    pub maps: *mut bpf_map_skeleton,
    pub prog_cnt: ::std::os::raw::c_int,
    pub prog_skel_sz: ::std::os::raw::c_int,
    pub progs: *mut bpf_prog_skeleton,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_object_skeleton"][::std::mem::size_of::<bpf_object_skeleton>() - 72usize];
    ["Alignment of bpf_object_skeleton"][::std::mem::align_of::<bpf_object_skeleton>() - 8usize];
    ["Offset of field: bpf_object_skeleton::sz"]
        [::std::mem::offset_of!(bpf_object_skeleton, sz) - 0usize];
    ["Offset of field: bpf_object_skeleton::name"]
        [::std::mem::offset_of!(bpf_object_skeleton, name) - 8usize];
    ["Offset of field: bpf_object_skeleton::data"]
        [::std::mem::offset_of!(bpf_object_skeleton, data) - 16usize];
    ["Offset of field: bpf_object_skeleton::data_sz"]
        [::std::mem::offset_of!(bpf_object_skeleton, data_sz) - 24usize];
    ["Offset of field: bpf_object_skeleton::obj"]
        [::std::mem::offset_of!(bpf_object_skeleton, obj) - 32usize];
    ["Offset of field: bpf_object_skeleton::map_cnt"]
        [::std::mem::offset_of!(bpf_object_skeleton, map_cnt) - 40usize];
    ["Offset of field: bpf_object_skeleton::map_skel_sz"]
        [::std::mem::offset_of!(bpf_object_skeleton, map_skel_sz) - 44usize];
    ["Offset of field: bpf_object_skeleton::maps"]
        [::std::mem::offset_of!(bpf_object_skeleton, maps) - 48usize];
    ["Offset of field: bpf_object_skeleton::prog_cnt"]
        [::std::mem::offset_of!(bpf_object_skeleton, prog_cnt) - 56usize];
    ["Offset of field: bpf_object_skeleton::prog_skel_sz"]
        [::std::mem::offset_of!(bpf_object_skeleton, prog_skel_sz) - 60usize];
    ["Offset of field: bpf_object_skeleton::progs"]
        [::std::mem::offset_of!(bpf_object_skeleton, progs) - 64usize];
};
extern "C" {
    pub fn bpf_object__open_skeleton(
        s: *mut bpf_object_skeleton,
        opts: *const bpf_object_open_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__load_skeleton(s: *mut bpf_object_skeleton) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__attach_skeleton(s: *mut bpf_object_skeleton) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__detach_skeleton(s: *mut bpf_object_skeleton);
}
extern "C" {
    pub fn bpf_object__destroy_skeleton(s: *mut bpf_object_skeleton);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_var_skeleton {
    pub name: *const ::std::os::raw::c_char,
    pub map: *mut *mut bpf_map,
    pub addr: *mut *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_var_skeleton"][::std::mem::size_of::<bpf_var_skeleton>() - 24usize];
    ["Alignment of bpf_var_skeleton"][::std::mem::align_of::<bpf_var_skeleton>() - 8usize];
    ["Offset of field: bpf_var_skeleton::name"]
        [::std::mem::offset_of!(bpf_var_skeleton, name) - 0usize];
    ["Offset of field: bpf_var_skeleton::map"]
        [::std::mem::offset_of!(bpf_var_skeleton, map) - 8usize];
    ["Offset of field: bpf_var_skeleton::addr"]
        [::std::mem::offset_of!(bpf_var_skeleton, addr) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_object_subskeleton {
    pub sz: usize,
    pub obj: *const bpf_object,
    pub map_cnt: ::std::os::raw::c_int,
    pub map_skel_sz: ::std::os::raw::c_int,
    pub maps: *mut bpf_map_skeleton,
    pub prog_cnt: ::std::os::raw::c_int,
    pub prog_skel_sz: ::std::os::raw::c_int,
    pub progs: *mut bpf_prog_skeleton,
    pub var_cnt: ::std::os::raw::c_int,
    pub var_skel_sz: ::std::os::raw::c_int,
    pub vars: *mut bpf_var_skeleton,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_object_subskeleton"][::std::mem::size_of::<bpf_object_subskeleton>() - 64usize];
    ["Alignment of bpf_object_subskeleton"]
        [::std::mem::align_of::<bpf_object_subskeleton>() - 8usize];
    ["Offset of field: bpf_object_subskeleton::sz"]
        [::std::mem::offset_of!(bpf_object_subskeleton, sz) - 0usize];
    ["Offset of field: bpf_object_subskeleton::obj"]
        [::std::mem::offset_of!(bpf_object_subskeleton, obj) - 8usize];
    ["Offset of field: bpf_object_subskeleton::map_cnt"]
        [::std::mem::offset_of!(bpf_object_subskeleton, map_cnt) - 16usize];
    ["Offset of field: bpf_object_subskeleton::map_skel_sz"]
        [::std::mem::offset_of!(bpf_object_subskeleton, map_skel_sz) - 20usize];
    ["Offset of field: bpf_object_subskeleton::maps"]
        [::std::mem::offset_of!(bpf_object_subskeleton, maps) - 24usize];
    ["Offset of field: bpf_object_subskeleton::prog_cnt"]
        [::std::mem::offset_of!(bpf_object_subskeleton, prog_cnt) - 32usize];
    ["Offset of field: bpf_object_subskeleton::prog_skel_sz"]
        [::std::mem::offset_of!(bpf_object_subskeleton, prog_skel_sz) - 36usize];
    ["Offset of field: bpf_object_subskeleton::progs"]
        [::std::mem::offset_of!(bpf_object_subskeleton, progs) - 40usize];
    ["Offset of field: bpf_object_subskeleton::var_cnt"]
        [::std::mem::offset_of!(bpf_object_subskeleton, var_cnt) - 48usize];
    ["Offset of field: bpf_object_subskeleton::var_skel_sz"]
        [::std::mem::offset_of!(bpf_object_subskeleton, var_skel_sz) - 52usize];
    ["Offset of field: bpf_object_subskeleton::vars"]
        [::std::mem::offset_of!(bpf_object_subskeleton, vars) - 56usize];
};
extern "C" {
    pub fn bpf_object__open_subskeleton(s: *mut bpf_object_subskeleton) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_object__destroy_subskeleton(s: *mut bpf_object_subskeleton);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gen_loader_opts {
    pub sz: usize,
    pub data: *const ::std::os::raw::c_char,
    pub insns: *const ::std::os::raw::c_char,
    pub data_sz: __u32,
    pub insns_sz: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gen_loader_opts"][::std::mem::size_of::<gen_loader_opts>() - 32usize];
    ["Alignment of gen_loader_opts"][::std::mem::align_of::<gen_loader_opts>() - 8usize];
    ["Offset of field: gen_loader_opts::sz"][::std::mem::offset_of!(gen_loader_opts, sz) - 0usize];
    ["Offset of field: gen_loader_opts::data"]
        [::std::mem::offset_of!(gen_loader_opts, data) - 8usize];
    ["Offset of field: gen_loader_opts::insns"]
        [::std::mem::offset_of!(gen_loader_opts, insns) - 16usize];
    ["Offset of field: gen_loader_opts::data_sz"]
        [::std::mem::offset_of!(gen_loader_opts, data_sz) - 24usize];
    ["Offset of field: gen_loader_opts::insns_sz"]
        [::std::mem::offset_of!(gen_loader_opts, insns_sz) - 28usize];
};
extern "C" {
    pub fn bpf_object__gen_loader(
        obj: *mut bpf_object,
        opts: *mut gen_loader_opts,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_linker_opts {
    pub sz: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_linker_opts"][::std::mem::size_of::<bpf_linker_opts>() - 8usize];
    ["Alignment of bpf_linker_opts"][::std::mem::align_of::<bpf_linker_opts>() - 8usize];
    ["Offset of field: bpf_linker_opts::sz"][::std::mem::offset_of!(bpf_linker_opts, sz) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_linker_file_opts {
    pub sz: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_linker_file_opts"][::std::mem::size_of::<bpf_linker_file_opts>() - 8usize];
    ["Alignment of bpf_linker_file_opts"][::std::mem::align_of::<bpf_linker_file_opts>() - 8usize];
    ["Offset of field: bpf_linker_file_opts::sz"]
        [::std::mem::offset_of!(bpf_linker_file_opts, sz) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_linker {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bpf_linker__new(
        filename: *const ::std::os::raw::c_char,
        opts: *mut bpf_linker_opts,
    ) -> *mut bpf_linker;
}
extern "C" {
    pub fn bpf_linker__add_file(
        linker: *mut bpf_linker,
        filename: *const ::std::os::raw::c_char,
        opts: *const bpf_linker_file_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_linker__finalize(linker: *mut bpf_linker) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_linker__free(linker: *mut bpf_linker);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_map_create_opts {
    pub sz: usize,
    pub btf_fd: __u32,
    pub btf_key_type_id: __u32,
    pub btf_value_type_id: __u32,
    pub btf_vmlinux_value_type_id: __u32,
    pub inner_map_fd: __u32,
    pub map_flags: __u32,
    pub map_extra: __u64,
    pub numa_node: __u32,
    pub map_ifindex: __u32,
    pub value_type_btf_obj_fd: __s32,
    pub token_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_map_create_opts"][::std::mem::size_of::<bpf_map_create_opts>() - 56usize];
    ["Alignment of bpf_map_create_opts"][::std::mem::align_of::<bpf_map_create_opts>() - 8usize];
    ["Offset of field: bpf_map_create_opts::sz"]
        [::std::mem::offset_of!(bpf_map_create_opts, sz) - 0usize];
    ["Offset of field: bpf_map_create_opts::btf_fd"]
        [::std::mem::offset_of!(bpf_map_create_opts, btf_fd) - 8usize];
    ["Offset of field: bpf_map_create_opts::btf_key_type_id"]
        [::std::mem::offset_of!(bpf_map_create_opts, btf_key_type_id) - 12usize];
    ["Offset of field: bpf_map_create_opts::btf_value_type_id"]
        [::std::mem::offset_of!(bpf_map_create_opts, btf_value_type_id) - 16usize];
    ["Offset of field: bpf_map_create_opts::btf_vmlinux_value_type_id"]
        [::std::mem::offset_of!(bpf_map_create_opts, btf_vmlinux_value_type_id) - 20usize];
    ["Offset of field: bpf_map_create_opts::inner_map_fd"]
        [::std::mem::offset_of!(bpf_map_create_opts, inner_map_fd) - 24usize];
    ["Offset of field: bpf_map_create_opts::map_flags"]
        [::std::mem::offset_of!(bpf_map_create_opts, map_flags) - 28usize];
    ["Offset of field: bpf_map_create_opts::map_extra"]
        [::std::mem::offset_of!(bpf_map_create_opts, map_extra) - 32usize];
    ["Offset of field: bpf_map_create_opts::numa_node"]
        [::std::mem::offset_of!(bpf_map_create_opts, numa_node) - 40usize];
    ["Offset of field: bpf_map_create_opts::map_ifindex"]
        [::std::mem::offset_of!(bpf_map_create_opts, map_ifindex) - 44usize];
    ["Offset of field: bpf_map_create_opts::value_type_btf_obj_fd"]
        [::std::mem::offset_of!(bpf_map_create_opts, value_type_btf_obj_fd) - 48usize];
    ["Offset of field: bpf_map_create_opts::token_fd"]
        [::std::mem::offset_of!(bpf_map_create_opts, token_fd) - 52usize];
};
extern "C" {
    pub fn bpf_map_create(
        map_type: bpf_map_type,
        map_name: *const ::std::os::raw::c_char,
        key_size: __u32,
        value_size: __u32,
        max_entries: __u32,
        opts: *const bpf_map_create_opts,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_prog_load_opts {
    pub sz: usize,
    pub attempts: ::std::os::raw::c_int,
    pub expected_attach_type: bpf_attach_type,
    pub prog_btf_fd: __u32,
    pub prog_flags: __u32,
    pub prog_ifindex: __u32,
    pub kern_version: __u32,
    pub attach_btf_id: __u32,
    pub attach_prog_fd: __u32,
    pub attach_btf_obj_fd: __u32,
    pub fd_array: *const ::std::os::raw::c_int,
    pub func_info: *const ::std::os::raw::c_void,
    pub func_info_cnt: __u32,
    pub func_info_rec_size: __u32,
    pub line_info: *const ::std::os::raw::c_void,
    pub line_info_cnt: __u32,
    pub line_info_rec_size: __u32,
    pub log_level: __u32,
    pub log_size: __u32,
    pub log_buf: *mut ::std::os::raw::c_char,
    pub log_true_size: __u32,
    pub token_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_load_opts"][::std::mem::size_of::<bpf_prog_load_opts>() - 112usize];
    ["Alignment of bpf_prog_load_opts"][::std::mem::align_of::<bpf_prog_load_opts>() - 8usize];
    ["Offset of field: bpf_prog_load_opts::sz"]
        [::std::mem::offset_of!(bpf_prog_load_opts, sz) - 0usize];
    ["Offset of field: bpf_prog_load_opts::attempts"]
        [::std::mem::offset_of!(bpf_prog_load_opts, attempts) - 8usize];
    ["Offset of field: bpf_prog_load_opts::expected_attach_type"]
        [::std::mem::offset_of!(bpf_prog_load_opts, expected_attach_type) - 12usize];
    ["Offset of field: bpf_prog_load_opts::prog_btf_fd"]
        [::std::mem::offset_of!(bpf_prog_load_opts, prog_btf_fd) - 16usize];
    ["Offset of field: bpf_prog_load_opts::prog_flags"]
        [::std::mem::offset_of!(bpf_prog_load_opts, prog_flags) - 20usize];
    ["Offset of field: bpf_prog_load_opts::prog_ifindex"]
        [::std::mem::offset_of!(bpf_prog_load_opts, prog_ifindex) - 24usize];
    ["Offset of field: bpf_prog_load_opts::kern_version"]
        [::std::mem::offset_of!(bpf_prog_load_opts, kern_version) - 28usize];
    ["Offset of field: bpf_prog_load_opts::attach_btf_id"]
        [::std::mem::offset_of!(bpf_prog_load_opts, attach_btf_id) - 32usize];
    ["Offset of field: bpf_prog_load_opts::attach_prog_fd"]
        [::std::mem::offset_of!(bpf_prog_load_opts, attach_prog_fd) - 36usize];
    ["Offset of field: bpf_prog_load_opts::attach_btf_obj_fd"]
        [::std::mem::offset_of!(bpf_prog_load_opts, attach_btf_obj_fd) - 40usize];
    ["Offset of field: bpf_prog_load_opts::fd_array"]
        [::std::mem::offset_of!(bpf_prog_load_opts, fd_array) - 48usize];
    ["Offset of field: bpf_prog_load_opts::func_info"]
        [::std::mem::offset_of!(bpf_prog_load_opts, func_info) - 56usize];
    ["Offset of field: bpf_prog_load_opts::func_info_cnt"]
        [::std::mem::offset_of!(bpf_prog_load_opts, func_info_cnt) - 64usize];
    ["Offset of field: bpf_prog_load_opts::func_info_rec_size"]
        [::std::mem::offset_of!(bpf_prog_load_opts, func_info_rec_size) - 68usize];
    ["Offset of field: bpf_prog_load_opts::line_info"]
        [::std::mem::offset_of!(bpf_prog_load_opts, line_info) - 72usize];
    ["Offset of field: bpf_prog_load_opts::line_info_cnt"]
        [::std::mem::offset_of!(bpf_prog_load_opts, line_info_cnt) - 80usize];
    ["Offset of field: bpf_prog_load_opts::line_info_rec_size"]
        [::std::mem::offset_of!(bpf_prog_load_opts, line_info_rec_size) - 84usize];
    ["Offset of field: bpf_prog_load_opts::log_level"]
        [::std::mem::offset_of!(bpf_prog_load_opts, log_level) - 88usize];
    ["Offset of field: bpf_prog_load_opts::log_size"]
        [::std::mem::offset_of!(bpf_prog_load_opts, log_size) - 92usize];
    ["Offset of field: bpf_prog_load_opts::log_buf"]
        [::std::mem::offset_of!(bpf_prog_load_opts, log_buf) - 96usize];
    ["Offset of field: bpf_prog_load_opts::log_true_size"]
        [::std::mem::offset_of!(bpf_prog_load_opts, log_true_size) - 104usize];
    ["Offset of field: bpf_prog_load_opts::token_fd"]
        [::std::mem::offset_of!(bpf_prog_load_opts, token_fd) - 108usize];
};
extern "C" {
    pub fn bpf_prog_load(
        prog_type: bpf_prog_type,
        prog_name: *const ::std::os::raw::c_char,
        license: *const ::std::os::raw::c_char,
        insns: *const bpf_insn,
        insn_cnt: usize,
        opts: *mut bpf_prog_load_opts,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_btf_load_opts {
    pub sz: usize,
    pub log_buf: *mut ::std::os::raw::c_char,
    pub log_level: __u32,
    pub log_size: __u32,
    pub log_true_size: __u32,
    pub btf_flags: __u32,
    pub token_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_btf_load_opts"][::std::mem::size_of::<bpf_btf_load_opts>() - 40usize];
    ["Alignment of bpf_btf_load_opts"][::std::mem::align_of::<bpf_btf_load_opts>() - 8usize];
    ["Offset of field: bpf_btf_load_opts::sz"]
        [::std::mem::offset_of!(bpf_btf_load_opts, sz) - 0usize];
    ["Offset of field: bpf_btf_load_opts::log_buf"]
        [::std::mem::offset_of!(bpf_btf_load_opts, log_buf) - 8usize];
    ["Offset of field: bpf_btf_load_opts::log_level"]
        [::std::mem::offset_of!(bpf_btf_load_opts, log_level) - 16usize];
    ["Offset of field: bpf_btf_load_opts::log_size"]
        [::std::mem::offset_of!(bpf_btf_load_opts, log_size) - 20usize];
    ["Offset of field: bpf_btf_load_opts::log_true_size"]
        [::std::mem::offset_of!(bpf_btf_load_opts, log_true_size) - 24usize];
    ["Offset of field: bpf_btf_load_opts::btf_flags"]
        [::std::mem::offset_of!(bpf_btf_load_opts, btf_flags) - 28usize];
    ["Offset of field: bpf_btf_load_opts::token_fd"]
        [::std::mem::offset_of!(bpf_btf_load_opts, token_fd) - 32usize];
};
extern "C" {
    pub fn bpf_btf_load(
        btf_data: *const ::std::os::raw::c_void,
        btf_size: usize,
        opts: *mut bpf_btf_load_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_update_elem(
        fd: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
        flags: __u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_lookup_elem(
        fd: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_lookup_elem_flags(
        fd: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
        flags: __u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_lookup_and_delete_elem(
        fd: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_lookup_and_delete_elem_flags(
        fd: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
        flags: __u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_delete_elem(
        fd: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_delete_elem_flags(
        fd: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_void,
        flags: __u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_get_next_key(
        fd: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_void,
        next_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_freeze(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_map_batch_opts {
    pub sz: usize,
    pub elem_flags: __u64,
    pub flags: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_map_batch_opts"][::std::mem::size_of::<bpf_map_batch_opts>() - 24usize];
    ["Alignment of bpf_map_batch_opts"][::std::mem::align_of::<bpf_map_batch_opts>() - 8usize];
    ["Offset of field: bpf_map_batch_opts::sz"]
        [::std::mem::offset_of!(bpf_map_batch_opts, sz) - 0usize];
    ["Offset of field: bpf_map_batch_opts::elem_flags"]
        [::std::mem::offset_of!(bpf_map_batch_opts, elem_flags) - 8usize];
    ["Offset of field: bpf_map_batch_opts::flags"]
        [::std::mem::offset_of!(bpf_map_batch_opts, flags) - 16usize];
};
extern "C" {
    #[doc = " @brief **bpf_map_delete_batch()** allows for batch deletion of multiple\n elements in a BPF map.\n\n @param fd BPF map file descriptor\n @param keys pointer to an array of *count* keys\n @param count input and output parameter; on input **count** represents the\n number of  elements in the map to delete in batch;\n on output if a non-EFAULT error is returned, **count** represents the number of deleted\n elements if the output **count** value is not equal to the input **count** value\n If EFAULT is returned, **count** should not be trusted to be correct.\n @param opts options for configuring the way the batch deletion works\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_map_delete_batch(
        fd: ::std::os::raw::c_int,
        keys: *const ::std::os::raw::c_void,
        count: *mut __u32,
        opts: *const bpf_map_batch_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map_lookup_batch()** allows for batch lookup of BPF map elements.\n\n The parameter *in_batch* is the address of the first element in the batch to\n read. *out_batch* is an output parameter that should be passed as *in_batch*\n to subsequent calls to **bpf_map_lookup_batch()**. NULL can be passed for\n *in_batch* to indicate that the batched lookup starts from the beginning of\n the map. Both *in_batch* and *out_batch* must point to memory large enough to\n hold a single key, except for maps of type **BPF_MAP_TYPE_{HASH, PERCPU_HASH,\n LRU_HASH, LRU_PERCPU_HASH}**, for which the memory size must be at\n least 4 bytes wide regardless of key size.\n\n The *keys* and *values* are output parameters which must point to memory large enough to\n hold *count* items based on the key and value size of the map *map_fd*. The *keys*\n buffer must be of *key_size* * *count*. The *values* buffer must be of\n *value_size* * *count*.\n\n @param fd BPF map file descriptor\n @param in_batch address of the first element in batch to read, can pass NULL to\n indicate that the batched lookup starts from the beginning of the map.\n @param out_batch output parameter that should be passed to next call as *in_batch*\n @param keys pointer to an array large enough for *count* keys\n @param values pointer to an array large enough for *count* values\n @param count input and output parameter; on input it's the number of elements\n in the map to read in batch; on output it's the number of elements that were\n successfully read.\n If a non-EFAULT error is returned, count will be set as the number of elements\n that were read before the error occurred.\n If EFAULT is returned, **count** should not be trusted to be correct.\n @param opts options for configuring the way the batch lookup works\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_map_lookup_batch(
        fd: ::std::os::raw::c_int,
        in_batch: *mut ::std::os::raw::c_void,
        out_batch: *mut ::std::os::raw::c_void,
        keys: *mut ::std::os::raw::c_void,
        values: *mut ::std::os::raw::c_void,
        count: *mut __u32,
        opts: *const bpf_map_batch_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map_lookup_and_delete_batch()** allows for batch lookup and deletion\n of BPF map elements where each element is deleted after being retrieved.\n\n @param fd BPF map file descriptor\n @param in_batch address of the first element in batch to read, can pass NULL to\n get address of the first element in *out_batch*. If not NULL, must be large\n enough to hold a key. For **BPF_MAP_TYPE_{HASH, PERCPU_HASH, LRU_HASH,\n LRU_PERCPU_HASH}**, the memory size must be at least 4 bytes wide regardless\n of key size.\n @param out_batch output parameter that should be passed to next call as *in_batch*\n @param keys pointer to an array of *count* keys\n @param values pointer to an array large enough for *count* values\n @param count input and output parameter; on input it's the number of elements\n in the map to read and delete in batch; on output it represents the number of\n elements that were successfully read and deleted\n If a non-**EFAULT** error code is returned and if the output **count** value\n is not equal to the input **count** value, up to **count** elements may\n have been deleted.\n if **EFAULT** is returned up to *count* elements may have been deleted without\n being returned via the *keys* and *values* output parameters.\n @param opts options for configuring the way the batch lookup and delete works\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_map_lookup_and_delete_batch(
        fd: ::std::os::raw::c_int,
        in_batch: *mut ::std::os::raw::c_void,
        out_batch: *mut ::std::os::raw::c_void,
        keys: *mut ::std::os::raw::c_void,
        values: *mut ::std::os::raw::c_void,
        count: *mut __u32,
        opts: *const bpf_map_batch_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map_update_batch()** updates multiple elements in a map\n by specifying keys and their corresponding values.\n\n The *keys* and *values* parameters must point to memory large enough\n to hold *count* items based on the key and value size of the map.\n\n The *opts* parameter can be used to control how *bpf_map_update_batch()*\n should handle keys that either do or do not already exist in the map.\n In particular the *flags* parameter of *bpf_map_batch_opts* can be\n one of the following:\n\n Note that *count* is an input and output parameter, where on output it\n represents how many elements were successfully updated. Also note that if\n **EFAULT** then *count* should not be trusted to be correct.\n\n **BPF_ANY**\n    Create new elements or update existing.\n\n **BPF_NOEXIST**\n    Create new elements only if they do not exist.\n\n **BPF_EXIST**\n    Update existing elements.\n\n **BPF_F_LOCK**\n    Update spin_lock-ed map elements. This must be\n    specified if the map value contains a spinlock.\n\n @param fd BPF map file descriptor\n @param keys pointer to an array of *count* keys\n @param values pointer to an array of *count* values\n @param count input and output parameter; on input it's the number of elements\n in the map to update in batch; on output if a non-EFAULT error is returned,\n **count** represents the number of updated elements if the output **count**\n value is not equal to the input **count** value.\n If EFAULT is returned, **count** should not be trusted to be correct.\n @param opts options for configuring the way the batch update works\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_map_update_batch(
        fd: ::std::os::raw::c_int,
        keys: *const ::std::os::raw::c_void,
        values: *const ::std::os::raw::c_void,
        count: *mut __u32,
        opts: *const bpf_map_batch_opts,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_obj_pin_opts {
    pub sz: usize,
    pub file_flags: __u32,
    pub path_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_obj_pin_opts"][::std::mem::size_of::<bpf_obj_pin_opts>() - 16usize];
    ["Alignment of bpf_obj_pin_opts"][::std::mem::align_of::<bpf_obj_pin_opts>() - 8usize];
    ["Offset of field: bpf_obj_pin_opts::sz"]
        [::std::mem::offset_of!(bpf_obj_pin_opts, sz) - 0usize];
    ["Offset of field: bpf_obj_pin_opts::file_flags"]
        [::std::mem::offset_of!(bpf_obj_pin_opts, file_flags) - 8usize];
    ["Offset of field: bpf_obj_pin_opts::path_fd"]
        [::std::mem::offset_of!(bpf_obj_pin_opts, path_fd) - 12usize];
};
extern "C" {
    pub fn bpf_obj_pin(
        fd: ::std::os::raw::c_int,
        pathname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_obj_pin_opts(
        fd: ::std::os::raw::c_int,
        pathname: *const ::std::os::raw::c_char,
        opts: *const bpf_obj_pin_opts,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_obj_get_opts {
    pub sz: usize,
    pub file_flags: __u32,
    pub path_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_obj_get_opts"][::std::mem::size_of::<bpf_obj_get_opts>() - 16usize];
    ["Alignment of bpf_obj_get_opts"][::std::mem::align_of::<bpf_obj_get_opts>() - 8usize];
    ["Offset of field: bpf_obj_get_opts::sz"]
        [::std::mem::offset_of!(bpf_obj_get_opts, sz) - 0usize];
    ["Offset of field: bpf_obj_get_opts::file_flags"]
        [::std::mem::offset_of!(bpf_obj_get_opts, file_flags) - 8usize];
    ["Offset of field: bpf_obj_get_opts::path_fd"]
        [::std::mem::offset_of!(bpf_obj_get_opts, path_fd) - 12usize];
};
extern "C" {
    pub fn bpf_obj_get(pathname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_obj_get_opts(
        pathname: *const ::std::os::raw::c_char,
        opts: *const bpf_obj_get_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_prog_attach(
        prog_fd: ::std::os::raw::c_int,
        attachable_fd: ::std::os::raw::c_int,
        type_: bpf_attach_type,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_prog_detach(
        attachable_fd: ::std::os::raw::c_int,
        type_: bpf_attach_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_prog_detach2(
        prog_fd: ::std::os::raw::c_int,
        attachable_fd: ::std::os::raw::c_int,
        type_: bpf_attach_type,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_prog_attach_opts {
    pub sz: usize,
    pub flags: __u32,
    pub __bindgen_anon_1: bpf_prog_attach_opts__bindgen_ty_1,
    pub relative_fd: ::std::os::raw::c_int,
    pub relative_id: __u32,
    pub expected_revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_prog_attach_opts__bindgen_ty_1 {
    pub replace_prog_fd: ::std::os::raw::c_int,
    pub replace_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_attach_opts__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_prog_attach_opts__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_prog_attach_opts__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_prog_attach_opts__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_prog_attach_opts__bindgen_ty_1::replace_prog_fd"]
        [::std::mem::offset_of!(bpf_prog_attach_opts__bindgen_ty_1, replace_prog_fd) - 0usize];
    ["Offset of field: bpf_prog_attach_opts__bindgen_ty_1::replace_fd"]
        [::std::mem::offset_of!(bpf_prog_attach_opts__bindgen_ty_1, replace_fd) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_attach_opts"][::std::mem::size_of::<bpf_prog_attach_opts>() - 32usize];
    ["Alignment of bpf_prog_attach_opts"][::std::mem::align_of::<bpf_prog_attach_opts>() - 8usize];
    ["Offset of field: bpf_prog_attach_opts::sz"]
        [::std::mem::offset_of!(bpf_prog_attach_opts, sz) - 0usize];
    ["Offset of field: bpf_prog_attach_opts::flags"]
        [::std::mem::offset_of!(bpf_prog_attach_opts, flags) - 8usize];
    ["Offset of field: bpf_prog_attach_opts::relative_fd"]
        [::std::mem::offset_of!(bpf_prog_attach_opts, relative_fd) - 16usize];
    ["Offset of field: bpf_prog_attach_opts::relative_id"]
        [::std::mem::offset_of!(bpf_prog_attach_opts, relative_id) - 20usize];
    ["Offset of field: bpf_prog_attach_opts::expected_revision"]
        [::std::mem::offset_of!(bpf_prog_attach_opts, expected_revision) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_prog_detach_opts {
    pub sz: usize,
    pub flags: __u32,
    pub relative_fd: ::std::os::raw::c_int,
    pub relative_id: __u32,
    pub expected_revision: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_detach_opts"][::std::mem::size_of::<bpf_prog_detach_opts>() - 32usize];
    ["Alignment of bpf_prog_detach_opts"][::std::mem::align_of::<bpf_prog_detach_opts>() - 8usize];
    ["Offset of field: bpf_prog_detach_opts::sz"]
        [::std::mem::offset_of!(bpf_prog_detach_opts, sz) - 0usize];
    ["Offset of field: bpf_prog_detach_opts::flags"]
        [::std::mem::offset_of!(bpf_prog_detach_opts, flags) - 8usize];
    ["Offset of field: bpf_prog_detach_opts::relative_fd"]
        [::std::mem::offset_of!(bpf_prog_detach_opts, relative_fd) - 12usize];
    ["Offset of field: bpf_prog_detach_opts::relative_id"]
        [::std::mem::offset_of!(bpf_prog_detach_opts, relative_id) - 16usize];
    ["Offset of field: bpf_prog_detach_opts::expected_revision"]
        [::std::mem::offset_of!(bpf_prog_detach_opts, expected_revision) - 24usize];
};
extern "C" {
    #[doc = " @brief **bpf_prog_attach_opts()** attaches the BPF program corresponding to\n *prog_fd* to a *target* which can represent a file descriptor or netdevice\n ifindex.\n\n @param prog_fd BPF program file descriptor\n @param target attach location file descriptor or ifindex\n @param type attach type for the BPF program\n @param opts options for configuring the attachment\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_prog_attach_opts(
        prog_fd: ::std::os::raw::c_int,
        target: ::std::os::raw::c_int,
        type_: bpf_attach_type,
        opts: *const bpf_prog_attach_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_prog_detach_opts()** detaches the BPF program corresponding to\n *prog_fd* from a *target* which can represent a file descriptor or netdevice\n ifindex.\n\n @param prog_fd BPF program file descriptor\n @param target detach location file descriptor or ifindex\n @param type detach type for the BPF program\n @param opts options for configuring the detachment\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_prog_detach_opts(
        prog_fd: ::std::os::raw::c_int,
        target: ::std::os::raw::c_int,
        type_: bpf_attach_type,
        opts: *const bpf_prog_detach_opts,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_link_create_opts {
    pub sz: usize,
    pub flags: __u32,
    pub iter_info: *mut bpf_iter_link_info,
    pub iter_info_len: __u32,
    pub target_btf_id: __u32,
    pub __bindgen_anon_1: bpf_link_create_opts__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_link_create_opts__bindgen_ty_1 {
    pub perf_event: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_1,
    pub kprobe_multi: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2,
    pub uprobe_multi: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3,
    pub tracing: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_4,
    pub netfilter: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5,
    pub tcx: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6,
    pub netkit: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_create_opts__bindgen_ty_1__bindgen_ty_1 {
    pub bpf_cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_1::bpf_cookie"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_1,
        bpf_cookie
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2 {
    pub flags: __u32,
    pub cnt: __u32,
    pub syms: *mut *const ::std::os::raw::c_char,
    pub addrs: *const ::std::os::raw::c_ulong,
    pub cookies: *const __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2>() - 32usize];
    ["Alignment of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2::flags"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2, flags) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2::cnt"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2, cnt) - 4usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2::syms"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2, syms) - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2::addrs"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2, addrs) - 16usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2::cookies"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_2,
        cookies
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3 {
    pub flags: __u32,
    pub cnt: __u32,
    pub path: *const ::std::os::raw::c_char,
    pub offsets: *const ::std::os::raw::c_ulong,
    pub ref_ctr_offsets: *const ::std::os::raw::c_ulong,
    pub cookies: *const __u64,
    pub pid: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3>() - 48usize];
    ["Alignment of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3::flags"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3, flags) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3::cnt"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3, cnt) - 4usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3::path"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3, path) - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3::offsets"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3,
        offsets
    ) - 16usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3::ref_ctr_offsets"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3,
        ref_ctr_offsets
    )
        - 24usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3::cookies"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3,
        cookies
    ) - 32usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3::pid"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_3, pid) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_create_opts__bindgen_ty_1__bindgen_ty_4 {
    pub cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Alignment of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_4::cookie"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_4, cookie) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5 {
    pub pf: __u32,
    pub hooknum: __u32,
    pub priority: __s32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5>() - 16usize];
    ["Alignment of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5>() - 4usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5::pf"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5, pf) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5::hooknum"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5,
        hooknum
    ) - 4usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5::priority"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5,
        priority
    ) - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5::flags"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1__bindgen_ty_5, flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6 {
    pub relative_fd: __u32,
    pub relative_id: __u32,
    pub expected_revision: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::size_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6>() - 16usize];
    ["Alignment of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6>() - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6::relative_fd"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6,
        relative_fd
    ) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6::relative_id"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6,
        relative_id
    ) - 4usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6::expected_revision"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_6,
        expected_revision
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7 {
    pub relative_fd: __u32,
    pub relative_id: __u32,
    pub expected_revision: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::size_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7>() - 16usize];
    ["Alignment of bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::align_of::<bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7>() - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7::relative_fd"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7,
        relative_fd
    ) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7::relative_id"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7,
        relative_id
    ) - 4usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7::expected_revision"][::std::mem::offset_of!(
        bpf_link_create_opts__bindgen_ty_1__bindgen_ty_7,
        expected_revision
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_create_opts__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_link_create_opts__bindgen_ty_1>() - 48usize];
    ["Alignment of bpf_link_create_opts__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_link_create_opts__bindgen_ty_1>() - 8usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1::perf_event"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1, perf_event) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1::kprobe_multi"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1, kprobe_multi) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1::uprobe_multi"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1, uprobe_multi) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1::tracing"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1, tracing) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1::netfilter"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1, netfilter) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1::tcx"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1, tcx) - 0usize];
    ["Offset of field: bpf_link_create_opts__bindgen_ty_1::netkit"]
        [::std::mem::offset_of!(bpf_link_create_opts__bindgen_ty_1, netkit) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_create_opts"][::std::mem::size_of::<bpf_link_create_opts>() - 80usize];
    ["Alignment of bpf_link_create_opts"][::std::mem::align_of::<bpf_link_create_opts>() - 8usize];
    ["Offset of field: bpf_link_create_opts::sz"]
        [::std::mem::offset_of!(bpf_link_create_opts, sz) - 0usize];
    ["Offset of field: bpf_link_create_opts::flags"]
        [::std::mem::offset_of!(bpf_link_create_opts, flags) - 8usize];
    ["Offset of field: bpf_link_create_opts::iter_info"]
        [::std::mem::offset_of!(bpf_link_create_opts, iter_info) - 16usize];
    ["Offset of field: bpf_link_create_opts::iter_info_len"]
        [::std::mem::offset_of!(bpf_link_create_opts, iter_info_len) - 24usize];
    ["Offset of field: bpf_link_create_opts::target_btf_id"]
        [::std::mem::offset_of!(bpf_link_create_opts, target_btf_id) - 28usize];
};
extern "C" {
    pub fn bpf_link_create(
        prog_fd: ::std::os::raw::c_int,
        target_fd: ::std::os::raw::c_int,
        attach_type: bpf_attach_type,
        opts: *const bpf_link_create_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_link_detach(link_fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_link_update_opts {
    pub sz: usize,
    pub flags: __u32,
    pub old_prog_fd: __u32,
    pub old_map_fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_link_update_opts"][::std::mem::size_of::<bpf_link_update_opts>() - 24usize];
    ["Alignment of bpf_link_update_opts"][::std::mem::align_of::<bpf_link_update_opts>() - 8usize];
    ["Offset of field: bpf_link_update_opts::sz"]
        [::std::mem::offset_of!(bpf_link_update_opts, sz) - 0usize];
    ["Offset of field: bpf_link_update_opts::flags"]
        [::std::mem::offset_of!(bpf_link_update_opts, flags) - 8usize];
    ["Offset of field: bpf_link_update_opts::old_prog_fd"]
        [::std::mem::offset_of!(bpf_link_update_opts, old_prog_fd) - 12usize];
    ["Offset of field: bpf_link_update_opts::old_map_fd"]
        [::std::mem::offset_of!(bpf_link_update_opts, old_map_fd) - 16usize];
};
extern "C" {
    pub fn bpf_link_update(
        link_fd: ::std::os::raw::c_int,
        new_prog_fd: ::std::os::raw::c_int,
        opts: *const bpf_link_update_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_iter_create(link_fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_prog_test_run_attr {
    pub prog_fd: ::std::os::raw::c_int,
    pub repeat: ::std::os::raw::c_int,
    pub data_in: *const ::std::os::raw::c_void,
    pub data_size_in: __u32,
    pub data_out: *mut ::std::os::raw::c_void,
    pub data_size_out: __u32,
    pub retval: __u32,
    pub duration: __u32,
    pub ctx_in: *const ::std::os::raw::c_void,
    pub ctx_size_in: __u32,
    pub ctx_out: *mut ::std::os::raw::c_void,
    pub ctx_size_out: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_test_run_attr"][::std::mem::size_of::<bpf_prog_test_run_attr>() - 80usize];
    ["Alignment of bpf_prog_test_run_attr"]
        [::std::mem::align_of::<bpf_prog_test_run_attr>() - 8usize];
    ["Offset of field: bpf_prog_test_run_attr::prog_fd"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, prog_fd) - 0usize];
    ["Offset of field: bpf_prog_test_run_attr::repeat"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, repeat) - 4usize];
    ["Offset of field: bpf_prog_test_run_attr::data_in"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, data_in) - 8usize];
    ["Offset of field: bpf_prog_test_run_attr::data_size_in"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, data_size_in) - 16usize];
    ["Offset of field: bpf_prog_test_run_attr::data_out"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, data_out) - 24usize];
    ["Offset of field: bpf_prog_test_run_attr::data_size_out"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, data_size_out) - 32usize];
    ["Offset of field: bpf_prog_test_run_attr::retval"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, retval) - 36usize];
    ["Offset of field: bpf_prog_test_run_attr::duration"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, duration) - 40usize];
    ["Offset of field: bpf_prog_test_run_attr::ctx_in"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, ctx_in) - 48usize];
    ["Offset of field: bpf_prog_test_run_attr::ctx_size_in"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, ctx_size_in) - 56usize];
    ["Offset of field: bpf_prog_test_run_attr::ctx_out"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, ctx_out) - 64usize];
    ["Offset of field: bpf_prog_test_run_attr::ctx_size_out"]
        [::std::mem::offset_of!(bpf_prog_test_run_attr, ctx_size_out) - 72usize];
};
extern "C" {
    pub fn bpf_prog_get_next_id(start_id: __u32, next_id: *mut __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_get_next_id(start_id: __u32, next_id: *mut __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_btf_get_next_id(start_id: __u32, next_id: *mut __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_link_get_next_id(start_id: __u32, next_id: *mut __u32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_get_fd_by_id_opts {
    pub sz: usize,
    pub open_flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_get_fd_by_id_opts"][::std::mem::size_of::<bpf_get_fd_by_id_opts>() - 16usize];
    ["Alignment of bpf_get_fd_by_id_opts"]
        [::std::mem::align_of::<bpf_get_fd_by_id_opts>() - 8usize];
    ["Offset of field: bpf_get_fd_by_id_opts::sz"]
        [::std::mem::offset_of!(bpf_get_fd_by_id_opts, sz) - 0usize];
    ["Offset of field: bpf_get_fd_by_id_opts::open_flags"]
        [::std::mem::offset_of!(bpf_get_fd_by_id_opts, open_flags) - 8usize];
};
extern "C" {
    pub fn bpf_prog_get_fd_by_id(id: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_prog_get_fd_by_id_opts(
        id: __u32,
        opts: *const bpf_get_fd_by_id_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_get_fd_by_id(id: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_map_get_fd_by_id_opts(
        id: __u32,
        opts: *const bpf_get_fd_by_id_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_btf_get_fd_by_id(id: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_btf_get_fd_by_id_opts(
        id: __u32,
        opts: *const bpf_get_fd_by_id_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_link_get_fd_by_id(id: __u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_link_get_fd_by_id_opts(
        id: __u32,
        opts: *const bpf_get_fd_by_id_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_obj_get_info_by_fd(
        bpf_fd: ::std::os::raw::c_int,
        info: *mut ::std::os::raw::c_void,
        info_len: *mut __u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_prog_get_info_by_fd()** obtains information about the BPF\n program corresponding to *prog_fd*.\n\n Populates up to *info_len* bytes of *info* and updates *info_len* with the\n actual number of bytes written to *info*. Note that *info* should be\n zero-initialized or initialized as expected by the requested *info*\n type. Failing to (zero-)initialize *info* under certain circumstances can\n result in this helper returning an error.\n\n @param prog_fd BPF program file descriptor\n @param info pointer to **struct bpf_prog_info** that will be populated with\n BPF program information\n @param info_len pointer to the size of *info*; on success updated with the\n number of bytes written to *info*\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_prog_get_info_by_fd(
        prog_fd: ::std::os::raw::c_int,
        info: *mut bpf_prog_info,
        info_len: *mut __u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_map_get_info_by_fd()** obtains information about the BPF\n map corresponding to *map_fd*.\n\n Populates up to *info_len* bytes of *info* and updates *info_len* with the\n actual number of bytes written to *info*. Note that *info* should be\n zero-initialized or initialized as expected by the requested *info*\n type. Failing to (zero-)initialize *info* under certain circumstances can\n result in this helper returning an error.\n\n @param map_fd BPF map file descriptor\n @param info pointer to **struct bpf_map_info** that will be populated with\n BPF map information\n @param info_len pointer to the size of *info*; on success updated with the\n number of bytes written to *info*\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_map_get_info_by_fd(
        map_fd: ::std::os::raw::c_int,
        info: *mut bpf_map_info,
        info_len: *mut __u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_btf_get_info_by_fd()** obtains information about the\n BTF object corresponding to *btf_fd*.\n\n Populates up to *info_len* bytes of *info* and updates *info_len* with the\n actual number of bytes written to *info*. Note that *info* should be\n zero-initialized or initialized as expected by the requested *info*\n type. Failing to (zero-)initialize *info* under certain circumstances can\n result in this helper returning an error.\n\n @param btf_fd BTF object file descriptor\n @param info pointer to **struct bpf_btf_info** that will be populated with\n BTF object information\n @param info_len pointer to the size of *info*; on success updated with the\n number of bytes written to *info*\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_btf_get_info_by_fd(
        btf_fd: ::std::os::raw::c_int,
        info: *mut bpf_btf_info,
        info_len: *mut __u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief **bpf_btf_get_info_by_fd()** obtains information about the BPF\n link corresponding to *link_fd*.\n\n Populates up to *info_len* bytes of *info* and updates *info_len* with the\n actual number of bytes written to *info*. Note that *info* should be\n zero-initialized or initialized as expected by the requested *info*\n type. Failing to (zero-)initialize *info* under certain circumstances can\n result in this helper returning an error.\n\n @param link_fd BPF link file descriptor\n @param info pointer to **struct bpf_link_info** that will be populated with\n BPF link information\n @param info_len pointer to the size of *info*; on success updated with the\n number of bytes written to *info*\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_link_get_info_by_fd(
        link_fd: ::std::os::raw::c_int,
        info: *mut bpf_link_info,
        info_len: *mut __u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_prog_query_opts {
    pub sz: usize,
    pub query_flags: __u32,
    pub attach_flags: __u32,
    pub prog_ids: *mut __u32,
    pub __bindgen_anon_1: bpf_prog_query_opts__bindgen_ty_1,
    pub prog_attach_flags: *mut __u32,
    pub link_ids: *mut __u32,
    pub link_attach_flags: *mut __u32,
    pub revision: __u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bpf_prog_query_opts__bindgen_ty_1 {
    pub prog_cnt: __u32,
    pub count: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_query_opts__bindgen_ty_1"]
        [::std::mem::size_of::<bpf_prog_query_opts__bindgen_ty_1>() - 4usize];
    ["Alignment of bpf_prog_query_opts__bindgen_ty_1"]
        [::std::mem::align_of::<bpf_prog_query_opts__bindgen_ty_1>() - 4usize];
    ["Offset of field: bpf_prog_query_opts__bindgen_ty_1::prog_cnt"]
        [::std::mem::offset_of!(bpf_prog_query_opts__bindgen_ty_1, prog_cnt) - 0usize];
    ["Offset of field: bpf_prog_query_opts__bindgen_ty_1::count"]
        [::std::mem::offset_of!(bpf_prog_query_opts__bindgen_ty_1, count) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_query_opts"][::std::mem::size_of::<bpf_prog_query_opts>() - 64usize];
    ["Alignment of bpf_prog_query_opts"][::std::mem::align_of::<bpf_prog_query_opts>() - 8usize];
    ["Offset of field: bpf_prog_query_opts::sz"]
        [::std::mem::offset_of!(bpf_prog_query_opts, sz) - 0usize];
    ["Offset of field: bpf_prog_query_opts::query_flags"]
        [::std::mem::offset_of!(bpf_prog_query_opts, query_flags) - 8usize];
    ["Offset of field: bpf_prog_query_opts::attach_flags"]
        [::std::mem::offset_of!(bpf_prog_query_opts, attach_flags) - 12usize];
    ["Offset of field: bpf_prog_query_opts::prog_ids"]
        [::std::mem::offset_of!(bpf_prog_query_opts, prog_ids) - 16usize];
    ["Offset of field: bpf_prog_query_opts::prog_attach_flags"]
        [::std::mem::offset_of!(bpf_prog_query_opts, prog_attach_flags) - 32usize];
    ["Offset of field: bpf_prog_query_opts::link_ids"]
        [::std::mem::offset_of!(bpf_prog_query_opts, link_ids) - 40usize];
    ["Offset of field: bpf_prog_query_opts::link_attach_flags"]
        [::std::mem::offset_of!(bpf_prog_query_opts, link_attach_flags) - 48usize];
    ["Offset of field: bpf_prog_query_opts::revision"]
        [::std::mem::offset_of!(bpf_prog_query_opts, revision) - 56usize];
};
extern "C" {
    #[doc = " @brief **bpf_prog_query_opts()** queries the BPF programs and BPF links\n which are attached to *target* which can represent a file descriptor or\n netdevice ifindex.\n\n @param target query location file descriptor or ifindex\n @param type attach type for the BPF program\n @param opts options for configuring the query\n @return 0, on success; negative error code, otherwise (errno is also set to\n the error code)"]
    pub fn bpf_prog_query_opts(
        target: ::std::os::raw::c_int,
        type_: bpf_attach_type,
        opts: *mut bpf_prog_query_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_prog_query(
        target_fd: ::std::os::raw::c_int,
        type_: bpf_attach_type,
        query_flags: __u32,
        attach_flags: *mut __u32,
        prog_ids: *mut __u32,
        prog_cnt: *mut __u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_raw_tp_opts {
    pub sz: usize,
    pub tp_name: *const ::std::os::raw::c_char,
    pub cookie: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_raw_tp_opts"][::std::mem::size_of::<bpf_raw_tp_opts>() - 24usize];
    ["Alignment of bpf_raw_tp_opts"][::std::mem::align_of::<bpf_raw_tp_opts>() - 8usize];
    ["Offset of field: bpf_raw_tp_opts::sz"][::std::mem::offset_of!(bpf_raw_tp_opts, sz) - 0usize];
    ["Offset of field: bpf_raw_tp_opts::tp_name"]
        [::std::mem::offset_of!(bpf_raw_tp_opts, tp_name) - 8usize];
    ["Offset of field: bpf_raw_tp_opts::cookie"]
        [::std::mem::offset_of!(bpf_raw_tp_opts, cookie) - 16usize];
};
extern "C" {
    pub fn bpf_raw_tracepoint_open_opts(
        prog_fd: ::std::os::raw::c_int,
        opts: *mut bpf_raw_tp_opts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_raw_tracepoint_open(
        name: *const ::std::os::raw::c_char,
        prog_fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_task_fd_query(
        pid: ::std::os::raw::c_int,
        fd: ::std::os::raw::c_int,
        flags: __u32,
        buf: *mut ::std::os::raw::c_char,
        buf_len: *mut __u32,
        prog_id: *mut __u32,
        fd_type: *mut __u32,
        probe_offset: *mut __u64,
        probe_addr: *mut __u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bpf_enable_stats(type_: bpf_stats_type) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_prog_bind_opts {
    pub sz: usize,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_prog_bind_opts"][::std::mem::size_of::<bpf_prog_bind_opts>() - 16usize];
    ["Alignment of bpf_prog_bind_opts"][::std::mem::align_of::<bpf_prog_bind_opts>() - 8usize];
    ["Offset of field: bpf_prog_bind_opts::sz"]
        [::std::mem::offset_of!(bpf_prog_bind_opts, sz) - 0usize];
    ["Offset of field: bpf_prog_bind_opts::flags"]
        [::std::mem::offset_of!(bpf_prog_bind_opts, flags) - 8usize];
};
extern "C" {
    pub fn bpf_prog_bind_map(
        prog_fd: ::std::os::raw::c_int,
        map_fd: ::std::os::raw::c_int,
        opts: *const bpf_prog_bind_opts,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_test_run_opts {
    pub sz: usize,
    pub data_in: *const ::std::os::raw::c_void,
    pub data_out: *mut ::std::os::raw::c_void,
    pub data_size_in: __u32,
    pub data_size_out: __u32,
    pub ctx_in: *const ::std::os::raw::c_void,
    pub ctx_out: *mut ::std::os::raw::c_void,
    pub ctx_size_in: __u32,
    pub ctx_size_out: __u32,
    pub retval: __u32,
    pub repeat: ::std::os::raw::c_int,
    pub duration: __u32,
    pub flags: __u32,
    pub cpu: __u32,
    pub batch_size: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_test_run_opts"][::std::mem::size_of::<bpf_test_run_opts>() - 80usize];
    ["Alignment of bpf_test_run_opts"][::std::mem::align_of::<bpf_test_run_opts>() - 8usize];
    ["Offset of field: bpf_test_run_opts::sz"]
        [::std::mem::offset_of!(bpf_test_run_opts, sz) - 0usize];
    ["Offset of field: bpf_test_run_opts::data_in"]
        [::std::mem::offset_of!(bpf_test_run_opts, data_in) - 8usize];
    ["Offset of field: bpf_test_run_opts::data_out"]
        [::std::mem::offset_of!(bpf_test_run_opts, data_out) - 16usize];
    ["Offset of field: bpf_test_run_opts::data_size_in"]
        [::std::mem::offset_of!(bpf_test_run_opts, data_size_in) - 24usize];
    ["Offset of field: bpf_test_run_opts::data_size_out"]
        [::std::mem::offset_of!(bpf_test_run_opts, data_size_out) - 28usize];
    ["Offset of field: bpf_test_run_opts::ctx_in"]
        [::std::mem::offset_of!(bpf_test_run_opts, ctx_in) - 32usize];
    ["Offset of field: bpf_test_run_opts::ctx_out"]
        [::std::mem::offset_of!(bpf_test_run_opts, ctx_out) - 40usize];
    ["Offset of field: bpf_test_run_opts::ctx_size_in"]
        [::std::mem::offset_of!(bpf_test_run_opts, ctx_size_in) - 48usize];
    ["Offset of field: bpf_test_run_opts::ctx_size_out"]
        [::std::mem::offset_of!(bpf_test_run_opts, ctx_size_out) - 52usize];
    ["Offset of field: bpf_test_run_opts::retval"]
        [::std::mem::offset_of!(bpf_test_run_opts, retval) - 56usize];
    ["Offset of field: bpf_test_run_opts::repeat"]
        [::std::mem::offset_of!(bpf_test_run_opts, repeat) - 60usize];
    ["Offset of field: bpf_test_run_opts::duration"]
        [::std::mem::offset_of!(bpf_test_run_opts, duration) - 64usize];
    ["Offset of field: bpf_test_run_opts::flags"]
        [::std::mem::offset_of!(bpf_test_run_opts, flags) - 68usize];
    ["Offset of field: bpf_test_run_opts::cpu"]
        [::std::mem::offset_of!(bpf_test_run_opts, cpu) - 72usize];
    ["Offset of field: bpf_test_run_opts::batch_size"]
        [::std::mem::offset_of!(bpf_test_run_opts, batch_size) - 76usize];
};
extern "C" {
    pub fn bpf_prog_test_run_opts(
        prog_fd: ::std::os::raw::c_int,
        opts: *mut bpf_test_run_opts,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_token_create_opts {
    pub sz: usize,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_token_create_opts"][::std::mem::size_of::<bpf_token_create_opts>() - 16usize];
    ["Alignment of bpf_token_create_opts"]
        [::std::mem::align_of::<bpf_token_create_opts>() - 8usize];
    ["Offset of field: bpf_token_create_opts::sz"]
        [::std::mem::offset_of!(bpf_token_create_opts, sz) - 0usize];
    ["Offset of field: bpf_token_create_opts::flags"]
        [::std::mem::offset_of!(bpf_token_create_opts, flags) - 8usize];
};
extern "C" {
    #[doc = " @brief **bpf_token_create()** creates a new instance of BPF token derived\n from specified BPF FS mount point.\n\n BPF token created with this API can be passed to bpf() syscall for\n commands like BPF_PROG_LOAD, BPF_MAP_CREATE, etc.\n\n @param bpffs_fd FD for BPF FS instance from which to derive a BPF token\n instance.\n @param opts optional BPF token creation options, can be NULL\n\n @return BPF token FD > 0, on success; negative error code, otherwise (errno\n is also set to the error code)"]
    pub fn bpf_token_create(
        bpffs_fd: ::std::os::raw::c_int,
        opts: *mut bpf_token_create_opts,
    ) -> ::std::os::raw::c_int;
}
pub const xdp_attach_mode_XDP_MODE_UNSPEC: xdp_attach_mode = 0;
pub const xdp_attach_mode_XDP_MODE_NATIVE: xdp_attach_mode = 1;
pub const xdp_attach_mode_XDP_MODE_SKB: xdp_attach_mode = 2;
pub const xdp_attach_mode_XDP_MODE_HW: xdp_attach_mode = 3;
pub type xdp_attach_mode = ::std::os::raw::c_uint;
pub const libxdp_print_level_LIBXDP_WARN: libxdp_print_level = 0;
pub const libxdp_print_level_LIBXDP_INFO: libxdp_print_level = 1;
pub const libxdp_print_level_LIBXDP_DEBUG: libxdp_print_level = 2;
pub type libxdp_print_level = ::std::os::raw::c_uint;
pub type libxdp_print_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        level: libxdp_print_level,
        arg1: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn libxdp_set_print(fn_: libxdp_print_fn_t) -> libxdp_print_fn_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_program {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_multiprog {
    _unused: [u8; 0],
}
extern "C" {
    pub fn libxdp_get_error(ptr: *const ::std::os::raw::c_void) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn libxdp_strerror(
        err: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libxdp_clean_references(ifindex: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__from_bpf_obj(
        obj: *mut bpf_object,
        section_name: *const ::std::os::raw::c_char,
    ) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_program__find_file(
        filename: *const ::std::os::raw::c_char,
        section_name: *const ::std::os::raw::c_char,
        opts: *mut bpf_object_open_opts,
    ) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_program__open_file(
        filename: *const ::std::os::raw::c_char,
        section_name: *const ::std::os::raw::c_char,
        opts: *mut bpf_object_open_opts,
    ) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_program__from_fd(fd: ::std::os::raw::c_int) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_program__from_id(prog_id: __u32) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_program__from_pin(pin_path: *const ::std::os::raw::c_char) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_program__clone(
        xdp_prog: *mut xdp_program,
        flags: ::std::os::raw::c_uint,
    ) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_program__close(xdp_prog: *mut xdp_program);
}
extern "C" {
    pub fn xdp_program__test_run(
        xdp_prog: *mut xdp_program,
        opts: *mut bpf_test_run_opts,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__is_attached(
        xdp_prog: *const xdp_program,
        ifindex: ::std::os::raw::c_int,
    ) -> xdp_attach_mode;
}
extern "C" {
    pub fn xdp_program__name(xdp_prog: *const xdp_program) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xdp_program__tag(xdp_prog: *const xdp_program) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn xdp_program__bpf_obj(xdp_prog: *mut xdp_program) -> *mut bpf_object;
}
extern "C" {
    pub fn xdp_program__btf(xdp_prog: *mut xdp_program) -> *const btf;
}
extern "C" {
    pub fn xdp_program__id(xdp_prog: *const xdp_program) -> u32;
}
extern "C" {
    pub fn xdp_program__fd(xdp_prog: *const xdp_program) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__run_prio(xdp_prog: *const xdp_program) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn xdp_program__set_run_prio(
        xdp_prog: *mut xdp_program,
        run_prio: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__chain_call_enabled(
        xdp_prog: *const xdp_program,
        action: xdp_action,
    ) -> bool;
}
extern "C" {
    pub fn xdp_program__set_chain_call_enabled(
        prog: *mut xdp_program,
        action: ::std::os::raw::c_uint,
        enabled: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__print_chain_call_actions(
        prog: *const xdp_program,
        buf: *mut ::std::os::raw::c_char,
        buf_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__xdp_frags_support(prog: *const xdp_program) -> bool;
}
extern "C" {
    pub fn xdp_program__set_xdp_frags_support(
        prog: *mut xdp_program,
        frags: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__pin(
        xdp_prog: *mut xdp_program,
        pin_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__attach(
        xdp_prog: *mut xdp_program,
        ifindex: ::std::os::raw::c_int,
        mode: xdp_attach_mode,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__attach_multi(
        progs: *mut *mut xdp_program,
        num_progs: usize,
        ifindex: ::std::os::raw::c_int,
        mode: xdp_attach_mode,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__detach(
        xdp_prog: *mut xdp_program,
        ifindex: ::std::os::raw::c_int,
        mode: xdp_attach_mode,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_program__detach_multi(
        progs: *mut *mut xdp_program,
        num_progs: usize,
        ifindex: ::std::os::raw::c_int,
        mode: xdp_attach_mode,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_multiprog__get_from_ifindex(ifindex: ::std::os::raw::c_int) -> *mut xdp_multiprog;
}
extern "C" {
    pub fn xdp_multiprog__next_prog(
        prog: *const xdp_program,
        mp: *const xdp_multiprog,
    ) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_multiprog__close(mp: *mut xdp_multiprog);
}
extern "C" {
    pub fn xdp_multiprog__detach(mp: *mut xdp_multiprog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_multiprog__attach_mode(mp: *const xdp_multiprog) -> xdp_attach_mode;
}
extern "C" {
    pub fn xdp_multiprog__main_prog(mp: *const xdp_multiprog) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_multiprog__hw_prog(mp: *const xdp_multiprog) -> *mut xdp_program;
}
extern "C" {
    pub fn xdp_multiprog__is_legacy(mp: *const xdp_multiprog) -> bool;
}
extern "C" {
    pub fn xdp_multiprog__program_count(mp: *const xdp_multiprog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdp_multiprog__xdp_frags_support(mp: *const xdp_multiprog) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_program_opts {
    pub sz: usize,
    pub obj: *mut bpf_object,
    pub opts: *mut bpf_object_open_opts,
    pub prog_name: *const ::std::os::raw::c_char,
    pub find_filename: *const ::std::os::raw::c_char,
    pub open_filename: *const ::std::os::raw::c_char,
    pub pin_path: *const ::std::os::raw::c_char,
    pub id: __u32,
    pub fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_program_opts"][::std::mem::size_of::<xdp_program_opts>() - 64usize];
    ["Alignment of xdp_program_opts"][::std::mem::align_of::<xdp_program_opts>() - 8usize];
    ["Offset of field: xdp_program_opts::sz"]
        [::std::mem::offset_of!(xdp_program_opts, sz) - 0usize];
    ["Offset of field: xdp_program_opts::obj"]
        [::std::mem::offset_of!(xdp_program_opts, obj) - 8usize];
    ["Offset of field: xdp_program_opts::opts"]
        [::std::mem::offset_of!(xdp_program_opts, opts) - 16usize];
    ["Offset of field: xdp_program_opts::prog_name"]
        [::std::mem::offset_of!(xdp_program_opts, prog_name) - 24usize];
    ["Offset of field: xdp_program_opts::find_filename"]
        [::std::mem::offset_of!(xdp_program_opts, find_filename) - 32usize];
    ["Offset of field: xdp_program_opts::open_filename"]
        [::std::mem::offset_of!(xdp_program_opts, open_filename) - 40usize];
    ["Offset of field: xdp_program_opts::pin_path"]
        [::std::mem::offset_of!(xdp_program_opts, pin_path) - 48usize];
    ["Offset of field: xdp_program_opts::id"]
        [::std::mem::offset_of!(xdp_program_opts, id) - 56usize];
    ["Offset of field: xdp_program_opts::fd"]
        [::std::mem::offset_of!(xdp_program_opts, fd) - 60usize];
};
extern "C" {
    pub fn xdp_program__create(opts: *mut xdp_program_opts) -> *mut xdp_program;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_dispatcher_config {
    pub magic: __u8,
    pub dispatcher_version: __u8,
    pub num_progs_enabled: __u8,
    pub is_xdp_frags: __u8,
    pub chain_call_actions: [__u32; 10usize],
    pub run_prios: [__u32; 10usize],
    pub program_flags: [__u32; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_dispatcher_config"][::std::mem::size_of::<xdp_dispatcher_config>() - 124usize];
    ["Alignment of xdp_dispatcher_config"]
        [::std::mem::align_of::<xdp_dispatcher_config>() - 4usize];
    ["Offset of field: xdp_dispatcher_config::magic"]
        [::std::mem::offset_of!(xdp_dispatcher_config, magic) - 0usize];
    ["Offset of field: xdp_dispatcher_config::dispatcher_version"]
        [::std::mem::offset_of!(xdp_dispatcher_config, dispatcher_version) - 1usize];
    ["Offset of field: xdp_dispatcher_config::num_progs_enabled"]
        [::std::mem::offset_of!(xdp_dispatcher_config, num_progs_enabled) - 2usize];
    ["Offset of field: xdp_dispatcher_config::is_xdp_frags"]
        [::std::mem::offset_of!(xdp_dispatcher_config, is_xdp_frags) - 3usize];
    ["Offset of field: xdp_dispatcher_config::chain_call_actions"]
        [::std::mem::offset_of!(xdp_dispatcher_config, chain_call_actions) - 4usize];
    ["Offset of field: xdp_dispatcher_config::run_prios"]
        [::std::mem::offset_of!(xdp_dispatcher_config, run_prios) - 44usize];
    ["Offset of field: xdp_dispatcher_config::program_flags"]
        [::std::mem::offset_of!(xdp_dispatcher_config, program_flags) - 84usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xdp_stats_record {
    pub __bindgen_anon_1: xdp_stats_record__bindgen_ty_1,
    pub __bindgen_anon_2: xdp_stats_record__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xdp_stats_record__bindgen_ty_1 {
    pub packets: __u64,
    pub rx_packets: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_stats_record__bindgen_ty_1"]
        [::std::mem::size_of::<xdp_stats_record__bindgen_ty_1>() - 8usize];
    ["Alignment of xdp_stats_record__bindgen_ty_1"]
        [::std::mem::align_of::<xdp_stats_record__bindgen_ty_1>() - 8usize];
    ["Offset of field: xdp_stats_record__bindgen_ty_1::packets"]
        [::std::mem::offset_of!(xdp_stats_record__bindgen_ty_1, packets) - 0usize];
    ["Offset of field: xdp_stats_record__bindgen_ty_1::rx_packets"]
        [::std::mem::offset_of!(xdp_stats_record__bindgen_ty_1, rx_packets) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union xdp_stats_record__bindgen_ty_2 {
    pub bytes: __u64,
    pub rx_bytes: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_stats_record__bindgen_ty_2"]
        [::std::mem::size_of::<xdp_stats_record__bindgen_ty_2>() - 8usize];
    ["Alignment of xdp_stats_record__bindgen_ty_2"]
        [::std::mem::align_of::<xdp_stats_record__bindgen_ty_2>() - 8usize];
    ["Offset of field: xdp_stats_record__bindgen_ty_2::bytes"]
        [::std::mem::offset_of!(xdp_stats_record__bindgen_ty_2, bytes) - 0usize];
    ["Offset of field: xdp_stats_record__bindgen_ty_2::rx_bytes"]
        [::std::mem::offset_of!(xdp_stats_record__bindgen_ty_2, rx_bytes) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_stats_record"][::std::mem::size_of::<xdp_stats_record>() - 16usize];
    ["Alignment of xdp_stats_record"][::std::mem::align_of::<xdp_stats_record>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_ring_offset {
    pub producer: __u64,
    pub consumer: __u64,
    pub desc: __u64,
    pub flags: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_ring_offset"][::std::mem::size_of::<xdp_ring_offset>() - 32usize];
    ["Alignment of xdp_ring_offset"][::std::mem::align_of::<xdp_ring_offset>() - 8usize];
    ["Offset of field: xdp_ring_offset::producer"]
        [::std::mem::offset_of!(xdp_ring_offset, producer) - 0usize];
    ["Offset of field: xdp_ring_offset::consumer"]
        [::std::mem::offset_of!(xdp_ring_offset, consumer) - 8usize];
    ["Offset of field: xdp_ring_offset::desc"]
        [::std::mem::offset_of!(xdp_ring_offset, desc) - 16usize];
    ["Offset of field: xdp_ring_offset::flags"]
        [::std::mem::offset_of!(xdp_ring_offset, flags) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_mmap_offsets {
    pub rx: xdp_ring_offset,
    pub tx: xdp_ring_offset,
    pub fr: xdp_ring_offset,
    pub cr: xdp_ring_offset,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_mmap_offsets"][::std::mem::size_of::<xdp_mmap_offsets>() - 128usize];
    ["Alignment of xdp_mmap_offsets"][::std::mem::align_of::<xdp_mmap_offsets>() - 8usize];
    ["Offset of field: xdp_mmap_offsets::rx"]
        [::std::mem::offset_of!(xdp_mmap_offsets, rx) - 0usize];
    ["Offset of field: xdp_mmap_offsets::tx"]
        [::std::mem::offset_of!(xdp_mmap_offsets, tx) - 32usize];
    ["Offset of field: xdp_mmap_offsets::fr"]
        [::std::mem::offset_of!(xdp_mmap_offsets, fr) - 64usize];
    ["Offset of field: xdp_mmap_offsets::cr"]
        [::std::mem::offset_of!(xdp_mmap_offsets, cr) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_umem_reg {
    pub addr: __u64,
    pub len: __u64,
    pub chunk_size: __u32,
    pub headroom: __u32,
    pub flags: __u32,
    pub tx_metadata_len: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_umem_reg"][::std::mem::size_of::<xdp_umem_reg>() - 32usize];
    ["Alignment of xdp_umem_reg"][::std::mem::align_of::<xdp_umem_reg>() - 8usize];
    ["Offset of field: xdp_umem_reg::addr"][::std::mem::offset_of!(xdp_umem_reg, addr) - 0usize];
    ["Offset of field: xdp_umem_reg::len"][::std::mem::offset_of!(xdp_umem_reg, len) - 8usize];
    ["Offset of field: xdp_umem_reg::chunk_size"]
        [::std::mem::offset_of!(xdp_umem_reg, chunk_size) - 16usize];
    ["Offset of field: xdp_umem_reg::headroom"]
        [::std::mem::offset_of!(xdp_umem_reg, headroom) - 20usize];
    ["Offset of field: xdp_umem_reg::flags"][::std::mem::offset_of!(xdp_umem_reg, flags) - 24usize];
    ["Offset of field: xdp_umem_reg::tx_metadata_len"]
        [::std::mem::offset_of!(xdp_umem_reg, tx_metadata_len) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_statistics {
    pub rx_dropped: __u64,
    pub rx_invalid_descs: __u64,
    pub tx_invalid_descs: __u64,
    pub rx_ring_full: __u64,
    pub rx_fill_ring_empty_descs: __u64,
    pub tx_ring_empty_descs: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_statistics"][::std::mem::size_of::<xdp_statistics>() - 48usize];
    ["Alignment of xdp_statistics"][::std::mem::align_of::<xdp_statistics>() - 8usize];
    ["Offset of field: xdp_statistics::rx_dropped"]
        [::std::mem::offset_of!(xdp_statistics, rx_dropped) - 0usize];
    ["Offset of field: xdp_statistics::rx_invalid_descs"]
        [::std::mem::offset_of!(xdp_statistics, rx_invalid_descs) - 8usize];
    ["Offset of field: xdp_statistics::tx_invalid_descs"]
        [::std::mem::offset_of!(xdp_statistics, tx_invalid_descs) - 16usize];
    ["Offset of field: xdp_statistics::rx_ring_full"]
        [::std::mem::offset_of!(xdp_statistics, rx_ring_full) - 24usize];
    ["Offset of field: xdp_statistics::rx_fill_ring_empty_descs"]
        [::std::mem::offset_of!(xdp_statistics, rx_fill_ring_empty_descs) - 32usize];
    ["Offset of field: xdp_statistics::tx_ring_empty_descs"]
        [::std::mem::offset_of!(xdp_statistics, tx_ring_empty_descs) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_options {
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_options"][::std::mem::size_of::<xdp_options>() - 4usize];
    ["Alignment of xdp_options"][::std::mem::align_of::<xdp_options>() - 4usize];
    ["Offset of field: xdp_options::flags"][::std::mem::offset_of!(xdp_options, flags) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xsk_tx_metadata {
    pub flags: __u64,
    pub __bindgen_anon_1: xsk_tx_metadata__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xsk_tx_metadata__bindgen_ty_1 {
    pub request: xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1,
    pub completion: xsk_tx_metadata__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1 {
    pub csum_start: __u16,
    pub csum_offset: __u16,
    pub launch_time: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1::csum_start"]
        [::std::mem::offset_of!(xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1, csum_start) - 0usize];
    ["Offset of field: xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1::csum_offset"]
        [::std::mem::offset_of!(xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1, csum_offset) - 2usize];
    ["Offset of field: xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1::launch_time"]
        [::std::mem::offset_of!(xsk_tx_metadata__bindgen_ty_1__bindgen_ty_1, launch_time) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsk_tx_metadata__bindgen_ty_1__bindgen_ty_2 {
    pub tx_timestamp: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsk_tx_metadata__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<xsk_tx_metadata__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of xsk_tx_metadata__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<xsk_tx_metadata__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: xsk_tx_metadata__bindgen_ty_1__bindgen_ty_2::tx_timestamp"][::std::mem::offset_of!(
        xsk_tx_metadata__bindgen_ty_1__bindgen_ty_2,
        tx_timestamp
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsk_tx_metadata__bindgen_ty_1"]
        [::std::mem::size_of::<xsk_tx_metadata__bindgen_ty_1>() - 16usize];
    ["Alignment of xsk_tx_metadata__bindgen_ty_1"]
        [::std::mem::align_of::<xsk_tx_metadata__bindgen_ty_1>() - 8usize];
    ["Offset of field: xsk_tx_metadata__bindgen_ty_1::request"]
        [::std::mem::offset_of!(xsk_tx_metadata__bindgen_ty_1, request) - 0usize];
    ["Offset of field: xsk_tx_metadata__bindgen_ty_1::completion"]
        [::std::mem::offset_of!(xsk_tx_metadata__bindgen_ty_1, completion) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsk_tx_metadata"][::std::mem::size_of::<xsk_tx_metadata>() - 24usize];
    ["Alignment of xsk_tx_metadata"][::std::mem::align_of::<xsk_tx_metadata>() - 8usize];
    ["Offset of field: xsk_tx_metadata::flags"]
        [::std::mem::offset_of!(xsk_tx_metadata, flags) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdp_desc {
    pub addr: __u64,
    pub len: __u32,
    pub options: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xdp_desc"][::std::mem::size_of::<xdp_desc>() - 16usize];
    ["Alignment of xdp_desc"][::std::mem::align_of::<xdp_desc>() - 8usize];
    ["Offset of field: xdp_desc::addr"][::std::mem::offset_of!(xdp_desc, addr) - 0usize];
    ["Offset of field: xdp_desc::len"][::std::mem::offset_of!(xdp_desc, len) - 8usize];
    ["Offset of field: xdp_desc::options"][::std::mem::offset_of!(xdp_desc, options) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsk_ring_prod {
    pub cached_prod: __u32,
    pub cached_cons: __u32,
    pub mask: __u32,
    pub size: __u32,
    pub producer: *mut __u32,
    pub consumer: *mut __u32,
    pub ring: *mut ::std::os::raw::c_void,
    pub flags: *mut __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsk_ring_prod"][::std::mem::size_of::<xsk_ring_prod>() - 48usize];
    ["Alignment of xsk_ring_prod"][::std::mem::align_of::<xsk_ring_prod>() - 8usize];
    ["Offset of field: xsk_ring_prod::cached_prod"]
        [::std::mem::offset_of!(xsk_ring_prod, cached_prod) - 0usize];
    ["Offset of field: xsk_ring_prod::cached_cons"]
        [::std::mem::offset_of!(xsk_ring_prod, cached_cons) - 4usize];
    ["Offset of field: xsk_ring_prod::mask"][::std::mem::offset_of!(xsk_ring_prod, mask) - 8usize];
    ["Offset of field: xsk_ring_prod::size"][::std::mem::offset_of!(xsk_ring_prod, size) - 12usize];
    ["Offset of field: xsk_ring_prod::producer"]
        [::std::mem::offset_of!(xsk_ring_prod, producer) - 16usize];
    ["Offset of field: xsk_ring_prod::consumer"]
        [::std::mem::offset_of!(xsk_ring_prod, consumer) - 24usize];
    ["Offset of field: xsk_ring_prod::ring"][::std::mem::offset_of!(xsk_ring_prod, ring) - 32usize];
    ["Offset of field: xsk_ring_prod::flags"]
        [::std::mem::offset_of!(xsk_ring_prod, flags) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsk_ring_cons {
    pub cached_prod: __u32,
    pub cached_cons: __u32,
    pub mask: __u32,
    pub size: __u32,
    pub producer: *mut __u32,
    pub consumer: *mut __u32,
    pub ring: *mut ::std::os::raw::c_void,
    pub flags: *mut __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsk_ring_cons"][::std::mem::size_of::<xsk_ring_cons>() - 48usize];
    ["Alignment of xsk_ring_cons"][::std::mem::align_of::<xsk_ring_cons>() - 8usize];
    ["Offset of field: xsk_ring_cons::cached_prod"]
        [::std::mem::offset_of!(xsk_ring_cons, cached_prod) - 0usize];
    ["Offset of field: xsk_ring_cons::cached_cons"]
        [::std::mem::offset_of!(xsk_ring_cons, cached_cons) - 4usize];
    ["Offset of field: xsk_ring_cons::mask"][::std::mem::offset_of!(xsk_ring_cons, mask) - 8usize];
    ["Offset of field: xsk_ring_cons::size"][::std::mem::offset_of!(xsk_ring_cons, size) - 12usize];
    ["Offset of field: xsk_ring_cons::producer"]
        [::std::mem::offset_of!(xsk_ring_cons, producer) - 16usize];
    ["Offset of field: xsk_ring_cons::consumer"]
        [::std::mem::offset_of!(xsk_ring_cons, consumer) - 24usize];
    ["Offset of field: xsk_ring_cons::ring"][::std::mem::offset_of!(xsk_ring_cons, ring) - 32usize];
    ["Offset of field: xsk_ring_cons::flags"]
        [::std::mem::offset_of!(xsk_ring_cons, flags) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsk_umem {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsk_socket {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xsk_ring_prod__fill_addr(fill: *mut xsk_ring_prod, idx: __u32) -> *mut __u64;
}
extern "C" {
    pub fn xsk_ring_cons__comp_addr(comp: *const xsk_ring_cons, idx: __u32) -> *const __u64;
}
extern "C" {
    pub fn xsk_ring_prod__tx_desc(tx: *mut xsk_ring_prod, idx: __u32) -> *mut xdp_desc;
}
extern "C" {
    pub fn xsk_ring_cons__rx_desc(rx: *const xsk_ring_cons, idx: __u32) -> *const xdp_desc;
}
extern "C" {
    pub fn xsk_ring_prod__needs_wakeup(r: *const xsk_ring_prod) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsk_prod_nb_free(r: *mut xsk_ring_prod, nb: __u32) -> __u32;
}
extern "C" {
    pub fn xsk_cons_nb_avail(r: *mut xsk_ring_cons, nb: __u32) -> __u32;
}
extern "C" {
    pub fn xsk_ring_prod__reserve(prod: *mut xsk_ring_prod, nb: __u32, idx: *mut __u32) -> __u32;
}
extern "C" {
    pub fn xsk_ring_prod__submit(prod: *mut xsk_ring_prod, nb: __u32);
}
extern "C" {
    pub fn xsk_ring_cons__peek(cons: *mut xsk_ring_cons, nb: __u32, idx: *mut __u32) -> __u32;
}
extern "C" {
    pub fn xsk_ring_cons__cancel(cons: *mut xsk_ring_cons, nb: __u32);
}
extern "C" {
    pub fn xsk_ring_cons__release(cons: *mut xsk_ring_cons, nb: __u32);
}
extern "C" {
    pub fn xsk_umem__get_data(
        umem_area: *mut ::std::os::raw::c_void,
        addr: __u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xsk_umem__extract_addr(addr: __u64) -> __u64;
}
extern "C" {
    pub fn xsk_umem__extract_offset(addr: __u64) -> __u64;
}
extern "C" {
    pub fn xsk_umem__add_offset_to_addr(addr: __u64) -> __u64;
}
extern "C" {
    pub fn xsk_umem__fd(umem: *const xsk_umem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsk_socket__fd(xsk: *const xsk_socket) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsk_umem_config {
    pub fill_size: __u32,
    pub comp_size: __u32,
    pub frame_size: __u32,
    pub frame_headroom: __u32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsk_umem_config"][::std::mem::size_of::<xsk_umem_config>() - 20usize];
    ["Alignment of xsk_umem_config"][::std::mem::align_of::<xsk_umem_config>() - 4usize];
    ["Offset of field: xsk_umem_config::fill_size"]
        [::std::mem::offset_of!(xsk_umem_config, fill_size) - 0usize];
    ["Offset of field: xsk_umem_config::comp_size"]
        [::std::mem::offset_of!(xsk_umem_config, comp_size) - 4usize];
    ["Offset of field: xsk_umem_config::frame_size"]
        [::std::mem::offset_of!(xsk_umem_config, frame_size) - 8usize];
    ["Offset of field: xsk_umem_config::frame_headroom"]
        [::std::mem::offset_of!(xsk_umem_config, frame_headroom) - 12usize];
    ["Offset of field: xsk_umem_config::flags"]
        [::std::mem::offset_of!(xsk_umem_config, flags) - 16usize];
};
extern "C" {
    pub fn xsk_setup_xdp_prog(
        ifindex: ::std::os::raw::c_int,
        xsks_map_fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsk_socket__update_xskmap(
        xsk: *mut xsk_socket,
        xsks_map_fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xsk_socket_config {
    pub rx_size: __u32,
    pub tx_size: __u32,
    pub __bindgen_anon_1: xsk_socket_config__bindgen_ty_1,
    pub xdp_flags: __u32,
    pub bind_flags: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xsk_socket_config__bindgen_ty_1 {
    pub libbpf_flags: __u32,
    pub libxdp_flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsk_socket_config__bindgen_ty_1"]
        [::std::mem::size_of::<xsk_socket_config__bindgen_ty_1>() - 4usize];
    ["Alignment of xsk_socket_config__bindgen_ty_1"]
        [::std::mem::align_of::<xsk_socket_config__bindgen_ty_1>() - 4usize];
    ["Offset of field: xsk_socket_config__bindgen_ty_1::libbpf_flags"]
        [::std::mem::offset_of!(xsk_socket_config__bindgen_ty_1, libbpf_flags) - 0usize];
    ["Offset of field: xsk_socket_config__bindgen_ty_1::libxdp_flags"]
        [::std::mem::offset_of!(xsk_socket_config__bindgen_ty_1, libxdp_flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsk_socket_config"][::std::mem::size_of::<xsk_socket_config>() - 20usize];
    ["Alignment of xsk_socket_config"][::std::mem::align_of::<xsk_socket_config>() - 4usize];
    ["Offset of field: xsk_socket_config::rx_size"]
        [::std::mem::offset_of!(xsk_socket_config, rx_size) - 0usize];
    ["Offset of field: xsk_socket_config::tx_size"]
        [::std::mem::offset_of!(xsk_socket_config, tx_size) - 4usize];
    ["Offset of field: xsk_socket_config::xdp_flags"]
        [::std::mem::offset_of!(xsk_socket_config, xdp_flags) - 12usize];
    ["Offset of field: xsk_socket_config::bind_flags"]
        [::std::mem::offset_of!(xsk_socket_config, bind_flags) - 16usize];
};
extern "C" {
    pub fn xsk_umem__create(
        umem: *mut *mut xsk_umem,
        umem_area: *mut ::std::os::raw::c_void,
        size: __u64,
        fill: *mut xsk_ring_prod,
        comp: *mut xsk_ring_cons,
        config: *const xsk_umem_config,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsk_umem__create_with_fd(
        umem: *mut *mut xsk_umem,
        fd: ::std::os::raw::c_int,
        umem_area: *mut ::std::os::raw::c_void,
        size: __u64,
        fill: *mut xsk_ring_prod,
        comp: *mut xsk_ring_cons,
        config: *const xsk_umem_config,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsk_socket__create(
        xsk: *mut *mut xsk_socket,
        ifname: *const ::std::os::raw::c_char,
        queue_id: __u32,
        umem: *mut xsk_umem,
        rx: *mut xsk_ring_cons,
        tx: *mut xsk_ring_prod,
        config: *const xsk_socket_config,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsk_socket__create_shared(
        xsk_ptr: *mut *mut xsk_socket,
        ifname: *const ::std::os::raw::c_char,
        queue_id: __u32,
        umem: *mut xsk_umem,
        rx: *mut xsk_ring_cons,
        tx: *mut xsk_ring_prod,
        fill: *mut xsk_ring_prod,
        comp: *mut xsk_ring_cons,
        config: *const xsk_socket_config,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsk_umem__delete(umem: *mut xsk_umem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsk_socket__delete(xsk: *mut xsk_socket);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
